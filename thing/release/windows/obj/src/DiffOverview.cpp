// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_DiffCalc
#include <DiffCalc.h>
#endif
#ifndef INCLUDED_DiffOverview
#include <DiffOverview.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_HelperFunctions
#include <HelperFunctions.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_SongMetadata
#include <SongMetadata.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d9e7ae71fdaa116e_35_new,"DiffOverview","new",0x4e3f66f0,"DiffOverview.new","DiffOverview.hx",35,0x1e32c680)
HX_LOCAL_STACK_FRAME(_hx_pos_d9e7ae71fdaa116e_53_create,"DiffOverview","create",0xf8344a6c,"DiffOverview.create","DiffOverview.hx",53,0x1e32c680)
HX_LOCAL_STACK_FRAME(_hx_pos_d9e7ae71fdaa116e_172_endSong,"DiffOverview","endSong",0x529efbe0,"DiffOverview.endSong","DiffOverview.hx",172,0x1e32c680)
HX_LOCAL_STACK_FRAME(_hx_pos_d9e7ae71fdaa116e_177_resyncVocals,"DiffOverview","resyncVocals",0x53c22dfc,"DiffOverview.resyncVocals","DiffOverview.hx",177,0x1e32c680)
HX_LOCAL_STACK_FRAME(_hx_pos_d9e7ae71fdaa116e_192_updateCurStep,"DiffOverview","updateCurStep",0x547f2873,"DiffOverview.updateCurStep","DiffOverview.hx",192,0x1e32c680)
HX_LOCAL_STACK_FRAME(_hx_pos_d9e7ae71fdaa116e_208_stepHit,"DiffOverview","stepHit",0xa563ccf7,"DiffOverview.stepHit","DiffOverview.hx",208,0x1e32c680)
HX_LOCAL_STACK_FRAME(_hx_pos_d9e7ae71fdaa116e_218_offsetChange,"DiffOverview","offsetChange",0x783a24d3,"DiffOverview.offsetChange","DiffOverview.hx",218,0x1e32c680)
HX_LOCAL_STACK_FRAME(_hx_pos_d9e7ae71fdaa116e_314_update,"DiffOverview","update",0x032a6979,"DiffOverview.update","DiffOverview.hx",314,0x1e32c680)
HX_LOCAL_STACK_FRAME(_hx_pos_d9e7ae71fdaa116e_228_update,"DiffOverview","update",0x032a6979,"DiffOverview.update","DiffOverview.hx",228,0x1e32c680)
HX_LOCAL_STACK_FRAME(_hx_pos_d9e7ae71fdaa116e_375_quit,"DiffOverview","quit",0x2b42673f,"DiffOverview.quit","DiffOverview.hx",375,0x1e32c680)
HX_LOCAL_STACK_FRAME(_hx_pos_d9e7ae71fdaa116e_391_generateSong,"DiffOverview","generateSong",0x0801051a,"DiffOverview.generateSong","DiffOverview.hx",391,0x1e32c680)
HX_LOCAL_STACK_FRAME(_hx_pos_d9e7ae71fdaa116e_501_sortByShit,"DiffOverview","sortByShit",0x3f3a5aa5,"DiffOverview.sortByShit","DiffOverview.hx",501,0x1e32c680)
HX_LOCAL_STACK_FRAME(_hx_pos_d9e7ae71fdaa116e_50_boot,"DiffOverview","boot",0x2153aba2,"DiffOverview.boot","DiffOverview.hx",50,0x1e32c680)

void DiffOverview_obj::__construct( ::Dynamic BGColor){
            	HX_STACKFRAME(&_hx_pos_d9e7ae71fdaa116e_35_new)
HXLINE( 388)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 225)		this->frames = 0;
HXLINE( 189)		this->oldStep = 0;
HXLINE( 188)		this->currentStep = 0;
HXLINE( 186)		this->stopDoingShit = false;
HXLINE(  35)		super::__construct(BGColor);
            	}

Dynamic DiffOverview_obj::__CreateEmpty() { return new DiffOverview_obj; }

void *DiffOverview_obj::_hx_vtable = 0;

Dynamic DiffOverview_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DiffOverview_obj > _hx_result = new DiffOverview_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool DiffOverview_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x0a4ec1be) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a4ec1be;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void DiffOverview_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_d9e7ae71fdaa116e_53_create)
HXLINE(  54)		::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE(  55)		::Conductor_obj::lastSongPos = ( (Float)(0) );
HXLINE(  57)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  58)		{
HXLINE(  58)			 ::flixel::FlxCamera _hx_tmp = this->camHUD;
HXDLIN(  58)			_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN(  58)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN(  58)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            		}
HXLINE(  59)		 ::flixel::FlxCamera camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  61)		::flixel::FlxG_obj::cameras->add(camGame,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE(  63)		::flixel::FlxG_obj::cameras->add(this->camHUD,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE(  65)		::flixel::FlxCamera_obj::_defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,camGame);
HXLINE(  67)		::DiffOverview_obj::playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  69)		this->SONG = ::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty);
HXLINE(  71)		this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )) - ( (Float)(295) )),null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE(  72)		this->strumLine->scrollFactor->set(null(),null());
HXLINE(  74)		this->blackBox =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE(  75)		this->blackBox->set_alpha(( (Float)(0) ));
HXLINE(  76)		this->add(this->blackBox);
HXLINE(  78)		::FreeplayState_obj::openedPreview = true;
HXLINE(  80)		this->handOne = ::DiffCalc_obj::lastDiffHandOne;
HXLINE(  81)		this->handTwo = ::DiffCalc_obj::lastDiffHandTwo;
HXLINE(  82)		{
HXLINE(  82)			int _g = 0;
HXDLIN(  82)			while((_g < 4)){
HXLINE(  82)				_g = (_g + 1);
HXDLIN(  82)				int i = (_g - 1);
HXLINE(  85)				 ::flixel::FlxSprite babyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,this->strumLine->y,null());
HXLINE(  87)				bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN(  87)				::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d));
HXDLIN(  87)				babyArrow->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("shared",a5,5e,2b,1d))));
HXLINE(  88)				babyArrow->animation->addByPrefix(HX_("green",c3,0e,ed,99),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(  89)				babyArrow->animation->addByPrefix(HX_("blue",9a,42,19,41),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(  90)				babyArrow->animation->addByPrefix(HX_("purple",3c,f6,89,71),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(  91)				babyArrow->animation->addByPrefix(HX_("red",51,d9,56,00),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(  92)				babyArrow->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  93)				babyArrow->setGraphicSize(::Std_obj::_hx_int((babyArrow->get_width() * ((Float)0.7))),null());
HXLINE(  95)				Float _hx_switch_0 = ::Math_obj::abs(( (Float)(i) ));
            				if (  (_hx_switch_0==( (Float)(0) )) ){
HXLINE( 113)					{
HXLINE( 113)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN( 113)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(0) ))));
            					}
HXLINE( 114)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE( 115)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("left press",aa,26,70,8e),24,false,null(),null());
HXLINE( 116)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("left confirm",e7,c7,19,fe),24,false,null(),null());
HXLINE( 112)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==( (Float)(1) )) ){
HXLINE( 108)					{
HXLINE( 108)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN( 108)						_g->set_x((_g->x + ::Note_obj::swagWidth));
            					}
HXLINE( 109)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE( 110)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("down press",45,4d,63,9c),24,false,null(),null());
HXLINE( 111)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("down confirm",42,0b,18,cc),24,false,null(),null());
HXLINE( 107)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==( (Float)(2) )) ){
HXLINE(  98)					{
HXLINE(  98)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(  98)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(2) ))));
            					}
HXLINE(  99)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE( 100)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("up press",fe,fb,65,e9),24,false,null(),null());
HXLINE( 101)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("up confirm",3b,9a,2e,62),24,false,null(),null());
HXLINE(  97)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==( (Float)(3) )) ){
HXLINE( 103)					{
HXLINE( 103)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN( 103)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(3) ))));
            					}
HXLINE( 104)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE( 105)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("right press",3f,38,e4,c8),24,false,null(),null());
HXLINE( 106)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("right confirm",bc,28,e5,ca),24,false,null(),null());
HXLINE( 102)					goto _hx_goto_2;
            				}
            				_hx_goto_2:;
HXLINE( 119)				babyArrow->updateHitbox();
HXLINE( 120)				babyArrow->scrollFactor->set(null(),null());
HXLINE( 122)				{
HXLINE( 122)					 ::flixel::FlxSprite _g1 = babyArrow;
HXDLIN( 122)					_g1->set_y((_g1->y - ( (Float)(10) )));
            				}
HXLINE( 123)				babyArrow->set_alpha(( (Float)(1) ));
HXLINE( 125)				babyArrow->ID = i;
HXLINE( 127)				::DiffOverview_obj::playerStrums->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 129)				babyArrow->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
HXLINE( 130)				{
HXLINE( 130)					 ::flixel::FlxSprite _g2 = babyArrow;
HXDLIN( 130)					_g2->set_x((_g2->x + 50));
            				}
HXLINE( 131)				{
HXLINE( 131)					 ::flixel::FlxSprite _g3 = babyArrow;
HXDLIN( 131)					_g3->set_x((_g3->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            				}
            			}
            		}
HXLINE( 134)		this->add(::DiffOverview_obj::playerStrums);
HXLINE( 136)		this->generateSong(HX_("assItch",31,23,5a,24));
HXLINE( 138)		::DiffOverview_obj::playerStrums->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 139)		this->notes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 140)		this->blackBox->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 142)		this->blackBox->set_x(Dynamic( ::DiffOverview_obj::playerStrums->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->x);
HXLINE( 143)		this->blackBox->set_y(this->strumLine->y);
HXLINE( 145)		this->camHUD->set_zoom(((Float)0.6));
HXLINE( 146)		this->camHUD->set_alpha(( (Float)(0) ));
HXLINE( 147)		this->camHUD->set_height(5000);
HXLINE( 148)		this->blackBox->set_height(( (Float)(this->camHUD->height) ));
HXLINE( 150)		{
HXLINE( 150)			 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN( 150)			_g1->set_x((_g1->x + 280));
            		}
HXLINE( 152)		{
HXLINE( 152)			 ::flixel::FlxSprite _g2 = this->blackBox;
HXDLIN( 152)			_g2->set_y((_g2->y - ( (Float)(100) )));
            		}
HXLINE( 153)		{
HXLINE( 153)			 ::flixel::FlxSprite _g3 = this->blackBox;
HXDLIN( 153)			_g3->set_x((_g3->x - ( (Float)(100) )));
            		}
HXLINE( 155)		int _hx_tmp2 = (::flixel::FlxG_obj::height - 40);
HXDLIN( 155)		this->offset =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,_hx_tmp2,0,((HX_("Offset: ",19,d1,b4,7a) + ::HelperFunctions_obj::truncateFloat(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic)) ),0)) + HX_(" (LEFT/RIGHT to decrease/increase)",d7,68,9a,0f)),16,null());
HXLINE( 156)		{
HXLINE( 156)			 ::flixel::text::FlxText _this = this->offset;
HXDLIN( 156)			_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 156)			_this->set_borderColor(-16777216);
HXDLIN( 156)			_this->set_borderSize(( (Float)(4) ));
HXDLIN( 156)			_this->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 157)		this->offset->set_color(-1);
HXLINE( 158)		this->offset->scrollFactor->set(null(),null());
HXLINE( 161)		::flixel::tweens::FlxTween_obj::tween(this->blackBox, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.5))),1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
HXLINE( 162)		::flixel::tweens::FlxTween_obj::tween(this->camHUD, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
HXLINE( 163)		::flixel::tweens::FlxTween_obj::tween(this->offset, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
HXLINE( 167)		this->super::create();
            	}


void DiffOverview_obj::endSong(){
            	HX_STACKFRAME(&_hx_pos_d9e7ae71fdaa116e_172_endSong)
HXDLIN( 172)		if (this->stopDoingShit) {
HXLINE( 173)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiffOverview_obj,endSong,(void))

void DiffOverview_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_d9e7ae71fdaa116e_177_resyncVocals)
HXLINE( 178)		this->vocals->pause();
HXLINE( 180)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE( 181)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE( 182)		this->vocals->set_time(::Conductor_obj::songPosition);
HXLINE( 183)		this->vocals->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiffOverview_obj,resyncVocals,(void))

void DiffOverview_obj::updateCurStep(){
            	HX_STACKFRAME(&_hx_pos_d9e7ae71fdaa116e_192_updateCurStep)
HXLINE( 193)		 ::Dynamic lastChange =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("stepTime",79,75,25,a0),0)
            			->setFixed(1,HX_("bpm",df,be,4a,00),( (Float)(0) ))
            			->setFixed(2,HX_("songTime",82,2a,d5,3a),( (Float)(0) )));
HXLINE( 198)		{
HXLINE( 198)			int _g = 0;
HXDLIN( 198)			int _g1 = ::Conductor_obj::bpmChangeMap->length;
HXDLIN( 198)			while((_g < _g1)){
HXLINE( 198)				_g = (_g + 1);
HXDLIN( 198)				int i = (_g - 1);
HXLINE( 200)				if (::hx::IsGreaterEq( ::Conductor_obj::songPosition,::Conductor_obj::bpmChangeMap->__get(i)->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic) )) {
HXLINE( 201)					lastChange = ::Conductor_obj::bpmChangeMap->__get(i);
            				}
            			}
            		}
HXLINE( 204)		this->currentStep = ( (int)((lastChange->__Field(HX_("stepTime",79,75,25,a0),::hx::paccDynamic) + ::Math_obj::floor(((::Conductor_obj::songPosition - ( (Float)(lastChange->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic)) )) / ::Conductor_obj::stepCrochet)))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiffOverview_obj,updateCurStep,(void))

void DiffOverview_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_d9e7ae71fdaa116e_208_stepHit)
HXLINE( 209)		bool _hx_tmp;
HXDLIN( 209)		if (!((::flixel::FlxG_obj::sound->music->_time > (::Conductor_obj::songPosition + 20)))) {
HXLINE( 209)			_hx_tmp = (::flixel::FlxG_obj::sound->music->_time < (::Conductor_obj::songPosition - ( (Float)(20) )));
            		}
            		else {
HXLINE( 209)			_hx_tmp = true;
            		}
HXDLIN( 209)		if (_hx_tmp) {
HXLINE( 212)			this->resyncVocals();
            		}
HXLINE( 214)		this->oldStep = this->currentStep;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiffOverview_obj,stepHit,(void))

void DiffOverview_obj::offsetChange(){
            	HX_GC_STACKFRAME(&_hx_pos_d9e7ae71fdaa116e_218_offsetChange)
HXLINE( 219)		{
HXLINE( 219)			int _g = 0;
HXDLIN( 219)			::Array< ::Dynamic> _g1 = this->unspawnNotes;
HXDLIN( 219)			while((_g < _g1->length)){
HXLINE( 219)				 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN( 219)				_g = (_g + 1);
HXLINE( 220)				i->strumTime = ( (Float)((i->baseStrum + ::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic))) );
            			}
            		}
HXLINE( 221)		{
HXLINE( 221)			 ::Dynamic filter = null();
HXDLIN( 221)			 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->notes->members,filter);
HXDLIN( 221)			while(i->hasNext()){
HXLINE( 221)				 ::Note i1 = i->next().StaticCast<  ::Note >();
HXLINE( 222)				i1->strumTime = ( (Float)((i1->baseStrum + ::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic))) );
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiffOverview_obj,offsetChange,(void))

void DiffOverview_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::DiffOverview,_gthis) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_GC_STACKFRAME(&_hx_pos_d9e7ae71fdaa116e_314_update)
HXLINE( 317)			if (daNote->tooLate) {
HXLINE( 319)				daNote->set_active(false);
HXLINE( 320)				daNote->set_visible(false);
            			}
            			else {
HXLINE( 324)				daNote->set_visible(true);
HXLINE( 325)				daNote->set_active(true);
            			}
HXLINE( 328)			Float _hx_tmp = Dynamic( ::DiffOverview_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y;
HXLINE( 329)			Float _hx_tmp1 = (((Float)0.45) * (::Conductor_obj::songPosition - daNote->strumTime));
HXLINE( 328)			daNote->set_y((_hx_tmp - (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(( (Float)(_gthis->SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ),2))));
HXLINE( 332)			if (daNote->isSustainNote) {
HXLINE( 334)				{
HXLINE( 334)					 ::Note _g = daNote;
HXDLIN( 334)					Float _g1 = _g->y;
HXDLIN( 334)					_g->set_y((_g1 - (daNote->get_height() / ( (Float)(2) ))));
            				}
HXLINE( 336)				bool _hx_tmp;
HXDLIN( 336)				bool _hx_tmp1;
HXDLIN( 336)				bool _hx_tmp2;
HXDLIN( 336)				if (daNote->mustPress) {
HXLINE( 336)					_hx_tmp2 = daNote->wasGoodHit;
            				}
            				else {
HXLINE( 336)					_hx_tmp2 = true;
            				}
HXDLIN( 336)				if (!(_hx_tmp2)) {
HXLINE( 336)					if (daNote->prevNote->wasGoodHit) {
HXLINE( 336)						_hx_tmp1 = !(daNote->canBeHit);
            					}
            					else {
HXLINE( 336)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE( 336)					_hx_tmp1 = true;
            				}
HXDLIN( 336)				if (_hx_tmp1) {
HXLINE( 336)					_hx_tmp = ((daNote->y + (daNote->offset->y * daNote->scale->y)) <= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            				}
            				else {
HXLINE( 336)					_hx_tmp = false;
            				}
HXDLIN( 336)				if (_hx_tmp) {
HXLINE( 340)					Float swagRect = daNote->get_width();
HXDLIN( 340)					Float swagRect1 = (swagRect / daNote->scale->x);
HXDLIN( 340)					Float swagRect2 = daNote->get_height();
HXDLIN( 340)					 ::flixel::math::FlxRect swagRect3 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,swagRect1,(swagRect2 / daNote->scale->y));
HXLINE( 341)					swagRect3->y = (((Dynamic( ::DiffOverview_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE( 342)					 ::flixel::math::FlxRect swagRect4 = swagRect3;
HXDLIN( 342)					swagRect4->height = (swagRect4->height - swagRect3->y);
HXLINE( 344)					daNote->set_clipRect(swagRect3);
            				}
            			}
HXLINE( 348)			daNote->set_visible(Dynamic( ::DiffOverview_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->visible);
HXLINE( 349)			daNote->set_x(Dynamic( ::DiffOverview_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->x);
HXLINE( 350)			if (!(daNote->isSustainNote)) {
HXLINE( 351)				daNote->set_angle(Dynamic( ::DiffOverview_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->angle);
            			}
HXLINE( 352)			daNote->set_alpha(Dynamic( ::DiffOverview_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->alpha);
HXLINE( 356)			if ((daNote->y < _gthis->strumLine->y)) {
HXLINE( 359)				bool _hx_tmp;
HXDLIN( 359)				bool _hx_tmp1;
HXDLIN( 359)				if (daNote->canBeHit) {
HXLINE( 359)					_hx_tmp1 = daNote->mustPress;
            				}
            				else {
HXLINE( 359)					_hx_tmp1 = false;
            				}
HXDLIN( 359)				if (!(_hx_tmp1)) {
HXLINE( 359)					if (daNote->tooLate) {
HXLINE( 359)						_hx_tmp = daNote->mustPress;
            					}
            					else {
HXLINE( 359)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 359)					_hx_tmp = true;
            				}
HXDLIN( 359)				if (_hx_tmp) {
HXLINE( 362)					daNote->wasGoodHit = true;
HXLINE( 363)					_gthis->vocals->set_volume(( (Float)(1) ));
HXLINE( 365)					daNote->kill();
HXLINE( 366)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE( 367)					daNote->destroy();
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_d9e7ae71fdaa116e_228_update)
HXLINE( 227)		 ::DiffOverview _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 229)		this->super::update(elapsed);
HXLINE( 234)		if ((this->frames < 10)) {
HXLINE( 236)			this->frames++;
HXLINE( 237)			return;
            		}
HXLINE( 240)		if (this->stopDoingShit) {
HXLINE( 241)			return;
            		}
HXLINE( 243)		this->updateCurStep();
HXLINE( 245)		bool _hx_tmp;
HXDLIN( 245)		if ((this->oldStep != this->currentStep)) {
HXLINE( 245)			_hx_tmp = (this->currentStep > 0);
            		}
            		else {
HXLINE( 245)			_hx_tmp = false;
            		}
HXDLIN( 245)		if (_hx_tmp) {
HXLINE( 246)			this->stepHit();
            		}
HXLINE( 248)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 248)		if (_this->keyManager->checkStatus(32,_this->status)) {
HXLINE( 250)			this->stopDoingShit = true;
HXLINE( 251)			this->quit();
            		}
HXLINE( 254)		 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
HXLINE( 256)		if (::hx::IsNotNull( gamepad )) {
HXLINE( 257)			 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this = gamepad->justPressed;
HXDLIN( 257)			int id = 2;
HXDLIN( 257)			 ::flixel::input::gamepad::FlxGamepad _this1 = _this->gamepad;
HXDLIN( 257)			int Status = _this->status;
HXDLIN( 257)			bool _hx_tmp;
HXDLIN( 257)			switch((int)(id)){
            				case (int)-2: {
HXLINE( 257)					_hx_tmp = _this1->anyButton(Status);
            				}
            				break;
            				case (int)-1: {
HXLINE( 257)					_hx_tmp = !(_this1->anyButton(Status));
            				}
            				break;
            				default:{
HXLINE( 257)					int RawID = _this1->mapping->getRawID(id);
HXDLIN( 257)					 ::flixel::input::gamepad::FlxGamepadButton button = _this1->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 257)					if (::hx::IsNotNull( button )) {
HXLINE( 257)						_hx_tmp = button->hasState(Status);
            					}
            					else {
HXLINE( 257)						_hx_tmp = false;
            					}
            				}
            			}
HXDLIN( 257)			if (_hx_tmp) {
HXLINE( 259)				this->stopDoingShit = true;
HXLINE( 260)				this->quit();
            			}
            		}
HXLINE( 295)		if (::hx::IsNotNull( this->vocals )) {
HXLINE( 296)			if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE( 297)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN( 297)				::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
            			}
            		}
HXLINE( 299)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::Note >() )) {
HXLINE( 301)			if (((this->unspawnNotes->__get(0).StaticCast<  ::Note >()->strumTime - ::Conductor_obj::songPosition) < 3500)) {
HXLINE( 303)				 ::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::Note >();
HXLINE( 304)				this->notes->add(dunceNote).StaticCast<  ::Note >();
HXLINE( 306)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE( 307)				this->unspawnNotes->removeRange(index,1);
            			}
            		}
HXLINE( 313)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


void DiffOverview_obj::quit(){
            	HX_STACKFRAME(&_hx_pos_d9e7ae71fdaa116e_375_quit)
HXLINE( 376)		::flixel::tweens::FlxTween_obj::tween(this->blackBox, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
HXLINE( 377)		::flixel::tweens::FlxTween_obj::tween(this->camHUD, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
HXLINE( 378)		::flixel::tweens::FlxTween_obj::tween(this->offset, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
HXLINE( 380)		{
HXLINE( 380)			 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN( 380)			 ::Dynamic onComplete = null();
HXDLIN( 380)			if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 380)				_this->fadeTween->cancel();
            			}
HXDLIN( 380)			_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(0) ),( (Float)(1) ), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            		}
HXLINE( 382)		::FreeplayState_obj::openedPreview = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiffOverview_obj,quit,(void))

void DiffOverview_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_d9e7ae71fdaa116e_391_generateSong)
HXLINE( 394)		 ::Dynamic songData = ::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty);
HXLINE( 395)		::Conductor_obj::changeBPM(( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE( 397)		if (( (bool)(this->SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE( 398)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 398)			::String songLowercase = ::StringTools_obj::replace(( (::String)(this->SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN( 398)			::String _hx_switch_0 = songLowercase;
            			if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE( 398)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN( 398)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_0==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE( 398)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN( 398)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE( 398)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN( 398)				goto _hx_goto_15;
            			}
            			_hx_goto_15:;
HXDLIN( 398)			this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
            		}
            		else {
HXLINE( 400)			this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE( 404)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 406)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 407)		this->add(this->notes);
HXLINE( 409)		::Array< ::Dynamic> noteData = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE( 414)		int playerCounter = 0;
HXLINE( 416)		int daBeats = 0;
HXLINE( 417)		{
HXLINE( 417)			int _g = 0;
HXDLIN( 417)			while((_g < noteData->length)){
HXLINE( 417)				 ::Dynamic section = noteData->__get(_g);
HXDLIN( 417)				_g = (_g + 1);
HXLINE( 419)				int coolSection = ::Std_obj::_hx_int((( (Float)(section->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) / ( (Float)(4) )));
HXLINE( 421)				{
HXLINE( 421)					int _g1 = 0;
HXDLIN( 421)					::Array< ::Dynamic> _g2 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 421)					while((_g1 < _g2->length)){
HXLINE( 421)						::cpp::VirtualArray songNotes = ::cpp::VirtualArray( _g2->__get(_g1));
HXDLIN( 421)						_g1 = (_g1 + 1);
HXLINE( 423)						Float daStrumTime = ( (Float)((songNotes->__get(0) + ::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic))) );
HXLINE( 424)						if ((daStrumTime < 0)) {
HXLINE( 425)							daStrumTime = ( (Float)(0) );
            						}
HXLINE( 426)						int daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__get(1),4));
HXLINE( 428)						bool gottaHitNote = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE( 430)						if (::hx::IsGreater( songNotes->__get(1),3 )) {
HXLINE( 432)							gottaHitNote = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            						}
HXLINE( 435)						 ::Note oldNote;
HXLINE( 436)						if ((this->unspawnNotes->length > 0)) {
HXLINE( 437)							oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
            						}
            						else {
HXLINE( 439)							oldNote = null();
            						}
HXLINE( 441)						 ::Note swagNote =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,oldNote,false,true,null(),null());
HXLINE( 444)						if (!(gottaHitNote)) {
HXLINE( 445)							continue;
            						}
HXLINE( 447)						swagNote->baseStrum = ( (Float)(::Math_obj::round(( (Float)(songNotes->__get(0)) ))) );
HXLINE( 449)						swagNote->sustainLength = ( (Float)(songNotes->__get(2)) );
HXLINE( 450)						swagNote->scrollFactor->set(0,0);
HXLINE( 452)						Float susLength = swagNote->sustainLength;
HXLINE( 454)						susLength = (susLength / ::Conductor_obj::stepCrochet);
HXLINE( 455)						this->unspawnNotes->push(swagNote);
HXLINE( 457)						{
HXLINE( 457)							int _g = 0;
HXDLIN( 457)							int _g3 = ::Math_obj::floor(susLength);
HXDLIN( 457)							while((_g < _g3)){
HXLINE( 457)								_g = (_g + 1);
HXDLIN( 457)								int susNote = (_g - 1);
HXLINE( 459)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
HXLINE( 461)								 ::Note sustainNote =  ::Note_obj::__alloc( HX_CTX ,((daStrumTime + (::Conductor_obj::stepCrochet * ( (Float)(susNote) ))) + ::Conductor_obj::stepCrochet),daNoteData,oldNote,true,true,null(),null());
HXLINE( 462)								sustainNote->scrollFactor->set(null(),null());
HXLINE( 463)								this->unspawnNotes->push(sustainNote);
HXLINE( 465)								sustainNote->mustPress = gottaHitNote;
HXLINE( 467)								if (sustainNote->mustPress) {
HXLINE( 469)									 ::Note _g = sustainNote;
HXDLIN( 469)									_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
            							}
            						}
HXLINE( 473)						swagNote->mustPress = gottaHitNote;
HXLINE( 475)						if (swagNote->mustPress) {
HXLINE( 477)							 ::Note _g = swagNote;
HXDLIN( 477)							_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            					}
            				}
HXLINE( 483)				daBeats = (daBeats + 1);
            			}
            		}
HXLINE( 489)		this->unspawnNotes->sort(this->sortByShit_dyn());
HXLINE( 491)		::Conductor_obj::mapBPMChanges(this->SONG);
HXLINE( 492)		::Conductor_obj::changeBPM(( (Float)(this->SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE( 494)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 494)		::String songLowercase = ::StringTools_obj::replace(( (::String)(this->SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN( 494)		::String _hx_switch_1 = songLowercase;
            		if (  (_hx_switch_1==HX_("dad-battle",be,d5,66,07)) ){
HXLINE( 494)			songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN( 494)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_1==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE( 494)			songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN( 494)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_1==HX_("philly-nice",22,2e,26,44)) ){
HXLINE( 494)			songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN( 494)			goto _hx_goto_19;
            		}
            		_hx_goto_19:;
HXDLIN( 494)		_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),1,false,null());
HXLINE( 495)		::flixel::FlxG_obj::sound->music->onComplete = this->endSong_dyn();
HXLINE( 496)		this->vocals->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DiffOverview_obj,generateSong,(void))

int DiffOverview_obj::sortByShit( ::Note Obj1, ::Note Obj2){
            	HX_STACKFRAME(&_hx_pos_d9e7ae71fdaa116e_501_sortByShit)
HXDLIN( 501)		Float Value1 = Obj1->strumTime;
HXDLIN( 501)		Float Value2 = Obj2->strumTime;
HXDLIN( 501)		int result = 0;
HXDLIN( 501)		if ((Value1 < Value2)) {
HXDLIN( 501)			result = -1;
            		}
            		else {
HXDLIN( 501)			if ((Value1 > Value2)) {
HXDLIN( 501)				result = 1;
            			}
            		}
HXDLIN( 501)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DiffOverview_obj,sortByShit,return )

 ::flixel::group::FlxTypedGroup DiffOverview_obj::playerStrums;


::hx::ObjectPtr< DiffOverview_obj > DiffOverview_obj::__new( ::Dynamic BGColor) {
	::hx::ObjectPtr< DiffOverview_obj > __this = new DiffOverview_obj();
	__this->__construct(BGColor);
	return __this;
}

::hx::ObjectPtr< DiffOverview_obj > DiffOverview_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic BGColor) {
	DiffOverview_obj *__this = (DiffOverview_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DiffOverview_obj), true, "DiffOverview"));
	*(void **)__this = DiffOverview_obj::_hx_vtable;
	__this->__construct(BGColor);
	return __this;
}

DiffOverview_obj::DiffOverview_obj()
{
}

void DiffOverview_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DiffOverview);
	HX_MARK_MEMBER_NAME(blackBox,"blackBox");
	HX_MARK_MEMBER_NAME(handOne,"handOne");
	HX_MARK_MEMBER_NAME(handTwo,"handTwo");
	HX_MARK_MEMBER_NAME(giantText,"giantText");
	HX_MARK_MEMBER_NAME(SONG,"SONG");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(stopDoingShit,"stopDoingShit");
	HX_MARK_MEMBER_NAME(currentStep,"currentStep");
	HX_MARK_MEMBER_NAME(oldStep,"oldStep");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DiffOverview_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(blackBox,"blackBox");
	HX_VISIT_MEMBER_NAME(handOne,"handOne");
	HX_VISIT_MEMBER_NAME(handTwo,"handTwo");
	HX_VISIT_MEMBER_NAME(giantText,"giantText");
	HX_VISIT_MEMBER_NAME(SONG,"SONG");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(stopDoingShit,"stopDoingShit");
	HX_VISIT_MEMBER_NAME(currentStep,"currentStep");
	HX_VISIT_MEMBER_NAME(oldStep,"oldStep");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DiffOverview_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { return ::hx::Val( SONG ); }
		if (HX_FIELD_EQ(inName,"quit") ) { return ::hx::Val( quit_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"offset") ) { return ::hx::Val( offset ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"frames") ) { return ::hx::Val( frames ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"handOne") ) { return ::hx::Val( handOne ); }
		if (HX_FIELD_EQ(inName,"handTwo") ) { return ::hx::Val( handTwo ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"oldStep") ) { return ::hx::Val( oldStep ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"blackBox") ) { return ::hx::Val( blackBox ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"giantText") ) { return ::hx::Val( giantText ); }
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sortByShit") ) { return ::hx::Val( sortByShit_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentStep") ) { return ::hx::Val( currentStep ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"offsetChange") ) { return ::hx::Val( offsetChange_dyn() ); }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stopDoingShit") ) { return ::hx::Val( stopDoingShit ); }
		if (HX_FIELD_EQ(inName,"updateCurStep") ) { return ::hx::Val( updateCurStep_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DiffOverview_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"playerStrums") ) { outValue = ( playerStrums ); return true; }
	}
	return false;
}

::hx::Val DiffOverview_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frames") ) { frames=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"handOne") ) { handOne=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"handTwo") ) { handTwo=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oldStep") ) { oldStep=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"blackBox") ) { blackBox=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"giantText") ) { giantText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentStep") ) { currentStep=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stopDoingShit") ) { stopDoingShit=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DiffOverview_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
	}
	return false;
}

void DiffOverview_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("blackBox",8c,81,93,80));
	outFields->push(HX_("handOne",37,b6,bf,45));
	outFields->push(HX_("handTwo",5d,89,c3,45));
	outFields->push(HX_("giantText",52,01,04,14));
	outFields->push(HX_("SONG",d5,eb,18,37));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("offset",93,97,3f,60));
	outFields->push(HX_("stopDoingShit",35,81,3b,85));
	outFields->push(HX_("currentStep",25,c0,ed,84));
	outFields->push(HX_("oldStep",93,8b,a0,01));
	outFields->push(HX_("frames",a6,af,85,ac));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DiffOverview_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DiffOverview_obj,blackBox),HX_("blackBox",8c,81,93,80)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(DiffOverview_obj,handOne),HX_("handOne",37,b6,bf,45)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(DiffOverview_obj,handTwo),HX_("handTwo",5d,89,c3,45)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(DiffOverview_obj,giantText),HX_("giantText",52,01,04,14)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DiffOverview_obj,SONG),HX_("SONG",d5,eb,18,37)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DiffOverview_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(DiffOverview_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(DiffOverview_obj,offset),HX_("offset",93,97,3f,60)},
	{::hx::fsBool,(int)offsetof(DiffOverview_obj,stopDoingShit),HX_("stopDoingShit",35,81,3b,85)},
	{::hx::fsInt,(int)offsetof(DiffOverview_obj,currentStep),HX_("currentStep",25,c0,ed,84)},
	{::hx::fsInt,(int)offsetof(DiffOverview_obj,oldStep),HX_("oldStep",93,8b,a0,01)},
	{::hx::fsInt,(int)offsetof(DiffOverview_obj,frames),HX_("frames",a6,af,85,ac)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(DiffOverview_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(DiffOverview_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(DiffOverview_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo DiffOverview_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &DiffOverview_obj::playerStrums,HX_("playerStrums",4b,e1,2a,0d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String DiffOverview_obj_sMemberFields[] = {
	HX_("blackBox",8c,81,93,80),
	HX_("handOne",37,b6,bf,45),
	HX_("handTwo",5d,89,c3,45),
	HX_("giantText",52,01,04,14),
	HX_("SONG",d5,eb,18,37),
	HX_("strumLine",dd,79,d7,ee),
	HX_("camHUD",e8,2b,76,b7),
	HX_("offset",93,97,3f,60),
	HX_("create",fc,66,0f,7c),
	HX_("endSong",50,dd,7c,2e),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("stopDoingShit",35,81,3b,85),
	HX_("currentStep",25,c0,ed,84),
	HX_("oldStep",93,8b,a0,01),
	HX_("updateCurStep",e3,bd,df,82),
	HX_("stepHit",67,ae,41,81),
	HX_("offsetChange",63,0d,65,8f),
	HX_("frames",a6,af,85,ac),
	HX_("update",09,86,05,87),
	HX_("quit",cf,3f,0a,4b),
	HX_("vocals",5e,10,51,59),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("sortByShit",35,ff,86,6e),
	::String(null()) };

static void DiffOverview_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DiffOverview_obj::playerStrums,"playerStrums");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DiffOverview_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DiffOverview_obj::playerStrums,"playerStrums");
};

#endif

::hx::Class DiffOverview_obj::__mClass;

static ::String DiffOverview_obj_sStaticFields[] = {
	HX_("playerStrums",4b,e1,2a,0d),
	::String(null())
};

void DiffOverview_obj::__register()
{
	DiffOverview_obj _hx_dummy;
	DiffOverview_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("DiffOverview",fe,6e,6d,21);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DiffOverview_obj::__GetStatic;
	__mClass->mSetStaticField = &DiffOverview_obj::__SetStatic;
	__mClass->mMarkFunc = DiffOverview_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(DiffOverview_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DiffOverview_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DiffOverview_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DiffOverview_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DiffOverview_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DiffOverview_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DiffOverview_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d9e7ae71fdaa116e_50_boot)
HXDLIN(  50)		playerStrums = null();
            	}
}

