// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Stage
#include <Stage.h>
#endif
#ifndef INCLUDED_StageDebugState
#include <StageDebugState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxCollision
#include <flixel/util/FlxCollision.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <haxe/iterators/MapKeyValueIterator.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7e3bfe2dc256154a_17_new,"StageDebugState","new",0xe4cca5ee,"StageDebugState.new","StageDebugState.hx",17,0x4ccaf142)
HX_LOCAL_STACK_FRAME(_hx_pos_7e3bfe2dc256154a_55_create,"StageDebugState","create",0xdae5fe2e,"StageDebugState.create","StageDebugState.hx",55,0x4ccaf142)
HX_LOCAL_STACK_FRAME(_hx_pos_7e3bfe2dc256154a_113_update,"StageDebugState","update",0xe5dc1d3b,"StageDebugState.update","StageDebugState.hx",113,0x4ccaf142)
HX_LOCAL_STACK_FRAME(_hx_pos_7e3bfe2dc256154a_233_updateMousePos,"StageDebugState","updateMousePos",0x9634b0ca,"StageDebugState.updateMousePos","StageDebugState.hx",233,0x4ccaf142)
HX_LOCAL_STACK_FRAME(_hx_pos_7e3bfe2dc256154a_239_getNextObject,"StageDebugState","getNextObject",0xdbf81f56,"StageDebugState.getNextObject","StageDebugState.hx",239,0x4ccaf142)
HX_LOCAL_STACK_FRAME(_hx_pos_7e3bfe2dc256154a_255_getNextChar,"StageDebugState","getNextChar",0x0e3ddbad,"StageDebugState.getNextChar","StageDebugState.hx",255,0x4ccaf142)
HX_LOCAL_STACK_FRAME(_hx_pos_7e3bfe2dc256154a_276_saveBoyPos,"StageDebugState","saveBoyPos",0x7edc4a37,"StageDebugState.saveBoyPos","StageDebugState.hx",276,0x4ccaf142)
HX_LOCAL_STACK_FRAME(_hx_pos_7e3bfe2dc256154a_315_onSaveComplete,"StageDebugState","onSaveComplete",0x792bc607,"StageDebugState.onSaveComplete","StageDebugState.hx",315,0x4ccaf142)
HX_LOCAL_STACK_FRAME(_hx_pos_7e3bfe2dc256154a_327_onSaveCancel,"StageDebugState","onSaveCancel",0x44c42348,"StageDebugState.onSaveCancel","StageDebugState.hx",327,0x4ccaf142)
HX_LOCAL_STACK_FRAME(_hx_pos_7e3bfe2dc256154a_335_onSaveError,"StageDebugState","onSaveError",0x1ed7c9ba,"StageDebugState.onSaveError","StageDebugState.hx",335,0x4ccaf142)

void StageDebugState_obj::__construct(::String __o_daStage,::String __o_daGf,::String __o_daBf,::String __o_opponent){
            		::String daStage = __o_daStage;
            		if (::hx::IsNull(__o_daStage)) daStage = HX_("stage",be,6a,0b,84);
            		::String daGf = __o_daGf;
            		if (::hx::IsNull(__o_daGf)) daGf = HX_("gf",1f,5a,00,00);
            		::String daBf = __o_daBf;
            		if (::hx::IsNull(__o_daBf)) daBf = HX_("bf",c4,55,00,00);
            		::String opponent = __o_opponent;
            		if (::hx::IsNull(__o_opponent)) opponent = HX_("dad",47,36,4c,00);
            	HX_STACKFRAME(&_hx_pos_7e3bfe2dc256154a_17_new)
HXLINE(  42)		this->usedObjects = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  41)		this->charMode = true;
HXLINE(  36)		this->dragging = false;
HXLINE(  33)		this->curCharIndex = 0;
HXLINE(  46)		super::__construct(null());
HXLINE(  47)		this->daStage = daStage;
HXLINE(  48)		this->daGf = daGf;
HXLINE(  49)		this->daBf = daBf;
HXLINE(  50)		this->opponent = opponent;
HXLINE(  51)		this->curCharString = daGf;
            	}

Dynamic StageDebugState_obj::__CreateEmpty() { return new StageDebugState_obj; }

void *StageDebugState_obj::_hx_vtable = 0;

Dynamic StageDebugState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StageDebugState_obj > _hx_result = new StageDebugState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool StageDebugState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x10b6a990) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x10b6a990;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void StageDebugState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_7e3bfe2dc256154a_55_create)
HXLINE(  56)		{
HXLINE(  56)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  56)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(  57)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  59)		this->Stage = ::PlayState_obj::Stage;
HXLINE(  61)		this->gf = ::PlayState_obj::gf;
HXLINE(  62)		this->boyfriend = ::PlayState_obj::boyfriend;
HXLINE(  63)		this->dad = ::PlayState_obj::dad;
HXLINE(  64)		this->curChars = ::Array_obj< ::Dynamic>::__new(3)->init(0,this->gf)->init(1,this->boyfriend)->init(2,this->dad);
HXLINE(  65)		this->curChar = this->curChars->__get(this->curCharIndex).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  67)		{
HXLINE(  67)			int _g = 0;
HXDLIN(  67)			::cpp::VirtualArray _g1 = this->Stage->toAdd;
HXDLIN(  67)			while((_g < _g1->get_length())){
HXLINE(  67)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(  67)				_g = (_g + 1);
HXLINE(  69)				this->add(i);
            			}
            		}
HXLINE(  72)		{
HXLINE(  72)			int _g2_current = 0;
HXDLIN(  72)			::Array< ::Dynamic> _g2_array = this->Stage->layInFront;
HXDLIN(  72)			while((_g2_current < _g2_array->length)){
HXLINE(  72)				::Array< ::Dynamic> _g3_value = _g2_array->__get(_g2_current).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  72)				_g2_current = (_g2_current + 1);
HXDLIN(  72)				int _g3_key = (_g2_current - 1);
HXDLIN(  72)				int index = _g3_key;
HXDLIN(  72)				::Array< ::Dynamic> array = _g3_value;
HXLINE(  74)				switch((int)(index)){
            					case (int)0: {
HXLINE(  77)						this->add(this->gf);
HXLINE(  78)						{
HXLINE(  78)							int _g = 0;
HXDLIN(  78)							while((_g < array->length)){
HXLINE(  78)								 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  78)								_g = (_g + 1);
HXLINE(  79)								this->add(bg);
            							}
            						}
            					}
            					break;
            					case (int)1: {
HXLINE(  81)						this->add(this->dad);
HXLINE(  82)						{
HXLINE(  82)							int _g = 0;
HXDLIN(  82)							while((_g < array->length)){
HXLINE(  82)								 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  82)								_g = (_g + 1);
HXLINE(  83)								this->add(bg);
            							}
            						}
            					}
            					break;
            					case (int)2: {
HXLINE(  85)						this->add(this->boyfriend);
HXLINE(  86)						{
HXLINE(  86)							int _g = 0;
HXDLIN(  86)							while((_g < array->length)){
HXLINE(  86)								 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  86)								_g = (_g + 1);
HXLINE(  87)								this->add(bg);
            							}
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE(  91)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,2,2);
HXLINE(  92)		this->camFollow->screenCenter(null());
HXLINE(  93)		this->add(this->camFollow);
HXLINE(  95)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  96)		{
HXLINE(  96)			 ::flixel::FlxCamera _hx_tmp = this->camHUD;
HXDLIN(  96)			_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN(  96)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN(  96)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            		}
HXLINE(  97)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  98)		this->camGame->set_zoom(((Float)0.7));
HXLINE(  99)		::flixel::FlxG_obj::cameras->add(this->camGame,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 100)		::flixel::FlxG_obj::cameras->add(this->camHUD,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 101)		::flixel::FlxCamera_obj::_defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE( 102)		::flixel::FlxG_obj::camera = this->camGame;
HXLINE( 103)		this->camGame->follow(this->camFollow,null(),null());
HXLINE( 105)		this->posText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,null(),null(),null(),null());
HXLINE( 106)		this->posText->set_size(26);
HXLINE( 107)		this->posText->scrollFactor->set(null(),null());
HXLINE( 108)		this->posText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 109)		this->add(this->posText);
            	}


void StageDebugState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_7e3bfe2dc256154a_113_update)
HXLINE( 114)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 114)		if (_this->keyManager->checkStatus(69,_this->status)) {
HXLINE( 115)			 ::flixel::FlxCamera _g = this->camGame;
HXDLIN( 115)			_g->set_zoom((_g->zoom + ((Float)0.1)));
            		}
HXLINE( 116)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 116)		if (_this1->keyManager->checkStatus(81,_this1->status)) {
HXLINE( 118)			if ((this->camGame->zoom > ((Float)0.11))) {
HXLINE( 119)				 ::flixel::FlxCamera _g = this->camGame;
HXDLIN( 119)				_g->set_zoom((_g->zoom - ((Float)0.1)));
            			}
            		}
HXLINE( 123)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 123)		if (_this2->keyManager->checkStatus(16,_this2->status)) {
HXLINE( 125)			this->charMode = !(this->charMode);
HXLINE( 126)			this->dragging = false;
HXLINE( 127)			if (this->charMode) {
HXLINE( 128)				this->getNextChar();
            			}
            			else {
HXLINE( 130)				this->getNextObject();
            			}
            		}
HXLINE( 133)		bool _hx_tmp;
HXDLIN( 133)		bool _hx_tmp1;
HXDLIN( 133)		bool _hx_tmp2;
HXDLIN( 133)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 133)		if (!(_this3->keyManager->checkStatus(73,_this3->status))) {
HXLINE( 133)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 133)			_hx_tmp2 = _this->keyManager->checkStatus(74,_this->status);
            		}
            		else {
HXLINE( 133)			_hx_tmp2 = true;
            		}
HXDLIN( 133)		if (!(_hx_tmp2)) {
HXLINE( 133)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 133)			_hx_tmp1 = _this->keyManager->checkStatus(75,_this->status);
            		}
            		else {
HXLINE( 133)			_hx_tmp1 = true;
            		}
HXDLIN( 133)		if (!(_hx_tmp1)) {
HXLINE( 133)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 133)			_hx_tmp = _this->keyManager->checkStatus(76,_this->status);
            		}
            		else {
HXLINE( 133)			_hx_tmp = true;
            		}
HXDLIN( 133)		if (_hx_tmp) {
HXLINE( 135)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 135)			if (_this->keyManager->checkStatus(73,_this->status)) {
HXLINE( 136)				this->camFollow->velocity->set_y(( (Float)(-90) ));
            			}
            			else {
HXLINE( 137)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 137)				if (_this->keyManager->checkStatus(75,_this->status)) {
HXLINE( 138)					this->camFollow->velocity->set_y(( (Float)(90) ));
            				}
            				else {
HXLINE( 140)					this->camFollow->velocity->set_y(( (Float)(0) ));
            				}
            			}
HXLINE( 142)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 142)			if (_this1->keyManager->checkStatus(74,_this1->status)) {
HXLINE( 143)				this->camFollow->velocity->set_x(( (Float)(-90) ));
            			}
            			else {
HXLINE( 144)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 144)				if (_this->keyManager->checkStatus(76,_this->status)) {
HXLINE( 145)					this->camFollow->velocity->set_x(( (Float)(90) ));
            				}
            				else {
HXLINE( 147)					this->camFollow->velocity->set_x(( (Float)(0) ));
            				}
            			}
            		}
            		else {
HXLINE( 151)			this->camFollow->velocity->set(null(),null());
            		}
HXLINE( 154)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 154)		if (_this4->keyManager->checkStatus(32,_this4->status)) {
HXLINE( 156)			if (this->charMode) {
HXLINE( 158)				this->getNextChar();
            			}
            			else {
HXLINE( 162)				this->getNextObject();
            			}
            		}
HXLINE( 166)		bool _hx_tmp3;
HXDLIN( 166)		bool _hx_tmp4;
HXDLIN( 166)		 ::flixel::input::mouse::FlxMouseButton _this5 = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 166)		bool _hx_tmp5;
HXDLIN( 166)		if ((_this5->current != 1)) {
HXLINE( 166)			_hx_tmp5 = (_this5->current == 2);
            		}
            		else {
HXLINE( 166)			_hx_tmp5 = true;
            		}
HXDLIN( 166)		if (_hx_tmp5) {
HXLINE( 166)			_hx_tmp4 = ::flixel::util::FlxCollision_obj::pixelPerfectPointCheck(::Math_obj::floor(( (Float)(::flixel::FlxG_obj::mouse->x) )),::Math_obj::floor(( (Float)(::flixel::FlxG_obj::mouse->y) )),this->curChar,null());
            		}
            		else {
HXLINE( 166)			_hx_tmp4 = false;
            		}
HXDLIN( 166)		if (_hx_tmp4) {
HXLINE( 166)			_hx_tmp3 = !(this->dragging);
            		}
            		else {
HXLINE( 166)			_hx_tmp3 = false;
            		}
HXDLIN( 166)		if (_hx_tmp3) {
HXLINE( 168)			this->dragging = true;
HXLINE( 169)			this->updateMousePos();
            		}
HXLINE( 172)		bool _hx_tmp6;
HXDLIN( 172)		if (this->dragging) {
HXLINE( 172)			 ::flixel::input::mouse::FlxMouse _this = ::flixel::FlxG_obj::mouse;
HXDLIN( 172)			if ((_this->_prevX == _this->x)) {
HXLINE( 172)				_hx_tmp6 = (_this->_prevY != _this->y);
            			}
            			else {
HXLINE( 172)				_hx_tmp6 = true;
            			}
            		}
            		else {
HXLINE( 172)			_hx_tmp6 = false;
            		}
HXDLIN( 172)		if (_hx_tmp6) {
HXLINE( 175)			this->curChar->setPosition((-((this->oldMousePosX - ::flixel::FlxG_obj::mouse->x)) + this->curChar->x),(-((this->oldMousePosY - ::flixel::FlxG_obj::mouse->y)) + this->curChar->y));
HXLINE( 176)			this->updateMousePos();
            		}
HXLINE( 179)		bool _hx_tmp7;
HXDLIN( 179)		bool _hx_tmp8;
HXDLIN( 179)		if (this->dragging) {
HXLINE( 179)			_hx_tmp8 = (::flixel::FlxG_obj::mouse->_leftButton->current == -1);
            		}
            		else {
HXLINE( 179)			_hx_tmp8 = false;
            		}
HXDLIN( 179)		if (!(_hx_tmp8)) {
HXLINE( 179)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 179)			_hx_tmp7 = _this->keyManager->checkStatus(9,_this->status);
            		}
            		else {
HXLINE( 179)			_hx_tmp7 = true;
            		}
HXDLIN( 179)		if (_hx_tmp7) {
HXLINE( 180)			this->dragging = false;
            		}
HXLINE( 182)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 182)		if (_this6->keyManager->checkStatus(90,_this6->status)) {
HXLINE( 183)			 ::flixel::FlxSprite _g = this->curChar;
HXDLIN( 183)			_g->set_angle((_g->angle - ( (Float)(::Math_obj::ceil(elapsed)) )));
            		}
            		else {
HXLINE( 184)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 184)			if (_this->keyManager->checkStatus(88,_this->status)) {
HXLINE( 185)				 ::flixel::FlxSprite _g = this->curChar;
HXDLIN( 185)				_g->set_angle((_g->angle + ::Math_obj::ceil(elapsed)));
            			}
            			else {
HXLINE( 186)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 186)				if (_this->keyManager->checkStatus(82,_this->status)) {
HXLINE( 187)					this->curChar->set_angle(( (Float)(0) ));
            				}
            			}
            		}
HXLINE( 190)		this->posText->set_text(((((((this->curCharString + HX_(" X: ",de,cc,69,15)) + this->curChar->x) + HX_(" Y: ",1f,8f,6a,15)) + this->curChar->y) + HX_(" Rotation: ",a4,27,fd,f6)) + this->curChar->angle));
HXLINE( 192)		 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 192)		if (_this7->keyManager->checkStatus(27,_this7->status)) {
HXLINE( 194)			{
HXLINE( 194)				 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 194)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 194)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE( 195)			::PlayState_obj::stageTesting = true;
HXLINE( 196)			{
HXLINE( 196)				int _g = 0;
HXDLIN( 196)				::cpp::VirtualArray _g1 = this->Stage->toAdd;
HXDLIN( 196)				while((_g < _g1->get_length())){
HXLINE( 196)					 ::Dynamic i = _g1->__get(_g);
HXDLIN( 196)					_g = (_g + 1);
HXLINE( 198)					this->remove(i,null());
            				}
            			}
HXLINE( 201)			{
HXLINE( 201)				 ::Dynamic group = this->Stage->swagGroup->iterator();
HXDLIN( 201)				while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 201)					 ::flixel::group::FlxTypedGroup group1 = ( ( ::flixel::group::FlxTypedGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 203)					this->remove(group1,null());
            				}
            			}
HXLINE( 206)			{
HXLINE( 206)				int _g2_current = 0;
HXDLIN( 206)				::Array< ::Dynamic> _g2_array = this->Stage->layInFront;
HXDLIN( 206)				while((_g2_current < _g2_array->length)){
HXLINE( 206)					::Array< ::Dynamic> _g3_value = _g2_array->__get(_g2_current).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 206)					_g2_current = (_g2_current + 1);
HXDLIN( 206)					int _g3_key = (_g2_current - 1);
HXDLIN( 206)					int index = _g3_key;
HXDLIN( 206)					::Array< ::Dynamic> array = _g3_value;
HXLINE( 208)					switch((int)(index)){
            						case (int)0: {
HXLINE( 211)							this->remove(this->gf,null());
HXLINE( 212)							{
HXLINE( 212)								int _g = 0;
HXDLIN( 212)								while((_g < array->length)){
HXLINE( 212)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 212)									_g = (_g + 1);
HXLINE( 213)									this->remove(bg,null());
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 215)							this->remove(this->dad,null());
HXLINE( 216)							{
HXLINE( 216)								int _g = 0;
HXDLIN( 216)								while((_g < array->length)){
HXLINE( 216)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 216)									_g = (_g + 1);
HXLINE( 217)									this->remove(bg,null());
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 219)							this->remove(this->boyfriend,null());
HXLINE( 220)							{
HXLINE( 220)								int _g = 0;
HXDLIN( 220)								while((_g < array->length)){
HXLINE( 220)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 220)									_g = (_g + 1);
HXLINE( 221)									this->remove(bg,null());
            								}
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
HXLINE( 226)		bool _hx_tmp9;
HXDLIN( 226)		 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 226)		if (_this8->keyManager->checkStatus(17,_this8->status)) {
HXLINE( 226)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 226)			_hx_tmp9 = _this->keyManager->checkStatus(83,_this->status);
            		}
            		else {
HXLINE( 226)			_hx_tmp9 = false;
            		}
HXDLIN( 226)		if (_hx_tmp9) {
HXLINE( 227)			this->saveBoyPos();
            		}
HXLINE( 229)		this->super::update(elapsed);
            	}


void StageDebugState_obj::updateMousePos(){
            	HX_STACKFRAME(&_hx_pos_7e3bfe2dc256154a_233_updateMousePos)
HXLINE( 234)		this->oldMousePosX = ::flixel::FlxG_obj::mouse->x;
HXLINE( 235)		this->oldMousePosY = ::flixel::FlxG_obj::mouse->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageDebugState_obj,updateMousePos,(void))

void StageDebugState_obj::getNextObject(){
            	HX_GC_STACKFRAME(&_hx_pos_7e3bfe2dc256154a_239_getNextObject)
HXLINE( 240)		{
HXLINE( 240)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,this->Stage->swagBacks);
HXDLIN( 240)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 240)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 240)				::String key = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN( 240)				 ::Dynamic value =  ::Dynamic(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
HXLINE( 242)				if (!(this->usedObjects->contains(value))) {
HXLINE( 244)					this->usedObjects->push(value);
HXLINE( 245)					this->curCharString = key;
HXLINE( 246)					this->curChar = ( ( ::flixel::FlxSprite)(value) );
HXLINE( 247)					return;
            				}
            			}
            		}
HXLINE( 250)		this->usedObjects = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 251)		this->getNextObject();
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageDebugState_obj,getNextObject,(void))

void StageDebugState_obj::getNextChar(){
            	HX_STACKFRAME(&_hx_pos_7e3bfe2dc256154a_255_getNextChar)
HXLINE( 256)		++this->curCharIndex;
HXLINE( 257)		if ((this->curCharIndex >= this->curChars->length)) {
HXLINE( 259)			this->curChar = this->curChars->__get(0).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 260)			this->curCharIndex = 0;
            		}
            		else {
HXLINE( 263)			this->curChar = this->curChars->__get(this->curCharIndex).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE( 264)		switch((int)(this->curCharIndex)){
            			case (int)0: {
HXLINE( 267)				this->curCharString = this->daGf;
            			}
            			break;
            			case (int)1: {
HXLINE( 269)				this->curCharString = this->daBf;
            			}
            			break;
            			case (int)2: {
HXLINE( 271)				this->curCharString = this->opponent;
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageDebugState_obj,getNextChar,(void))

void StageDebugState_obj::saveBoyPos(){
            	HX_GC_STACKFRAME(&_hx_pos_7e3bfe2dc256154a_276_saveBoyPos)
HXLINE( 277)		::String result = HX_("",00,00,00,00);
HXLINE( 279)		{
HXLINE( 279)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,this->Stage->swagBacks);
HXDLIN( 279)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 279)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 279)				::String spriteName = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN( 279)				 ::Dynamic sprite =  ::Dynamic(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
HXLINE( 280)				{
HXLINE( 281)					::String text = (((spriteName + HX_(" X: ",de,cc,69,15)) + ::Std_obj::string( ::Dynamic(sprite->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)))) + HX_(" Y: ",1f,8f,6a,15));
HXDLIN( 281)					::String text1 = ((text + ::Std_obj::string( ::Dynamic(sprite->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)))) + HX_(" Rotation: ",a4,27,fd,f6));
HXDLIN( 281)					::String text2 = (text1 + ::Std_obj::string( ::Dynamic(sprite->__Field(HX_("angle",d3,43,e2,22),::hx::paccDynamic))));
HXLINE( 282)					result = (result + (text2 + HX_("\n",0a,00,00,00)));
            				}
            			}
            		}
HXLINE( 284)		int curCharIndex = 0;
HXLINE( 285)		::String _hx_char = HX_("",00,00,00,00);
HXLINE( 286)		{
HXLINE( 286)			int _g1 = 0;
HXDLIN( 286)			::Array< ::Dynamic> _g2 = this->curChars;
HXDLIN( 286)			while((_g1 < _g2->length)){
HXLINE( 286)				 ::flixel::FlxSprite sprite = _g2->__get(_g1).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 286)				_g1 = (_g1 + 1);
HXLINE( 288)				switch((int)(curCharIndex)){
            					case (int)0: {
HXLINE( 291)						_hx_char = this->daGf;
            					}
            					break;
            					case (int)1: {
HXLINE( 293)						_hx_char = this->daBf;
            					}
            					break;
            					case (int)2: {
HXLINE( 295)						_hx_char = this->opponent;
            					}
            					break;
            				}
HXLINE( 297)				result = (result + (((((((_hx_char + HX_(" X: ",de,cc,69,15)) + this->curChars->__get(curCharIndex).StaticCast<  ::flixel::FlxSprite >()->x) + HX_(" Y: ",1f,8f,6a,15)) + this->curChars->__get(curCharIndex).StaticCast<  ::flixel::FlxSprite >()->y) + HX_(" Rotation: ",a4,27,fd,f6)) + this->curChars->__get(curCharIndex).StaticCast<  ::flixel::FlxSprite >()->angle) + HX_("\n",0a,00,00,00)));
HXLINE( 298)				curCharIndex = (curCharIndex + 1);
            			}
            		}
HXLINE( 301)		bool _hx_tmp;
HXDLIN( 301)		if (::hx::IsNotNull( result )) {
HXLINE( 301)			_hx_tmp = (result.length > 0);
            		}
            		else {
HXLINE( 301)			_hx_tmp = false;
            		}
HXDLIN( 301)		if (_hx_tmp) {
HXLINE( 303)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE( 304)			this->_file->addEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE( 305)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE( 306)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE( 307)			 ::openfl::net::FileReference _hx_tmp = this->_file;
HXDLIN( 307)			::String _hx_tmp1 = ::StringTools_obj::trim(result);
HXDLIN( 307)			_hx_tmp->save(_hx_tmp1,(this->daStage + HX_("Positions.txt",8c,9f,96,74)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageDebugState_obj,saveBoyPos,(void))

void StageDebugState_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_7e3bfe2dc256154a_315_onSaveComplete)
HXLINE( 316)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE( 317)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE( 318)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE( 319)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageDebugState_obj,onSaveComplete,(void))

void StageDebugState_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_7e3bfe2dc256154a_327_onSaveCancel)
HXLINE( 328)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE( 329)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE( 330)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE( 331)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageDebugState_obj,onSaveCancel,(void))

void StageDebugState_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_7e3bfe2dc256154a_335_onSaveError)
HXLINE( 336)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE( 337)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE( 338)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE( 339)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageDebugState_obj,onSaveError,(void))


::hx::ObjectPtr< StageDebugState_obj > StageDebugState_obj::__new(::String __o_daStage,::String __o_daGf,::String __o_daBf,::String __o_opponent) {
	::hx::ObjectPtr< StageDebugState_obj > __this = new StageDebugState_obj();
	__this->__construct(__o_daStage,__o_daGf,__o_daBf,__o_opponent);
	return __this;
}

::hx::ObjectPtr< StageDebugState_obj > StageDebugState_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o_daStage,::String __o_daGf,::String __o_daBf,::String __o_opponent) {
	StageDebugState_obj *__this = (StageDebugState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StageDebugState_obj), true, "StageDebugState"));
	*(void **)__this = StageDebugState_obj::_hx_vtable;
	__this->__construct(__o_daStage,__o_daGf,__o_daBf,__o_opponent);
	return __this;
}

StageDebugState_obj::StageDebugState_obj()
{
}

void StageDebugState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StageDebugState);
	HX_MARK_MEMBER_NAME(daStage,"daStage");
	HX_MARK_MEMBER_NAME(daBf,"daBf");
	HX_MARK_MEMBER_NAME(daGf,"daGf");
	HX_MARK_MEMBER_NAME(opponent,"opponent");
	HX_MARK_MEMBER_NAME(_file,"_file");
	HX_MARK_MEMBER_NAME(gf,"gf");
	HX_MARK_MEMBER_NAME(boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(dad,"dad");
	HX_MARK_MEMBER_NAME(Stage,"Stage");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(posText,"posText");
	HX_MARK_MEMBER_NAME(curChar,"curChar");
	HX_MARK_MEMBER_NAME(curCharIndex,"curCharIndex");
	HX_MARK_MEMBER_NAME(curCharString,"curCharString");
	HX_MARK_MEMBER_NAME(curChars,"curChars");
	HX_MARK_MEMBER_NAME(dragging,"dragging");
	HX_MARK_MEMBER_NAME(oldMousePosX,"oldMousePosX");
	HX_MARK_MEMBER_NAME(oldMousePosY,"oldMousePosY");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(charMode,"charMode");
	HX_MARK_MEMBER_NAME(usedObjects,"usedObjects");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StageDebugState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(daStage,"daStage");
	HX_VISIT_MEMBER_NAME(daBf,"daBf");
	HX_VISIT_MEMBER_NAME(daGf,"daGf");
	HX_VISIT_MEMBER_NAME(opponent,"opponent");
	HX_VISIT_MEMBER_NAME(_file,"_file");
	HX_VISIT_MEMBER_NAME(gf,"gf");
	HX_VISIT_MEMBER_NAME(boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(dad,"dad");
	HX_VISIT_MEMBER_NAME(Stage,"Stage");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(posText,"posText");
	HX_VISIT_MEMBER_NAME(curChar,"curChar");
	HX_VISIT_MEMBER_NAME(curCharIndex,"curCharIndex");
	HX_VISIT_MEMBER_NAME(curCharString,"curCharString");
	HX_VISIT_MEMBER_NAME(curChars,"curChars");
	HX_VISIT_MEMBER_NAME(dragging,"dragging");
	HX_VISIT_MEMBER_NAME(oldMousePosX,"oldMousePosX");
	HX_VISIT_MEMBER_NAME(oldMousePosY,"oldMousePosY");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(charMode,"charMode");
	HX_VISIT_MEMBER_NAME(usedObjects,"usedObjects");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val StageDebugState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { return ::hx::Val( gf ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { return ::hx::Val( dad ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"daBf") ) { return ::hx::Val( daBf ); }
		if (HX_FIELD_EQ(inName,"daGf") ) { return ::hx::Val( daGf ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { return ::hx::Val( _file ); }
		if (HX_FIELD_EQ(inName,"Stage") ) { return ::hx::Val( Stage ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"daStage") ) { return ::hx::Val( daStage ); }
		if (HX_FIELD_EQ(inName,"posText") ) { return ::hx::Val( posText ); }
		if (HX_FIELD_EQ(inName,"curChar") ) { return ::hx::Val( curChar ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"opponent") ) { return ::hx::Val( opponent ); }
		if (HX_FIELD_EQ(inName,"curChars") ) { return ::hx::Val( curChars ); }
		if (HX_FIELD_EQ(inName,"dragging") ) { return ::hx::Val( dragging ); }
		if (HX_FIELD_EQ(inName,"charMode") ) { return ::hx::Val( charMode ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"boyfriend") ) { return ::hx::Val( boyfriend ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"saveBoyPos") ) { return ::hx::Val( saveBoyPos_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"usedObjects") ) { return ::hx::Val( usedObjects ); }
		if (HX_FIELD_EQ(inName,"getNextChar") ) { return ::hx::Val( getNextChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return ::hx::Val( onSaveError_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curCharIndex") ) { return ::hx::Val( curCharIndex ); }
		if (HX_FIELD_EQ(inName,"oldMousePosX") ) { return ::hx::Val( oldMousePosX ); }
		if (HX_FIELD_EQ(inName,"oldMousePosY") ) { return ::hx::Val( oldMousePosY ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return ::hx::Val( onSaveCancel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curCharString") ) { return ::hx::Val( curCharString ); }
		if (HX_FIELD_EQ(inName,"getNextObject") ) { return ::hx::Val( getNextObject_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateMousePos") ) { return ::hx::Val( updateMousePos_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return ::hx::Val( onSaveComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StageDebugState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { gf=inValue.Cast<  ::Character >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { dad=inValue.Cast<  ::Character >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"daBf") ) { daBf=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"daGf") ) { daGf=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { _file=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Stage") ) { Stage=inValue.Cast<  ::Stage >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"daStage") ) { daStage=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"posText") ) { posText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curChar") ) { curChar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"opponent") ) { opponent=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curChars") ) { curChars=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragging") ) { dragging=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"charMode") ) { charMode=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=inValue.Cast<  ::Boyfriend >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"usedObjects") ) { usedObjects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curCharIndex") ) { curCharIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oldMousePosX") ) { oldMousePosX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oldMousePosY") ) { oldMousePosY=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curCharString") ) { curCharString=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StageDebugState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("daStage",01,3e,39,1e));
	outFields->push(HX_("daBf",a1,2a,63,42));
	outFields->push(HX_("daGf",fc,2e,63,42));
	outFields->push(HX_("opponent",9d,b9,b8,f8));
	outFields->push(HX_("_file",5b,ea,cc,f6));
	outFields->push(HX_("gf",1f,5a,00,00));
	outFields->push(HX_("boyfriend",6a,29,b8,e6));
	outFields->push(HX_("dad",47,36,4c,00));
	outFields->push(HX_("Stage",9e,da,38,17));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("posText",61,b0,e8,01));
	outFields->push(HX_("curChar",76,d0,d4,ac));
	outFields->push(HX_("curCharIndex",bc,ce,17,0d));
	outFields->push(HX_("curCharString",e7,29,fa,e4));
	outFields->push(HX_("curChars",3d,97,61,8d));
	outFields->push(HX_("dragging",cf,3c,8c,37));
	outFields->push(HX_("oldMousePosX",62,b7,70,95));
	outFields->push(HX_("oldMousePosY",63,b7,70,95));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("charMode",59,81,c0,a2));
	outFields->push(HX_("usedObjects",17,70,ae,27));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StageDebugState_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(StageDebugState_obj,daStage),HX_("daStage",01,3e,39,1e)},
	{::hx::fsString,(int)offsetof(StageDebugState_obj,daBf),HX_("daBf",a1,2a,63,42)},
	{::hx::fsString,(int)offsetof(StageDebugState_obj,daGf),HX_("daGf",fc,2e,63,42)},
	{::hx::fsString,(int)offsetof(StageDebugState_obj,opponent),HX_("opponent",9d,b9,b8,f8)},
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(StageDebugState_obj,_file),HX_("_file",5b,ea,cc,f6)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(StageDebugState_obj,gf),HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::Boyfriend */ ,(int)offsetof(StageDebugState_obj,boyfriend),HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(StageDebugState_obj,dad),HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Stage */ ,(int)offsetof(StageDebugState_obj,Stage),HX_("Stage",9e,da,38,17)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(StageDebugState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StageDebugState_obj,posText),HX_("posText",61,b0,e8,01)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StageDebugState_obj,curChar),HX_("curChar",76,d0,d4,ac)},
	{::hx::fsInt,(int)offsetof(StageDebugState_obj,curCharIndex),HX_("curCharIndex",bc,ce,17,0d)},
	{::hx::fsString,(int)offsetof(StageDebugState_obj,curCharString),HX_("curCharString",e7,29,fa,e4)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(StageDebugState_obj,curChars),HX_("curChars",3d,97,61,8d)},
	{::hx::fsBool,(int)offsetof(StageDebugState_obj,dragging),HX_("dragging",cf,3c,8c,37)},
	{::hx::fsInt,(int)offsetof(StageDebugState_obj,oldMousePosX),HX_("oldMousePosX",62,b7,70,95)},
	{::hx::fsInt,(int)offsetof(StageDebugState_obj,oldMousePosY),HX_("oldMousePosY",63,b7,70,95)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(StageDebugState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(StageDebugState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsBool,(int)offsetof(StageDebugState_obj,charMode),HX_("charMode",59,81,c0,a2)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(StageDebugState_obj,usedObjects),HX_("usedObjects",17,70,ae,27)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StageDebugState_obj_sStaticStorageInfo = 0;
#endif

static ::String StageDebugState_obj_sMemberFields[] = {
	HX_("daStage",01,3e,39,1e),
	HX_("daBf",a1,2a,63,42),
	HX_("daGf",fc,2e,63,42),
	HX_("opponent",9d,b9,b8,f8),
	HX_("_file",5b,ea,cc,f6),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("dad",47,36,4c,00),
	HX_("Stage",9e,da,38,17),
	HX_("camFollow",e0,6e,47,22),
	HX_("posText",61,b0,e8,01),
	HX_("curChar",76,d0,d4,ac),
	HX_("curCharIndex",bc,ce,17,0d),
	HX_("curCharString",e7,29,fa,e4),
	HX_("curChars",3d,97,61,8d),
	HX_("dragging",cf,3c,8c,37),
	HX_("oldMousePosX",62,b7,70,95),
	HX_("oldMousePosY",63,b7,70,95),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camGame",a1,47,50,cf),
	HX_("charMode",59,81,c0,a2),
	HX_("usedObjects",17,70,ae,27),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("updateMousePos",98,97,48,d9),
	HX_("getNextObject",48,8c,e3,26),
	HX_("getNextChar",1f,c8,7f,13),
	HX_("saveBoyPos",05,32,65,b1),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	::String(null()) };

::hx::Class StageDebugState_obj::__mClass;

void StageDebugState_obj::__register()
{
	StageDebugState_obj _hx_dummy;
	StageDebugState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("StageDebugState",fc,d6,73,b7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StageDebugState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StageDebugState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StageDebugState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StageDebugState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

