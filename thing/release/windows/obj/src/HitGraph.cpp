// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Ana
#include <Ana.h>
#endif
#ifndef INCLUDED_Analysis
#include <Analysis.h>
#endif
#ifndef INCLUDED_HitGraph
#include <HitGraph.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Replay
#include <Replay.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dfe8d92fa5dee8a4_19_new,"HitGraph","new",0xfe3c728d,"HitGraph.new","HitGraph.hx",19,0x9e69dd83)
HX_LOCAL_STACK_FRAME(_hx_pos_dfe8d92fa5dee8a4_85_drawAxes,"HitGraph","drawAxes",0xbc7e1dfc,"HitGraph.drawAxes","HitGraph.hx",85,0x9e69dd83)
HX_LOCAL_STACK_FRAME(_hx_pos_dfe8d92fa5dee8a4_127_drawJudgementLine,"HitGraph","drawJudgementLine",0x9ac87792,"HitGraph.drawJudgementLine","HitGraph.hx",127,0x9e69dd83)
HX_LOCAL_STACK_FRAME(_hx_pos_dfe8d92fa5dee8a4_156_drawGraph,"HitGraph","drawGraph",0xa2494697,"HitGraph.drawGraph","HitGraph.hx",156,0x9e69dd83)
HX_LOCAL_STACK_FRAME(_hx_pos_dfe8d92fa5dee8a4_255_fitX,"HitGraph","fitX",0x71611a9a,"HitGraph.fitX","HitGraph.hx",255,0x9e69dd83)
HX_LOCAL_STACK_FRAME(_hx_pos_dfe8d92fa5dee8a4_260_addToHistory,"HitGraph","addToHistory",0x8539beeb,"HitGraph.addToHistory","HitGraph.hx",260,0x9e69dd83)
HX_LOCAL_STACK_FRAME(_hx_pos_dfe8d92fa5dee8a4_265_update,"HitGraph","update",0x5c6cbdfc,"HitGraph.update","HitGraph.hx",265,0x9e69dd83)
HX_LOCAL_STACK_FRAME(_hx_pos_dfe8d92fa5dee8a4_105_createTextField,"HitGraph","createTextField",0x869f8fde,"HitGraph.createTextField","HitGraph.hx",105,0x9e69dd83)
HX_LOCAL_STACK_FRAME(_hx_pos_dfe8d92fa5dee8a4_109_initTextField,"HitGraph","initTextField",0xeb60e40a,"HitGraph.initTextField","HitGraph.hx",109,0x9e69dd83)

void HitGraph_obj::__construct(int X,int Y,int Width,int Height){
            	HX_GC_STACKFRAME(&_hx_pos_dfe8d92fa5dee8a4_19_new)
HXLINE(  37)		this->history = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  33)		this->showInput = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("inputShow",27,92,7d,13),::hx::paccDynamic)) );
HXLINE(  31)		this->maxValue = ( (Float)((::Math_obj::floor(((( (Float)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) ) / ( (Float)(60) )) * ( (Float)(1000) ))) + 95)) );
HXLINE(  30)		this->minValue = ( (Float)(-((::Math_obj::floor(((( (Float)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) ) / ( (Float)(60) )) * ( (Float)(1000) ))) + 95))) );
HXLINE(  52)		super::__construct();
HXLINE(  53)		this->set_x(( (Float)(X) ));
HXLINE(  54)		this->set_y(( (Float)(Y) ));
HXLINE(  55)		this->_width = Width;
HXLINE(  56)		this->_height = Height;
HXLINE(  58)		 ::openfl::display::BitmapData bm =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,Width,Height,null(),null());
HXLINE(  59)		bm->draw(::hx::ObjectPtr<OBJ_>(this),null(),null(),null(),null(),null());
HXLINE(  60)		this->bitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,bm,null(),null());
HXLINE(  62)		this->_axis =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  63)		this->_axis->set_x(( (Float)((this->_labelWidth + 10)) ));
HXLINE(  65)		this->ts = (( (Float)(::Math_obj::floor(((( (Float)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) ) / ( (Float)(60) )) * ( (Float)(1000) )))) ) / ( (Float)(166) ));
HXLINE(  67)		 ::openfl::text::TextField early = ::HitGraph_obj::createTextField(10,10,-1,12);
HXLINE(  68)		 ::openfl::text::TextField late = ::HitGraph_obj::createTextField(10,(this->_height - 20),-1,12);
HXLINE(  70)		early->set_text(((HX_("Early (",4b,1b,54,e9) + (( (Float)(-166) ) * this->ts)) + HX_("ms)",03,1a,53,00)));
HXLINE(  71)		late->set_text(((HX_("Late (",ce,30,f7,89) + (( (Float)(166) ) * this->ts)) + HX_("ms)",03,1a,53,00)));
HXLINE(  73)		this->addChild(early);
HXLINE(  74)		this->addChild(late);
HXLINE(  76)		this->addChild(this->_axis);
HXLINE(  78)		this->drawAxes();
            	}

Dynamic HitGraph_obj::__CreateEmpty() { return new HitGraph_obj; }

void *HitGraph_obj::_hx_vtable = 0;

Dynamic HitGraph_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HitGraph_obj > _hx_result = new HitGraph_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool HitGraph_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0e8c1adb) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x0e8c1adb;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void HitGraph_obj::drawAxes(){
            	HX_STACKFRAME(&_hx_pos_dfe8d92fa5dee8a4_85_drawAxes)
HXLINE(  86)		 ::openfl::display::Graphics gfx = this->_axis->get_graphics();
HXLINE(  87)		gfx->clear();
HXLINE(  88)		gfx->lineStyle(1,16777215,((Float)0.5),null(),null(),null(),null(),null());
HXLINE(  91)		gfx->moveTo(( (Float)(0) ),( (Float)(0) ));
HXLINE(  92)		gfx->lineTo(( (Float)(0) ),( (Float)(this->_height) ));
HXLINE(  95)		gfx->moveTo(( (Float)(0) ),( (Float)(this->_height) ));
HXLINE(  96)		gfx->lineTo(( (Float)(this->_width) ),( (Float)(this->_height) ));
HXLINE(  98)		gfx->moveTo(( (Float)(0) ),(( (Float)(this->_height) ) / ( (Float)(2) )));
HXLINE(  99)		gfx->lineTo(( (Float)(this->_width) ),(( (Float)(this->_height) ) / ( (Float)(2) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(HitGraph_obj,drawAxes,(void))

void HitGraph_obj::drawJudgementLine(Float ms){
            	HX_STACKFRAME(&_hx_pos_dfe8d92fa5dee8a4_127_drawJudgementLine)
HXLINE( 129)		 ::openfl::display::Graphics gfx = this->get_graphics();
HXLINE( 131)		gfx->lineStyle(1,this->graphColor,((Float)0.3),null(),null(),null(),null(),null());
HXLINE( 133)		Float ts = (( (Float)(::Math_obj::floor(((( (Float)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) ) / ( (Float)(60) )) * ( (Float)(1000) )))) ) / ( (Float)(166) ));
HXLINE( 134)		Float range = ::Math_obj::max((this->maxValue - this->minValue),(this->maxValue * ((Float)0.1)));
HXLINE( 136)		Float value = (((ms * ts) - this->minValue) / range);
HXLINE( 138)		Float pointY = this->_axis->get_y();
HXDLIN( 138)		Float pointY1 = (pointY + (((-(value) * ( (Float)(this->_height) )) - ( (Float)(1) )) + this->_height));
HXLINE( 140)		Float graphX = (this->_axis->get_x() + 1);
HXLINE( 142)		if ((ms == 45)) {
HXLINE( 143)			gfx->moveTo(graphX,(this->_axis->get_y() + pointY1));
            		}
HXLINE( 145)		Float graphX1 = (this->_axis->get_x() + 1);
HXLINE( 147)		gfx->drawRect(graphX1,pointY1,( (Float)(this->_width) ),( (Float)(1) ));
HXLINE( 149)		gfx->lineStyle(1,this->graphColor,1,null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(HitGraph_obj,drawJudgementLine,(void))

void HitGraph_obj::drawGraph(){
            	HX_GC_STACKFRAME(&_hx_pos_dfe8d92fa5dee8a4_156_drawGraph)
HXLINE( 157)		 ::openfl::display::Graphics gfx = this->get_graphics();
HXLINE( 158)		gfx->clear();
HXLINE( 159)		gfx->lineStyle(1,this->graphColor,1,null(),null(),null(),null(),null());
HXLINE( 161)		gfx->beginFill(65280,null());
HXLINE( 162)		this->drawJudgementLine(( (Float)(45) ));
HXLINE( 163)		gfx->endFill();
HXLINE( 165)		gfx->beginFill(16711680,null());
HXLINE( 166)		this->drawJudgementLine(( (Float)(90) ));
HXLINE( 167)		gfx->endFill();
HXLINE( 169)		gfx->beginFill(9109504,null());
HXLINE( 170)		this->drawJudgementLine(( (Float)(135) ));
HXLINE( 171)		gfx->endFill();
HXLINE( 173)		gfx->beginFill(5767168,null());
HXLINE( 174)		this->drawJudgementLine(( (Float)(166) ));
HXLINE( 175)		gfx->endFill();
HXLINE( 177)		gfx->beginFill(65280,null());
HXLINE( 178)		this->drawJudgementLine(( (Float)(-45) ));
HXLINE( 179)		gfx->endFill();
HXLINE( 181)		gfx->beginFill(16711680,null());
HXLINE( 182)		this->drawJudgementLine(( (Float)(-90) ));
HXLINE( 183)		gfx->endFill();
HXLINE( 185)		gfx->beginFill(9109504,null());
HXLINE( 186)		this->drawJudgementLine(( (Float)(-135) ));
HXLINE( 187)		gfx->endFill();
HXLINE( 189)		gfx->beginFill(5767168,null());
HXLINE( 190)		this->drawJudgementLine(( (Float)(-166) ));
HXLINE( 191)		gfx->endFill();
HXLINE( 193)		Float range = ::Math_obj::max((this->maxValue - this->minValue),(this->maxValue * ((Float)0.1)));
HXLINE( 194)		Float graphX = (this->_axis->get_x() + 1);
HXLINE( 196)		if (this->showInput) {
HXLINE( 198)			int _g = 0;
HXDLIN( 198)			int _g1 = ( ( ::Analysis)(::PlayState_obj::rep->replay->__Field(HX_("ana",d4,fa,49,00),::hx::paccDynamic)) )->anaArray->length;
HXDLIN( 198)			while((_g < _g1)){
HXLINE( 198)				_g = (_g + 1);
HXDLIN( 198)				int i = (_g - 1);
HXLINE( 200)				 ::Ana ana = ( ( ::Analysis)(::PlayState_obj::rep->replay->__Field(HX_("ana",d4,fa,49,00),::hx::paccDynamic)) )->anaArray->__get(i).StaticCast<  ::Ana >();
HXLINE( 202)				Float value = ((( (Float)((ana->key * 25)) ) - this->minValue) / range);
HXLINE( 204)				if (ana->hit) {
HXLINE( 205)					gfx->beginFill(16776960,null());
            				}
            				else {
HXLINE( 207)					gfx->beginFill(12759680,null());
            				}
HXLINE( 209)				if ((ana->hitTime < 0)) {
HXLINE( 210)					continue;
            				}
HXLINE( 212)				Float pointY = (((-(value) * ( (Float)(this->_height) )) - ( (Float)(1) )) + this->_height);
HXLINE( 213)				gfx->drawRect((graphX + this->fitX(ana->hitTime)),pointY,( (Float)(2) ),( (Float)(2) ));
HXLINE( 214)				gfx->endFill();
            			}
            		}
HXLINE( 218)		{
HXLINE( 218)			int _g = 0;
HXDLIN( 218)			int _g1 = this->history->get_length();
HXDLIN( 218)			while((_g < _g1)){
HXLINE( 218)				_g = (_g + 1);
HXDLIN( 218)				int i = (_g - 1);
HXLINE( 220)				Float value = ((( (Float)(this->history->__get(i)->__GetItem(0)) ) - this->minValue) / range);
HXLINE( 221)				::String judge = ( (::String)(this->history->__get(i)->__GetItem(1)) );
HXLINE( 223)				::String _hx_switch_0 = judge;
            				if (  (_hx_switch_0==HX_("bad",c5,b1,4a,00)) ){
HXLINE( 230)					gfx->beginFill(16711680,null());
HXDLIN( 230)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("good",3d,95,69,44)) ){
HXLINE( 228)					gfx->beginFill(65280,null());
HXDLIN( 228)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("miss",fc,52,5c,48)) ){
HXLINE( 234)					gfx->beginFill(5767168,null());
HXDLIN( 234)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("shit",c0,cf,52,4c)) ){
HXLINE( 232)					gfx->beginFill(9109504,null());
HXDLIN( 232)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("sick",be,8c,53,4c)) ){
HXLINE( 226)					gfx->beginFill(65535,null());
HXDLIN( 226)					goto _hx_goto_5;
            				}
            				/* default */{
HXLINE( 236)					gfx->beginFill(16777215,null());
            				}
            				_hx_goto_5:;
HXLINE( 238)				Float pointY = (((-(value) * ( (Float)(this->_height) )) - ( (Float)(1) )) + this->_height);
HXLINE( 242)				gfx->drawRect(this->fitX(( (Float)(this->history->__get(i)->__GetItem(2)) )),pointY,( (Float)(4) ),( (Float)(4) ));
HXLINE( 244)				gfx->endFill();
            			}
            		}
HXLINE( 248)		 ::openfl::display::BitmapData bm =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->_width,this->_height,null(),null());
HXLINE( 249)		bm->draw(::hx::ObjectPtr<OBJ_>(this),null(),null(),null(),null(),null());
HXLINE( 250)		this->bitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,bm,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(HitGraph_obj,drawGraph,(void))

Float HitGraph_obj::fitX(Float x){
            	HX_STACKFRAME(&_hx_pos_dfe8d92fa5dee8a4_255_fitX)
HXDLIN( 255)		Float _hx_tmp = (x / ::flixel::FlxG_obj::sound->music->_length);
HXDLIN( 255)		return (_hx_tmp * this->get_width());
            	}


HX_DEFINE_DYNAMIC_FUNC1(HitGraph_obj,fitX,return )

void HitGraph_obj::addToHistory(Float diff,::String judge,Float time){
            	HX_STACKFRAME(&_hx_pos_dfe8d92fa5dee8a4_260_addToHistory)
HXDLIN( 260)		this->history->push(::cpp::VirtualArray_obj::__new(3)->init(0,diff)->init(1,judge)->init(2,time));
            	}


HX_DEFINE_DYNAMIC_FUNC3(HitGraph_obj,addToHistory,(void))

void HitGraph_obj::update(){
            	HX_STACKFRAME(&_hx_pos_dfe8d92fa5dee8a4_265_update)
HXDLIN( 265)		this->drawGraph();
            	}


HX_DEFINE_DYNAMIC_FUNC0(HitGraph_obj,update,(void))

 ::openfl::text::TextField HitGraph_obj::createTextField(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< int >  __o_Color,::hx::Null< int >  __o_Size){
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            		int Color = __o_Color.Default(-1);
            		int Size = __o_Size.Default(12);
            	HX_GC_STACKFRAME(&_hx_pos_dfe8d92fa5dee8a4_105_createTextField)
HXDLIN( 105)		return ( ( ::openfl::text::TextField)(::HitGraph_obj::initTextField( ::openfl::text::TextField_obj::__alloc( HX_CTX ),X,Y,Color,Size)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(HitGraph_obj,createTextField,return )

 ::Dynamic HitGraph_obj::initTextField( ::Dynamic tf,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< int >  __o_Color,::hx::Null< int >  __o_Size){
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            		int Color = __o_Color.Default(-1);
            		int Size = __o_Size.Default(12);
            	HX_GC_STACKFRAME(&_hx_pos_dfe8d92fa5dee8a4_109_initTextField)
HXLINE( 110)		( ( ::openfl::text::TextField)(tf) )->set_x(X);
HXLINE( 111)		( ( ::openfl::text::TextField)(tf) )->set_y(Y);
HXLINE( 112)		( ( ::openfl::text::TextField)(tf) )->set_multiline(false);
HXLINE( 113)		( ( ::openfl::text::TextField)(tf) )->set_wordWrap(false);
HXLINE( 114)		( ( ::openfl::text::TextField)(tf) )->set_embedFonts(true);
HXLINE( 115)		( ( ::openfl::text::TextField)(tf) )->set_selectable(false);
HXLINE( 120)		( ( ::openfl::text::TextField)(tf) )->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("assets/fonts/vcr.ttf",46,38,26,7e),Size,(Color & 16777215),null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE( 121)		( ( ::openfl::display::DisplayObject)(tf) )->set_alpha((( (Float)(((Color >> 24) & 255)) ) / ( (Float)(255) )));
HXLINE( 122)		( ( ::openfl::text::TextField)(tf) )->set_autoSize(1);
HXLINE( 123)		return tf;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(HitGraph_obj,initTextField,return )


::hx::ObjectPtr< HitGraph_obj > HitGraph_obj::__new(int X,int Y,int Width,int Height) {
	::hx::ObjectPtr< HitGraph_obj > __this = new HitGraph_obj();
	__this->__construct(X,Y,Width,Height);
	return __this;
}

::hx::ObjectPtr< HitGraph_obj > HitGraph_obj::__alloc(::hx::Ctx *_hx_ctx,int X,int Y,int Width,int Height) {
	HitGraph_obj *__this = (HitGraph_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HitGraph_obj), true, "HitGraph"));
	*(void **)__this = HitGraph_obj::_hx_vtable;
	__this->__construct(X,Y,Width,Height);
	return __this;
}

HitGraph_obj::HitGraph_obj()
{
}

void HitGraph_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HitGraph);
	HX_MARK_MEMBER_NAME(minValue,"minValue");
	HX_MARK_MEMBER_NAME(maxValue,"maxValue");
	HX_MARK_MEMBER_NAME(showInput,"showInput");
	HX_MARK_MEMBER_NAME(graphColor,"graphColor");
	HX_MARK_MEMBER_NAME(history,"history");
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(ts,"ts");
	HX_MARK_MEMBER_NAME(_axis,"_axis");
	HX_MARK_MEMBER_NAME(_width,"_width");
	HX_MARK_MEMBER_NAME(_height,"_height");
	HX_MARK_MEMBER_NAME(_labelWidth,"_labelWidth");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void HitGraph_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(minValue,"minValue");
	HX_VISIT_MEMBER_NAME(maxValue,"maxValue");
	HX_VISIT_MEMBER_NAME(showInput,"showInput");
	HX_VISIT_MEMBER_NAME(graphColor,"graphColor");
	HX_VISIT_MEMBER_NAME(history,"history");
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(ts,"ts");
	HX_VISIT_MEMBER_NAME(_axis,"_axis");
	HX_VISIT_MEMBER_NAME(_width,"_width");
	HX_VISIT_MEMBER_NAME(_height,"_height");
	HX_VISIT_MEMBER_NAME(_labelWidth,"_labelWidth");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val HitGraph_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ts") ) { return ::hx::Val( ts ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"fitX") ) { return ::hx::Val( fitX_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_axis") ) { return ::hx::Val( _axis ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { return ::hx::Val( bitmap ); }
		if (HX_FIELD_EQ(inName,"_width") ) { return ::hx::Val( _width ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"history") ) { return ::hx::Val( history ); }
		if (HX_FIELD_EQ(inName,"_height") ) { return ::hx::Val( _height ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"minValue") ) { return ::hx::Val( minValue ); }
		if (HX_FIELD_EQ(inName,"maxValue") ) { return ::hx::Val( maxValue ); }
		if (HX_FIELD_EQ(inName,"drawAxes") ) { return ::hx::Val( drawAxes_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"showInput") ) { return ::hx::Val( showInput ); }
		if (HX_FIELD_EQ(inName,"drawGraph") ) { return ::hx::Val( drawGraph_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"graphColor") ) { return ::hx::Val( graphColor ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_labelWidth") ) { return ::hx::Val( _labelWidth ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addToHistory") ) { return ::hx::Val( addToHistory_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"drawJudgementLine") ) { return ::hx::Val( drawJudgementLine_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool HitGraph_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"initTextField") ) { outValue = initTextField_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"createTextField") ) { outValue = createTextField_dyn(); return true; }
	}
	return false;
}

::hx::Val HitGraph_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ts") ) { ts=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_axis") ) { _axis=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_width") ) { _width=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"history") ) { history=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_height") ) { _height=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"minValue") ) { minValue=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxValue") ) { maxValue=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"showInput") ) { showInput=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"graphColor") ) { graphColor=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_labelWidth") ) { _labelWidth=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HitGraph_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("minValue",7f,ec,ef,28));
	outFields->push(HX_("maxValue",2d,d2,d5,db));
	outFields->push(HX_("showInput",cd,29,82,ec));
	outFields->push(HX_("graphColor",35,97,9f,9d));
	outFields->push(HX_("history",54,35,47,64));
	outFields->push(HX_("bitmap",ef,0f,0c,f1));
	outFields->push(HX_("ts",7f,65,00,00));
	outFields->push(HX_("_axis",80,38,8a,f3));
	outFields->push(HX_("_width",47,fd,49,c6));
	outFields->push(HX_("_height",86,19,c3,70));
	outFields->push(HX_("_labelWidth",91,d0,cf,b8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo HitGraph_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(HitGraph_obj,minValue),HX_("minValue",7f,ec,ef,28)},
	{::hx::fsFloat,(int)offsetof(HitGraph_obj,maxValue),HX_("maxValue",2d,d2,d5,db)},
	{::hx::fsBool,(int)offsetof(HitGraph_obj,showInput),HX_("showInput",cd,29,82,ec)},
	{::hx::fsInt,(int)offsetof(HitGraph_obj,graphColor),HX_("graphColor",35,97,9f,9d)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(HitGraph_obj,history),HX_("history",54,35,47,64)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(HitGraph_obj,bitmap),HX_("bitmap",ef,0f,0c,f1)},
	{::hx::fsFloat,(int)offsetof(HitGraph_obj,ts),HX_("ts",7f,65,00,00)},
	{::hx::fsObject /*  ::openfl::display::Shape */ ,(int)offsetof(HitGraph_obj,_axis),HX_("_axis",80,38,8a,f3)},
	{::hx::fsInt,(int)offsetof(HitGraph_obj,_width),HX_("_width",47,fd,49,c6)},
	{::hx::fsInt,(int)offsetof(HitGraph_obj,_height),HX_("_height",86,19,c3,70)},
	{::hx::fsInt,(int)offsetof(HitGraph_obj,_labelWidth),HX_("_labelWidth",91,d0,cf,b8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *HitGraph_obj_sStaticStorageInfo = 0;
#endif

static ::String HitGraph_obj_sMemberFields[] = {
	HX_("minValue",7f,ec,ef,28),
	HX_("maxValue",2d,d2,d5,db),
	HX_("showInput",cd,29,82,ec),
	HX_("graphColor",35,97,9f,9d),
	HX_("history",54,35,47,64),
	HX_("bitmap",ef,0f,0c,f1),
	HX_("ts",7f,65,00,00),
	HX_("_axis",80,38,8a,f3),
	HX_("_width",47,fd,49,c6),
	HX_("_height",86,19,c3,70),
	HX_("_labelWidth",91,d0,cf,b8),
	HX_("drawAxes",49,c3,e2,54),
	HX_("drawJudgementLine",a5,40,8d,ab),
	HX_("drawGraph",aa,44,f5,61),
	HX_("fitX",67,d5,bb,43),
	HX_("addToHistory",b8,8e,2f,93),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class HitGraph_obj::__mClass;

static ::String HitGraph_obj_sStaticFields[] = {
	HX_("createTextField",31,de,75,3a),
	HX_("initTextField",9d,e7,80,14),
	::String(null())
};

void HitGraph_obj::__register()
{
	HitGraph_obj _hx_dummy;
	HitGraph_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("HitGraph",1b,28,fb,b2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &HitGraph_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(HitGraph_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(HitGraph_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< HitGraph_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HitGraph_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HitGraph_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

