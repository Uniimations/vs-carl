// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_NoteSplash
#include <NoteSplash.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fc43ca8ee61f3046_20_new,"NoteSplash","new",0xb1e3348b,"NoteSplash.new","NoteSplash.hx",20,0x3ec9e545)
HX_LOCAL_STACK_FRAME(_hx_pos_fc43ca8ee61f3046_45_setupNoteSplash,"NoteSplash","setupNoteSplash",0x4d379881,"NoteSplash.setupNoteSplash","NoteSplash.hx",45,0x3ec9e545)
HX_LOCAL_STACK_FRAME(_hx_pos_fc43ca8ee61f3046_38_setupNoteSplash,"NoteSplash","setupNoteSplash",0x4d379881,"NoteSplash.setupNoteSplash","NoteSplash.hx",38,0x3ec9e545)
HX_LOCAL_STACK_FRAME(_hx_pos_fc43ca8ee61f3046_57_update,"NoteSplash","update",0x2e98cebe,"NoteSplash.update","NoteSplash.hx",57,0x3ec9e545)

void NoteSplash_obj::__construct( ::Dynamic __o_fromNote,Float x,Float y){
            		 ::Dynamic fromNote = __o_fromNote;
            		if (::hx::IsNull(__o_fromNote)) fromNote = 0;
            	HX_STACKFRAME(&_hx_pos_fc43ca8ee61f3046_20_new)
HXLINE(  21)		super::__construct(x,y,null());
HXLINE(  23)		bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN(  23)		::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("noteSplashes",a7,57,29,8d)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d));
HXDLIN(  23)		this->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("noteSplashes",a7,57,29,8d)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("shared",a5,5e,2b,1d))));
HXLINE(  25)		this->animation->addByPrefix(HX_("note0-0",e1,7e,38,4d),HX_("note impact 1 purple",b7,c8,f9,6e),24,false,null(),null());
HXLINE(  26)		this->animation->addByPrefix(HX_("note0-1",e2,7e,38,4d),HX_("note impact 2 purple",d6,3a,2c,a8),24,false,null(),null());
HXLINE(  27)		this->animation->addByPrefix(HX_("note1-0",22,41,39,4d),HX_("note impact 1  blue",9f,28,67,5c),24,false,null(),null());
HXLINE(  28)		this->animation->addByPrefix(HX_("note1-1",23,41,39,4d),HX_("note impact 2 blue",b4,4c,11,42),24,false,null(),null());
HXLINE(  29)		this->animation->addByPrefix(HX_("note2-0",63,03,3a,4d),HX_("note impact 1 green",a8,64,68,48),24,false,null(),null());
HXLINE(  30)		this->animation->addByPrefix(HX_("note2-1",64,03,3a,4d),HX_("note impact 2 green",69,db,fd,71),24,false,null(),null());
HXLINE(  31)		this->animation->addByPrefix(HX_("note3-0",a4,c5,3a,4d),HX_("note impact 1 red",f6,7b,28,9d),24,false,null(),null());
HXLINE(  32)		this->animation->addByPrefix(HX_("note3-1",a5,c5,3a,4d),HX_("note impact 2 red",77,10,8f,30),24,false,null(),null());
HXLINE(  34)		this->setupNoteSplash(fromNote,x,y);
            	}

Dynamic NoteSplash_obj::__CreateEmpty() { return new NoteSplash_obj; }

void *NoteSplash_obj::_hx_vtable = 0;

Dynamic NoteSplash_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NoteSplash_obj > _hx_result = new NoteSplash_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool NoteSplash_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6c20b5d9) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x6c20b5d9;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void NoteSplash_obj::setupNoteSplash( ::Dynamic __o_fromNote,Float x,Float y){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::NoteSplash,_gthis) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_fc43ca8ee61f3046_45_setupNoteSplash)
HXLINE(  45)			_gthis->kill();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		 ::Dynamic fromNote = __o_fromNote;
            		if (::hx::IsNull(__o_fromNote)) fromNote = 0;
            	HX_STACKFRAME(&_hx_pos_fc43ca8ee61f3046_38_setupNoteSplash)
HXLINE(  37)		 ::NoteSplash _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  39)		this->set_x(x);
HXLINE(  40)		this->set_y(y);
HXLINE(  42)		this->set_alpha(((Float)0.6));
HXLINE(  44)		 ::flixel::animation::FlxAnimationController _hx_tmp = this->animation;
HXDLIN(  44)		_hx_tmp->play((((HX_("note",f2,17,0a,49) + fromNote) + HX_("-",2d,00,00,00)) + ::flixel::FlxG_obj::random->_hx_int(0,1,null())),true,null(),null());
HXLINE(  45)		this->animation->finishCallback =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(  48)		this->updateHitbox();
HXLINE(  50)		{
HXLINE(  50)			 ::flixel::math::FlxPoint _g = this->offset;
HXDLIN(  50)			_g->set_x((_g->x + 90));
            		}
HXLINE(  51)		{
HXLINE(  51)			 ::flixel::math::FlxPoint _g1 = this->offset;
HXDLIN(  51)			_g1->set_y((_g1->y + 80));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(NoteSplash_obj,setupNoteSplash,(void))

void NoteSplash_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_fc43ca8ee61f3046_57_update)
HXDLIN(  57)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< NoteSplash_obj > NoteSplash_obj::__new( ::Dynamic __o_fromNote,Float x,Float y) {
	::hx::ObjectPtr< NoteSplash_obj > __this = new NoteSplash_obj();
	__this->__construct(__o_fromNote,x,y);
	return __this;
}

::hx::ObjectPtr< NoteSplash_obj > NoteSplash_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic __o_fromNote,Float x,Float y) {
	NoteSplash_obj *__this = (NoteSplash_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NoteSplash_obj), true, "NoteSplash"));
	*(void **)__this = NoteSplash_obj::_hx_vtable;
	__this->__construct(__o_fromNote,x,y);
	return __this;
}

NoteSplash_obj::NoteSplash_obj()
{
}

::hx::Val NoteSplash_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setupNoteSplash") ) { return ::hx::Val( setupNoteSplash_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *NoteSplash_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *NoteSplash_obj_sStaticStorageInfo = 0;
#endif

static ::String NoteSplash_obj_sMemberFields[] = {
	HX_("setupNoteSplash",d6,1f,cd,18),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class NoteSplash_obj::__mClass;

void NoteSplash_obj::__register()
{
	NoteSplash_obj _hx_dummy;
	NoteSplash_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("NoteSplash",19,93,5d,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NoteSplash_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NoteSplash_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NoteSplash_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NoteSplash_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

