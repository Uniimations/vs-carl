// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayStateChangeables
#include <PlayStateChangeables.h>
#endif
#ifndef INCLUDED_Stage
#include <Stage.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7b29f2b73a08853e_10_new,"Stage","new",0x85b92290,"Stage.new","Stage.hx",10,0xbcde5ee0)

void Stage_obj::__construct(::String daStage){
            	HX_GC_STACKFRAME(&_hx_pos_7b29f2b73a08853e_10_new)
HXLINE(  24)		this->slowBacks =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  23)		this->layInFront = ::Array_obj< ::Dynamic>::__new(3)->init(0,::Array_obj< ::Dynamic>::__new(0))->init(1,::Array_obj< ::Dynamic>::__new(0))->init(2,::Array_obj< ::Dynamic>::__new(0));
HXLINE(  22)		this->animatedBacks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  21)		this->swagGroup =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  20)		this->swagBacks =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  18)		this->toAdd = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  17)		this->tweenDuration = ((Float)2);
HXLINE(  15)		this->hideLastBG = false;
HXLINE(  13)		this->halloweenLevel = false;
HXLINE(  12)		this->curStage = HX_("",00,00,00,00);
HXLINE(  31)		this->curStage = daStage;
HXLINE(  32)		this->camZoom = ((Float)1.05);
HXLINE(  33)		this->halloweenLevel = false;
HXLINE(  34)		if (::PlayStateChangeables_obj::Optimize) {
HXLINE(  34)			return;
            		}
HXLINE(  36)		::String _hx_switch_0 = daStage;
            		if (  (_hx_switch_0==HX_("basement",2f,0a,ce,11)) ){
HXLINE(  40)			this->camZoom = ((Float)0.9);
HXLINE(  41)			this->curStage = HX_("basement",2f,0a,ce,11);
HXLINE(  43)			 ::flixel::FlxSprite wall =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-553.85),((Float)-290.3),null());
HXLINE(  44)			bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN(  44)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("background",ee,93,1d,26)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN(  44)			wall->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("background",ee,93,1d,26)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE(  45)			wall->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("BACKGROUND WALL",7c,2e,75,49),24,null(),null(),null());
HXLINE(  46)			wall->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  47)			wall->scrollFactor->set(1,1);
HXLINE(  48)			wall->set_active(true);
HXLINE(  49)			this->toAdd->push(wall);
HXLINE(  51)			 ::flixel::FlxSprite torch =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)435.9),((Float)122.65),null());
HXLINE(  52)			bool usecahce1 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN(  52)			::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("the_torch",6e,e3,f1,49)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN(  52)			torch->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("the_torch",6e,e3,f1,49)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE(  53)			torch->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("TORCH",dc,08,1f,92),24,null(),null(),null());
HXLINE(  54)			torch->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  55)			torch->scrollFactor->set(1,1);
HXLINE(  56)			torch->set_active(true);
HXLINE(  57)			this->toAdd->push(torch);
HXLINE(  59)			 ::flixel::FlxSprite floor =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-422.35),((Float)564.45),null());
HXLINE(  60)			bool usecahce2 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN(  60)			::String _hx_tmp2 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("fixed floor",20,e6,9e,b5)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN(  60)			floor->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp2,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("fixed floor",20,e6,9e,b5)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE(  61)			floor->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("BACKGROUND FLOOR 1",8b,d2,df,66),24,null(),null(),null());
HXLINE(  62)			floor->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  63)			floor->scrollFactor->set(1,1);
HXLINE(  64)			floor->set_active(true);
HXLINE(  65)			this->toAdd->push(floor);
HXLINE(  67)			 ::flixel::FlxSprite stairs =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)1403.7),((Float)90.8),null());
HXLINE(  68)			bool usecahce3 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN(  68)			::String _hx_tmp3 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("fixed floor",20,e6,9e,b5)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN(  68)			stairs->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp3,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("fixed floor",20,e6,9e,b5)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE(  69)			stairs->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("BACKGROUND FLOOR 2",8c,d2,df,66),24,null(),null(),null());
HXLINE(  70)			stairs->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  71)			stairs->scrollFactor->set(1,1);
HXLINE(  72)			stairs->set_active(true);
HXLINE(  73)			this->toAdd->push(stairs);
HXLINE(  39)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("cave-thing",ae,5d,16,1d)) ){
HXLINE(  77)			this->camZoom = ((Float)0.80);
HXLINE(  78)			this->curStage = HX_("cave-thing",ae,5d,16,1d);
HXLINE(  80)			 ::flixel::FlxSprite wall =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-904.75),((Float)-384.15),null());
HXLINE(  81)			bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN(  81)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("backgroundphase2",05,46,1c,80)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN(  81)			wall->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("backgroundphase2",05,46,1c,80)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE(  82)			wall->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("background wall shit",e4,83,1d,89),24,null(),null(),null());
HXLINE(  83)			wall->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  84)			wall->scrollFactor->set(1,1);
HXLINE(  85)			wall->set_active(true);
HXLINE(  86)			this->toAdd->push(wall);
HXLINE(  88)			 ::flixel::FlxSprite bones =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-141.9),224,null());
HXDLIN(  88)			 ::flixel::FlxSprite bones1 = bones->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("PILE-OBONES",5b,93,5e,3f)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41)),null(),null(),null(),null(),null());
HXLINE(  89)			bones1->set_antialiasing(true);
HXLINE(  90)			bones1->scrollFactor->set(1,1);
HXLINE(  91)			bones1->set_active(false);
HXLINE(  92)			this->toAdd->push(bones1);
HXLINE(  94)			 ::flixel::FlxSprite crystal =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)364.9),((Float)6.85),null());
HXLINE(  95)			bool usecahce1 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN(  95)			::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("crystal",b6,23,54,a1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN(  95)			crystal->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("crystal",b6,23,54,a1)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE(  96)			crystal->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Crystrill instance 1",e4,f4,c0,b5),24,null(),null(),null());
HXLINE(  97)			crystal->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  98)			crystal->scrollFactor->set(1,1);
HXLINE(  99)			crystal->set_active(true);
HXLINE( 100)			this->toAdd->push(crystal);
HXLINE( 102)			 ::flixel::FlxSprite rails =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-619.4),((Float)443.6),null());
HXLINE( 103)			bool usecahce2 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 103)			::String _hx_tmp2 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("backgroundphase2",05,46,1c,80)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN( 103)			rails->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp2,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("backgroundphase2",05,46,1c,80)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE( 104)			rails->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("the fucking rails",9d,4c,aa,ee),24,null(),null(),null());
HXLINE( 105)			rails->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 106)			rails->scrollFactor->set(1,1);
HXLINE( 107)			rails->set_active(true);
HXLINE( 108)			this->toAdd->push(rails);
HXLINE( 110)			 ::flixel::FlxSprite otherwall =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-832.35),((Float)-614.75),null());
HXLINE( 111)			bool usecahce3 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 111)			::String _hx_tmp3 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("backgroundphase2",05,46,1c,80)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN( 111)			otherwall->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp3,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("backgroundphase2",05,46,1c,80)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE( 112)			otherwall->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("BROKEN WALL",b5,be,1d,b7),24,null(),null(),null());
HXLINE( 113)			otherwall->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 114)			otherwall->scrollFactor->set(1,1);
HXLINE( 115)			otherwall->set_active(true);
HXLINE( 116)			this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(otherwall);
HXLINE( 118)			 ::flixel::FlxSprite torch1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-584.85),((Float)122.25),null());
HXLINE( 119)			bool usecahce4 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 119)			::String _hx_tmp4 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("the_torch",6e,e3,f1,49)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN( 119)			torch1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp4,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("the_torch",6e,e3,f1,49)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE( 120)			torch1->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("TORCH",dc,08,1f,92),24,null(),null(),null());
HXLINE( 121)			torch1->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 122)			torch1->scrollFactor->set(1,1);
HXLINE( 123)			torch1->set_active(true);
HXLINE( 124)			this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(torch1);
HXLINE( 126)			 ::flixel::FlxSprite torch2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1431,((Float)126.8),null());
HXLINE( 127)			bool usecahce5 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 127)			::String _hx_tmp5 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("the_torch",6e,e3,f1,49)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN( 127)			torch2->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp5,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("the_torch",6e,e3,f1,49)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE( 128)			torch2->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("TORCH",dc,08,1f,92),24,null(),null(),null());
HXLINE( 129)			torch2->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 130)			torch2->scrollFactor->set(1,1);
HXLINE( 131)			torch2->set_active(true);
HXLINE( 132)			this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(torch2);
HXLINE(  76)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("finale",2f,28,79,86)) ){
HXLINE( 138)			this->camZoom = ((Float)0.70);
HXLINE( 139)			this->curStage = HX_("finale",2f,28,79,86);
HXLINE( 141)			 ::flixel::FlxSprite wall =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-1657.4),((Float)-1409.7),null());
HXLINE( 142)			bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 142)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("backgroundthirdphase",e2,f0,64,de)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN( 142)			wall->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("backgroundthirdphase",e2,f0,64,de)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE( 143)			wall->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("COMPLEGE BACKGOUND",e2,7b,0d,28),24,null(),null(),null());
HXLINE( 144)			wall->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 145)			wall->scrollFactor->set(1,1);
HXLINE( 146)			wall->set_active(true);
HXLINE( 147)			this->toAdd->push(wall);
HXLINE( 149)			 ::flixel::FlxSprite crystal =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)196.35),((Float)-1240.65),null());
HXLINE( 150)			bool usecahce1 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 150)			::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("HUGE",6b,1a,d8,2f)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN( 150)			crystal->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("HUGE",6b,1a,d8,2f)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE( 151)			crystal->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("A FUCKING LARGE AS FUUUUUUCK CRYSSAL",4e,08,70,9f),24,null(),null(),null());
HXLINE( 152)			crystal->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 153)			crystal->scrollFactor->set(1,1);
HXLINE( 154)			crystal->set_active(true);
HXLINE( 155)			this->toAdd->push(crystal);
HXLINE( 157)			 ::flixel::FlxSprite altar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-200.75),((Float)-86.9),null());
HXLINE( 158)			bool usecahce2 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 158)			::String _hx_tmp2 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("backgroundthirdphase",e2,f0,64,de)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN( 158)			altar->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp2,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("backgroundthirdphase",e2,f0,64,de)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE( 159)			altar->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("THE FUCKING ALTAR",b6,ef,de,f9),24,null(),null(),null());
HXLINE( 160)			altar->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 161)			altar->scrollFactor->set(1,1);
HXLINE( 162)			altar->set_active(true);
HXLINE( 163)			this->toAdd->push(altar);
HXLINE( 137)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("outside",25,8d,5e,e6)) ){
HXLINE( 167)			this->camZoom = ((Float)0.70);
HXLINE( 168)			this->curStage = HX_("outside",25,8d,5e,e6);
HXLINE( 170)			 ::flixel::FlxSprite wall =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-884.7),((Float)-519.95),null());
HXLINE( 171)			bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 171)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("phase4shit",d9,1b,1d,cc)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN( 171)			wall->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("phase4shit",d9,1b,1d,cc)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE( 172)			wall->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("HTE MOTHA FUCKIN BACKGROUND FOR $",23,f3,88,9a),24,null(),null(),null());
HXLINE( 173)			wall->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 174)			wall->scrollFactor->set(1,1);
HXLINE( 175)			wall->set_active(true);
HXLINE( 176)			this->toAdd->push(wall);
HXLINE( 178)			 ::flixel::FlxSprite crystal =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-1142.5),((Float)-231.3),null());
HXLINE( 179)			bool usecahce1 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 179)			::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("phase4shit",d9,1b,1d,cc)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN( 179)			crystal->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("phase4shit",d9,1b,1d,cc)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE( 180)			crystal->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("LMAO RIP BOZO CRYSTAL",90,a8,53,68),24,null(),null(),null());
HXLINE( 181)			crystal->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 182)			crystal->scrollFactor->set(1,1);
HXLINE( 183)			crystal->set_active(true);
HXLINE( 184)			this->toAdd->push(crystal);
HXLINE( 186)			 ::flixel::FlxSprite skeletoncrowd =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-721.55),((Float)645.95),null());
HXLINE( 187)			bool usecahce2 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 187)			::String _hx_tmp2 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("CROWD",cd,9a,48,ca)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41));
HXDLIN( 187)			skeletoncrowd->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp2,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("CROWD",cd,9a,48,ca)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("carl",d8,1d,ba,41))));
HXLINE( 188)			skeletoncrowd->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("the crowd but theyre orange",12,a0,45,ef),24,false,null(),null());
HXLINE( 189)			skeletoncrowd->scrollFactor->set(1,1);
HXLINE( 190)			skeletoncrowd->set_antialiasing(true);
HXLINE( 191)			this->swagBacks->set(HX_("skeletoncrowd",00,ca,2a,3b),skeletoncrowd);
HXLINE( 192)			this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(skeletoncrowd);
HXLINE( 193)			this->animatedBacks->push(skeletoncrowd);
HXLINE( 195)			 ::flixel::FlxSprite ground =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-17.75),((Float)1062.85),null());
HXDLIN( 195)			 ::flixel::FlxSprite ground1 = ground->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("CREAM",22,f1,40,ca)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41)),null(),null(),null(),null(),null());
HXLINE( 196)			ground1->updateHitbox();
HXLINE( 197)			ground1->set_antialiasing(true);
HXLINE( 198)			ground1->scrollFactor->set(1,1);
HXLINE( 199)			ground1->set_active(false);
HXLINE( 200)			this->swagBacks->set(HX_("ground",87,22,28,1c),ground1);
HXLINE( 201)			this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(ground1);
HXLINE( 202)			this->animatedBacks->push(ground1);
HXLINE( 166)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE( 207)			this->camZoom = ((Float)0.9);
HXLINE( 208)			this->curStage = HX_("stage",be,6a,0b,84);
HXLINE( 209)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,-200,null());
HXDLIN( 209)			::String library = null();
HXDLIN( 209)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stageback",e5,7b,3b,06)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 210)			bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 211)			bg1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 212)			bg1->set_active(false);
HXLINE( 213)			this->swagBacks->set(HX_("bg",c5,55,00,00),bg1);
HXLINE( 214)			this->toAdd->push(bg1);
HXLINE( 216)			 ::flixel::FlxSprite stageFront =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,600,null());
HXDLIN( 216)			::String library1 = null();
HXDLIN( 216)			 ::flixel::FlxSprite stageFront1 = stageFront->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagefront",2b,fd,b0,c6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE( 217)			stageFront1->setGraphicSize(::Std_obj::_hx_int((stageFront1->get_width() * ((Float)1.1))),null());
HXLINE( 218)			stageFront1->updateHitbox();
HXLINE( 219)			stageFront1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 220)			stageFront1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 221)			stageFront1->set_active(false);
HXLINE( 222)			this->swagBacks->set(HX_("stageFront",0b,6d,de,59),stageFront1);
HXLINE( 223)			this->toAdd->push(stageFront1);
HXLINE( 225)			 ::flixel::FlxSprite stageCurtains =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-300,null());
HXDLIN( 225)			::String library2 = null();
HXDLIN( 225)			 ::flixel::FlxSprite stageCurtains1 = stageCurtains->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagecurtains",df,ec,1a,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE( 226)			stageCurtains1->setGraphicSize(::Std_obj::_hx_int((stageCurtains1->get_width() * ((Float)0.9))),null());
HXLINE( 227)			stageCurtains1->updateHitbox();
HXLINE( 228)			stageCurtains1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 229)			stageCurtains1->scrollFactor->set(((Float)1.3),((Float)1.3));
HXLINE( 230)			stageCurtains1->set_active(false);
HXLINE( 232)			this->swagBacks->set(HX_("stageCurtains",ff,a8,cc,24),stageCurtains1);
HXLINE( 233)			this->toAdd->push(stageCurtains1);
            		}
            		_hx_goto_0:;
            	}

Dynamic Stage_obj::__CreateEmpty() { return new Stage_obj; }

void *Stage_obj::_hx_vtable = 0;

Dynamic Stage_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Stage_obj > _hx_result = new Stage_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Stage_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b7d43fa;
}


::hx::ObjectPtr< Stage_obj > Stage_obj::__new(::String daStage) {
	::hx::ObjectPtr< Stage_obj > __this = new Stage_obj();
	__this->__construct(daStage);
	return __this;
}

::hx::ObjectPtr< Stage_obj > Stage_obj::__alloc(::hx::Ctx *_hx_ctx,::String daStage) {
	Stage_obj *__this = (Stage_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Stage_obj), true, "Stage"));
	*(void **)__this = Stage_obj::_hx_vtable;
	__this->__construct(daStage);
	return __this;
}

Stage_obj::Stage_obj()
{
}

void Stage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Stage);
	HX_MARK_MEMBER_NAME(curStage,"curStage");
	HX_MARK_MEMBER_NAME(halloweenLevel,"halloweenLevel");
	HX_MARK_MEMBER_NAME(camZoom,"camZoom");
	HX_MARK_MEMBER_NAME(hideLastBG,"hideLastBG");
	HX_MARK_MEMBER_NAME(tweenDuration,"tweenDuration");
	HX_MARK_MEMBER_NAME(toAdd,"toAdd");
	HX_MARK_MEMBER_NAME(swagBacks,"swagBacks");
	HX_MARK_MEMBER_NAME(swagGroup,"swagGroup");
	HX_MARK_MEMBER_NAME(animatedBacks,"animatedBacks");
	HX_MARK_MEMBER_NAME(layInFront,"layInFront");
	HX_MARK_MEMBER_NAME(slowBacks,"slowBacks");
	HX_MARK_END_CLASS();
}

void Stage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curStage,"curStage");
	HX_VISIT_MEMBER_NAME(halloweenLevel,"halloweenLevel");
	HX_VISIT_MEMBER_NAME(camZoom,"camZoom");
	HX_VISIT_MEMBER_NAME(hideLastBG,"hideLastBG");
	HX_VISIT_MEMBER_NAME(tweenDuration,"tweenDuration");
	HX_VISIT_MEMBER_NAME(toAdd,"toAdd");
	HX_VISIT_MEMBER_NAME(swagBacks,"swagBacks");
	HX_VISIT_MEMBER_NAME(swagGroup,"swagGroup");
	HX_VISIT_MEMBER_NAME(animatedBacks,"animatedBacks");
	HX_VISIT_MEMBER_NAME(layInFront,"layInFront");
	HX_VISIT_MEMBER_NAME(slowBacks,"slowBacks");
}

::hx::Val Stage_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"toAdd") ) { return ::hx::Val( toAdd ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camZoom") ) { return ::hx::Val( camZoom ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { return ::hx::Val( curStage ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"swagBacks") ) { return ::hx::Val( swagBacks ); }
		if (HX_FIELD_EQ(inName,"swagGroup") ) { return ::hx::Val( swagGroup ); }
		if (HX_FIELD_EQ(inName,"slowBacks") ) { return ::hx::Val( slowBacks ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hideLastBG") ) { return ::hx::Val( hideLastBG ); }
		if (HX_FIELD_EQ(inName,"layInFront") ) { return ::hx::Val( layInFront ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"tweenDuration") ) { return ::hx::Val( tweenDuration ); }
		if (HX_FIELD_EQ(inName,"animatedBacks") ) { return ::hx::Val( animatedBacks ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"halloweenLevel") ) { return ::hx::Val( halloweenLevel ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Stage_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"toAdd") ) { toAdd=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camZoom") ) { camZoom=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { curStage=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"swagBacks") ) { swagBacks=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"swagGroup") ) { swagGroup=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"slowBacks") ) { slowBacks=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hideLastBG") ) { hideLastBG=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layInFront") ) { layInFront=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"tweenDuration") ) { tweenDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animatedBacks") ) { animatedBacks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"halloweenLevel") ) { halloweenLevel=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Stage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curStage",1e,65,b9,cb));
	outFields->push(HX_("halloweenLevel",b7,ca,23,07));
	outFields->push(HX_("camZoom",c2,f6,e9,db));
	outFields->push(HX_("hideLastBG",fd,ab,4a,ec));
	outFields->push(HX_("tweenDuration",df,58,51,72));
	outFields->push(HX_("toAdd",66,a3,0b,14));
	outFields->push(HX_("swagBacks",82,d9,24,8a));
	outFields->push(HX_("swagGroup",55,84,6b,76));
	outFields->push(HX_("animatedBacks",c9,96,f7,e5));
	outFields->push(HX_("layInFront",80,62,57,86));
	outFields->push(HX_("slowBacks",ab,36,dc,c0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Stage_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Stage_obj,curStage),HX_("curStage",1e,65,b9,cb)},
	{::hx::fsBool,(int)offsetof(Stage_obj,halloweenLevel),HX_("halloweenLevel",b7,ca,23,07)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,camZoom),HX_("camZoom",c2,f6,e9,db)},
	{::hx::fsBool,(int)offsetof(Stage_obj,hideLastBG),HX_("hideLastBG",fd,ab,4a,ec)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,tweenDuration),HX_("tweenDuration",df,58,51,72)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(Stage_obj,toAdd),HX_("toAdd",66,a3,0b,14)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Stage_obj,swagBacks),HX_("swagBacks",82,d9,24,8a)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Stage_obj,swagGroup),HX_("swagGroup",55,84,6b,76)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,animatedBacks),HX_("animatedBacks",c9,96,f7,e5)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,layInFront),HX_("layInFront",80,62,57,86)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(Stage_obj,slowBacks),HX_("slowBacks",ab,36,dc,c0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Stage_obj_sStaticStorageInfo = 0;
#endif

static ::String Stage_obj_sMemberFields[] = {
	HX_("curStage",1e,65,b9,cb),
	HX_("halloweenLevel",b7,ca,23,07),
	HX_("camZoom",c2,f6,e9,db),
	HX_("hideLastBG",fd,ab,4a,ec),
	HX_("tweenDuration",df,58,51,72),
	HX_("toAdd",66,a3,0b,14),
	HX_("swagBacks",82,d9,24,8a),
	HX_("swagGroup",55,84,6b,76),
	HX_("animatedBacks",c9,96,f7,e5),
	HX_("layInFront",80,62,57,86),
	HX_("slowBacks",ab,36,dc,c0),
	::String(null()) };

::hx::Class Stage_obj::__mClass;

void Stage_obj::__register()
{
	Stage_obj _hx_dummy;
	Stage_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Stage",9e,da,38,17);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Stage_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Stage_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stage_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

