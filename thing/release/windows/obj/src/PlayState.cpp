// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Ana
#include <Ana.h>
#endif
#ifndef INCLUDED_Analysis
#include <Analysis.h>
#endif
#ifndef INCLUDED_BackgroundDancer
#include <BackgroundDancer.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_DialogueBox
#include <DialogueBox.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_EndingState
#include <EndingState.h>
#endif
#ifndef INCLUDED_EtternaFunctions
#include <EtternaFunctions.h>
#endif
#ifndef INCLUDED_Event
#include <Event.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_GameOverSubstate
#include <GameOverSubstate.h>
#endif
#ifndef INCLUDED_GitarooPause
#include <GitarooPause.h>
#endif
#ifndef INCLUDED_GlobalVideo
#include <GlobalVideo.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_HelperFunctions
#include <HelperFunctions.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_KeyBinds
#include <KeyBinds.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_LuaCamera
#include <LuaCamera.h>
#endif
#ifndef INCLUDED_LuaCharacter
#include <LuaCharacter.h>
#endif
#ifndef INCLUDED_LuaClass
#include <LuaClass.h>
#endif
#ifndef INCLUDED_LuaNote
#include <LuaNote.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_ModchartState
#include <ModchartState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_NGio
#include <NGio.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_NoteSplash
#include <NoteSplash.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayStateChangeables
#include <PlayStateChangeables.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Ratings
#include <Ratings.h>
#endif
#ifndef INCLUDED_Replay
#include <Replay.h>
#endif
#ifndef INCLUDED_ResultsScreen
#include <ResultsScreen.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Stage
#include <Stage.h>
#endif
#ifndef INCLUDED_StageDebugState
#include <StageDebugState.h>
#endif
#ifndef INCLUDED_StaticArrow
#include <StaticArrow.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TimingStruct
#include <TimingStruct.h>
#endif
#ifndef INCLUDED_WebmHandler
#include <WebmHandler.h>
#endif
#ifndef INCLUDED_WiggleEffect
#include <WiggleEffect.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <haxe/iterators/MapKeyValueIterator.h>
#endif
#ifndef INCLUDED_io_newgrounds_NG
#include <io/newgrounds/NG.h>
#endif
#ifndef INCLUDED_io_newgrounds_NGLite
#include <io/newgrounds/NGLite.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Medal
#include <io/newgrounds/objects/Medal.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Object
#include <io/newgrounds/objects/Object.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeAudioSource
#include <lime/_internal/backend/native/NativeAudioSource.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_media_openal_AL
#include <lime/media/openal/AL.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_smTools_SMFile
#include <smTools/SMFile.h>
#endif
#ifndef INCLUDED_smTools_SMHeader
#include <smTools/SMHeader.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_webm_WebmPlayer
#include <webm/WebmPlayer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_87_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",87,0xb30d7781)
static const bool _hx_array_data_46c2835d_1[] = {
	0,0,0,0,
};
static const ::String _hx_array_data_46c2835d_2[] = {
	HX_("purple",3c,f6,89,71),HX_("blue",9a,42,19,41),HX_("green",c3,0e,ed,99),HX_("red",51,d9,56,00),
};
static const ::String _hx_array_data_46c2835d_3[] = {
	HX_("LEFT",07,d0,70,32),HX_("DOWN",62,c0,2e,2d),HX_("UP",5b,4a,00,00),HX_("RIGHT",bc,43,52,67),
};
static const ::String _hx_array_data_46c2835d_4[] = {
	HX_("dad:blah blah blah",24,b6,5d,84),HX_("bf:coolswag",c9,19,15,c1),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_290_addObject,"PlayState","addObject",0x09b6776f,"PlayState.addObject","PlayState.hx",290,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_295_removeObject,"PlayState","removeObject",0x9fa28dd4,"PlayState.removeObject","PlayState.hx",295,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_299_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",299,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1138_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1138,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1131_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1131,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1122_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1122,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1153_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1153,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1160_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1160,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1201_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1201,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1219_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1219,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1234_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1234,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1229_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1229,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1239_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1239,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1173_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1173,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1262_CarlDialogue,"PlayState","CarlDialogue",0x44dd5ee1,"PlayState.CarlDialogue","PlayState.hx",1262,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1258_CarlDialogue,"PlayState","CarlDialogue",0x44dd5ee1,"PlayState.CarlDialogue","PlayState.hx",1258,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1300_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1300,0xb30d7781)
static const ::String _hx_array_data_46c2835d_47[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
static const ::String _hx_array_data_46c2835d_48[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1347_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1347,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1364_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1364,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1383_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1383,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1283_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1283,0xb30d7781)
static const int _hx_array_data_46c2835d_53[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1398_getKey,"PlayState","getKey",0xa9336b9a,"PlayState.getKey","PlayState.hx",1398,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1410_releaseInput,"PlayState","releaseInput",0xa075d074,"PlayState.releaseInput","PlayState.hx",1410,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1508_handleInput,"PlayState","handleInput",0x79b5bcb1,"PlayState.handleInput","PlayState.hx",1508,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1512_handleInput,"PlayState","handleInput",0x79b5bcb1,"PlayState.handleInput","PlayState.hx",1512,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1451_handleInput,"PlayState","handleInput",0x79b5bcb1,"PlayState.handleInput","PlayState.hx",1451,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1577_startSong,"PlayState","startSong",0x419e6106,"PlayState.startSong","PlayState.hx",1577,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1686_generateSong,"PlayState","generateSong",0x3a61615b,"PlayState.generateSong","PlayState.hx",1686,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1921_sortByShit,"PlayState","sortByShit",0xfa9f74a6,"PlayState.sortByShit","PlayState.hx",1921,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1926_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",1926,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2023_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",2023,0xb30d7781)
static const int _hx_array_data_46c2835d_82[] = {
	(int)6,
};
static const int _hx_array_data_46c2835d_83[] = {
	(int)7,
};
static const int _hx_array_data_46c2835d_84[] = {
	(int)5,
};
static const int _hx_array_data_46c2835d_85[] = {
	(int)4,
};
static const int _hx_array_data_46c2835d_86[] = {
	(int)12,(int)16,
};
static const int _hx_array_data_46c2835d_87[] = {
	(int)13,(int)17,
};
static const int _hx_array_data_46c2835d_88[] = {
	(int)14,(int)18,
};
static const int _hx_array_data_46c2835d_89[] = {
	(int)15,(int)19,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2034_appearStaticArrows,"PlayState","appearStaticArrows",0x766c1a7e,"PlayState.appearStaticArrows","PlayState.hx",2034,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2032_appearStaticArrows,"PlayState","appearStaticArrows",0x766c1a7e,"PlayState.appearStaticArrows","PlayState.hx",2032,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2041_tweenCamIn,"PlayState","tweenCamIn",0x8478acda,"PlayState.tweenCamIn","PlayState.hx",2041,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2045_openSubState,"PlayState","openSubState",0x527dda0c,"PlayState.openSubState","PlayState.hx",2045,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2078_closeSubState,"PlayState","closeSubState",0xb7c1df78,"PlayState.closeSubState","PlayState.hx",2078,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2120_resyncVocals,"PlayState","resyncVocals",0x86228a3d,"PlayState.resyncVocals","PlayState.hx",2120,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2174_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2174,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2235_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2235,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3023_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3023,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3141_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3141,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3174_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3174,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3369_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3369,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3379_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3379,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3400_getSectionByTime,"PlayState","getSectionByTime",0x77354304,"PlayState.getSectionByTime","PlayState.hx",3400,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3423_recalculateAllSectionTimes,"PlayState","recalculateAllSectionTimes",0x34e3dfc0,"PlayState.recalculateAllSectionTimes","PlayState.hx",3423,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3446_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3446,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3516_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3516,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3557_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3557,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3587_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3587,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3669_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3669,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3682_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3682,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3754_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3754,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3772_getRatesScore,"PlayState","getRatesScore",0xf8894024,"PlayState.getRatesScore","PlayState.hx",3772,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3797_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",3797,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4083_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",4083,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4092_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",4092,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4047_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",4047,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4053_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",4053,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4111_NearlyEquals,"PlayState","NearlyEquals",0x84760165,"PlayState.NearlyEquals","PlayState.hx",4111,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4122_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4122,0xb30d7781)
static const ::String _hx_array_data_46c2835d_158[] = {
	HX_("left",07,08,b0,47),HX_("down",62,f8,6d,42),HX_("up",5b,66,00,00),HX_("right",dc,0b,64,e9),
};
static const bool _hx_array_data_46c2835d_159[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_160[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_161[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4165_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4165,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4186_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4186,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4224_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4224,0xb30d7781)
static const bool _hx_array_data_46c2835d_165[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_166[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4277_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4277,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4296_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4296,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4318_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4318,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4344_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4344,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4354_findByTime,"PlayState","findByTime",0xc7b7b00e,"PlayState.findByTime","PlayState.hx",4354,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4365_findByTimeIndex,"PlayState","findByTimeIndex",0x9aab6824,"PlayState.findByTimeIndex","PlayState.hx",4365,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4385_focusOut,"PlayState","focusOut",0xc021f6c7,"PlayState.focusOut","PlayState.hx",4385,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4402_focusIn,"PlayState","focusIn",0x8bc46fcc,"PlayState.focusIn","PlayState.hx",4402,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4407_backgroundVideo,"PlayState","backgroundVideo",0x865a229c,"PlayState.backgroundVideo","PlayState.hx",4407,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4466_noteMiss,"PlayState","noteMiss",0x0652ff3f,"PlayState.noteMiss","PlayState.hx",4466,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4559_updateAccuracy,"PlayState","updateAccuracy",0x9f2d7b53,"PlayState.updateAccuracy","PlayState.hx",4559,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4573_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",4573,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4576_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",4576,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4568_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",4568,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4590_noteCheck,"PlayState","noteCheck",0xbf96a725,"PlayState.noteCheck","PlayState.hx",4590,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4636_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",4636,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4700_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",4700,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4721_pressArrow,"PlayState","pressArrow",0x8f0070b7,"PlayState.pressArrow","PlayState.hx",4721,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4738_resetFastCar,"PlayState","resetFastCar",0x6b33ac7a,"PlayState.resetFastCar","PlayState.hx",4738,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4749_fastCarDrive,"PlayState","fastCarDrive",0xda080ac3,"PlayState.fastCarDrive","PlayState.hx",4749,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4758_fastCarDrive,"PlayState","fastCarDrive",0xda080ac3,"PlayState.fastCarDrive","PlayState.hx",4758,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4772_trainStart,"PlayState","trainStart",0x6a3d10eb,"PlayState.trainStart","PlayState.hx",4772,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4783_updateTrainPos,"PlayState","updateTrainPos",0x957683c6,"PlayState.updateTrainPos","PlayState.hx",4783,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4813_trainReset,"PlayState","trainReset",0xccf9e658,"PlayState.trainReset","PlayState.hx",4813,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4827_lightningStrikeShit,"PlayState","lightningStrikeShit",0xdc0ca52b,"PlayState.lightningStrikeShit","PlayState.hx",4827,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4841_stepHit,"PlayState","stepHit",0xcb82d856,"PlayState.stepHit","PlayState.hx",4841,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4861_stepHit,"PlayState","stepHit",0xcb82d856,"PlayState.stepHit","PlayState.hx",4861,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4896_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",4896,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4901_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",4901,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5012_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",5012,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5029_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",5029,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5066_poggers,"PlayState","poggers",0x6fe9ecd6,"PlayState.poggers","PlayState.hx",5066,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_89_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",89,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_92_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",92,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_93_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",93,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_94_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",94,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_95_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",95,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_96_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",96,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_97_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",97,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_98_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",98,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_99_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",99,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_100_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",100,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_101_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",101,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_112_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",112,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_113_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",113,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_115_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",115,0xb30d7781)
static const bool _hx_array_data_46c2835d_234[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_130_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",130,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_154_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",154,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_155_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",155,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_156_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",156,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_167_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",167,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_168_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",168,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_169_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",169,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_170_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",170,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_171_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",171,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_172_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",172,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_198_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",198,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_237_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",237,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_239_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",239,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_241_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",241,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_247_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",247,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_254_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",254,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_255_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",255,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_257_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",257,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_258_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",258,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_264_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",264,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_276_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",276,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_284_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",284,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1279_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",1279,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1573_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",1573,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2159_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",2159,0xb30d7781)

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_87_new)
HXLINE(5182)		this->curLight = 0;
HXLINE(4893)		this->lightningOffset = 8;
HXLINE(4892)		this->lightningStrikeBeat = 0;
HXLINE(4838)		this->danced = false;
HXLINE(4779)		this->startedMoving = false;
HXLINE(4768)		this->trainCooldown = 0;
HXLINE(4767)		this->trainFinishing = false;
HXLINE(4766)		this->trainCars = 8;
HXLINE(4764)		this->trainFrameTiming = ((Float)0);
HXLINE(4763)		this->trainMoving = false;
HXLINE(4734)		this->fastCarCanDrive = true;
HXLINE(4587)		this->etternaModeScore = 0;
HXLINE(4585)		this->mashViolations = 0;
HXLINE(4584)		this->mashing = 0;
HXLINE(4380)		this->playingDathing = false;
HXLINE(4376)		this->useVideo = false;
HXLINE(4375)		this->fuckingVolume = ((Float)1);
HXLINE(4117)		this->leftHold = false;
HXLINE(4116)		this->rightHold = false;
HXLINE(4115)		this->downHold = false;
HXLINE(4114)		this->upHold = false;
HXLINE(3794)		this->currentTimingShown = null();
HXLINE(3793)		this->timeShown = 0;
HXLINE(3769)		this->offsetTest = ((Float)0);
HXLINE(3768)		this->hits = ::Array_obj< Float >::__new(0);
HXLINE(3766)		this->endingSong = false;
HXLINE(2171)		this->currentLuaIndex = 0;
HXLINE(2168)		this->pastScrollChanges = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2166)		this->updateFrame = 0;
HXLINE(2164)		this->currentBPM = 0;
HXLINE(2162)		this->removedVideo = false;
HXLINE(2161)		this->stopUpdate = false;
HXLINE(2157)		this->maxNPS = 0;
HXLINE(2156)		this->nps = 0;
HXLINE(2155)		this->canPause = true;
HXLINE(2154)		this->startedCountdown = false;
HXLINE(2153)		this->paused = false;
HXLINE(1683)		this->debugNum = 0;
HXLINE(1574)		this->previousRate = ::PlayState_obj::songMultiplier;
HXLINE(1570)		this->doAnything = false;
HXLINE(1568)		this->songStarted = false;
HXLINE(1447)		this->closestNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1407)		this->keys = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_1,4);
HXLINE(1395)		this->songTime = ((Float)0);
HXLINE(1394)		this->lastReportedPlayheadPosition = 0;
HXLINE(1393)		this->previousFrameTime = 0;
HXLINE(1276)		this->luaWiggles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1275)		this->perfectMode = false;
HXLINE( 282)		this->dataColor = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_2,4);
HXLINE( 281)		this->dataSuffix = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_3,4);
HXLINE( 278)		this->executeModchart = false;
HXLINE( 274)		this->replayAna =  ::Analysis_obj::__alloc( HX_CTX );
HXLINE( 273)		this->saveJudge = ::Array_obj< ::String >::__new(0);
HXLINE( 272)		this->saveNotes = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 267)		this->grpNoteSplashes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 261)		this->triggeredAlready = false;
HXLINE( 250)		this->randomVar = false;
HXLINE( 245)		this->usedTimeTravel = false;
HXLINE( 244)		this->inCutscene = false;
HXLINE( 233)		this->skipActive = false;
HXLINE( 232)		this->needSkip = false;
HXLINE( 228)		this->songScoreDef = 0;
HXLINE( 226)		this->songScore = 0;
HXLINE( 224)		this->talking = true;
HXLINE( 222)		this->wiggleShit =  ::WiggleEffect_obj::__alloc( HX_CTX );
HXLINE( 220)		this->fc = true;
HXLINE( 216)		this->altSuffix = HX_("",00,00,00,00);
HXLINE( 210)		this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_4,2);
HXLINE( 208)		this->allowedToCheer = false;
HXLINE( 207)		this->allowedToHeadbang = true;
HXLINE( 206)		this->forcedToIdle = false;
HXLINE( 205)		this->idleBeat = 2;
HXLINE( 204)		this->idleToBeat = true;
HXLINE( 203)		this->currentFrames = 0;
HXLINE( 202)		this->notesHitArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 200)		this->isSMFile = false;
HXLINE( 196)		this->cannotDie = false;
HXLINE( 187)		this->startingSong = false;
HXLINE( 186)		this->generatedMusic = false;
HXLINE( 184)		this->songPositionBar = ((Float)0);
HXLINE( 180)		this->ss = false;
HXLINE( 179)		this->totalPlayed = 0;
HXLINE( 178)		this->totalNotesHitDefault = ((Float)0);
HXLINE( 177)		this->totalNotesHit = ((Float)0);
HXLINE( 176)		this->accuracyDefault = ((Float)0.00);
HXLINE( 174)		this->accuracy = ((Float)0.00);
HXLINE( 165)		this->combo = 0;
HXLINE( 163)		this->health = ((Float)1);
HXLINE( 161)		this->gfSpeed = 1;
HXLINE( 159)		this->curSong = HX_("",00,00,00,00);
HXLINE( 158)		this->camZooming = false;
HXLINE( 148)		this->curSection = 0;
HXLINE( 144)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 125)		this->detailsPausedText = HX_("",00,00,00,00);
HXLINE( 124)		this->detailsText = HX_("",00,00,00,00);
HXLINE( 123)		this->iconRPC = HX_("",00,00,00,00);
HXLINE( 122)		this->storyDifficultyText = HX_("",00,00,00,00);
HXLINE( 117)		this->songLength = ((Float)0);
HXLINE( 107)		this->visibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 105)		this->visibleCombos = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  87)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlayState_obj::addObject( ::flixel::FlxBasic object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_290_addObject)
HXDLIN( 290)		this->add(object);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addObject,(void))

void PlayState_obj::removeObject( ::flixel::FlxBasic object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_295_removeObject)
HXDLIN( 295)		this->remove(object,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,removeObject,(void))

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_299_create)
HXLINE( 298)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 300)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 301)		::PlayState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 303)		this->previousRate = (::PlayState_obj::songMultiplier - ((Float)0.05));
HXLINE( 305)		if ((this->previousRate < ((Float)1.00))) {
HXLINE( 306)			this->previousRate = ( (Float)(1) );
            		}
HXLINE( 308)		if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic),290 )) {
HXLINE( 309)			::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(800) ));
            		}
HXLINE( 311)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 312)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 312)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 314)		::PlayState_obj::sicks = 0;
HXLINE( 315)		::PlayState_obj::bads = 0;
HXLINE( 316)		::PlayState_obj::shits = 0;
HXLINE( 317)		::PlayState_obj::goods = 0;
HXLINE( 319)		::PlayState_obj::misses = 0;
HXLINE( 321)		::PlayState_obj::highestCombo = 0;
HXLINE( 322)		::PlayState_obj::repPresses = 0;
HXLINE( 323)		::PlayState_obj::repReleases = 0;
HXLINE( 324)		::PlayState_obj::inResults = false;
HXLINE( 326)		::PlayStateChangeables_obj::useDownscroll = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) );
HXLINE( 327)		::PlayStateChangeables_obj::safeFrames = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)) );
HXLINE( 328)		::PlayStateChangeables_obj::scrollSpeed = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)) );
HXLINE( 329)		::PlayStateChangeables_obj::botPlay = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) );
HXLINE( 330)		::PlayStateChangeables_obj::Optimize = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("optimize",dd,8c,18,1d),::hx::paccDynamic)) );
HXLINE( 331)		::PlayStateChangeables_obj::zoom = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic)) );
HXLINE( 334)		::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXLINE( 335)		::String _hx_switch_0 = songLowercase;
            		if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE( 338)			songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN( 338)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE( 342)			songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN( 342)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE( 340)			songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN( 340)			goto _hx_goto_7;
            		}
            		_hx_goto_7:;
HXLINE( 345)		this->removedVideo = false;
HXLINE( 348)		::String library = null();
HXDLIN( 348)		this->executeModchart = ::sys::FileSystem_obj::exists(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (songLowercase + HX_("/modchart",0b,0e,ff,5d))) + HX_(".lua",4a,2a,ba,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 349)		if (::PlayState_obj::isSM) {
HXLINE( 350)			this->executeModchart = ::sys::FileSystem_obj::exists((::PlayState_obj::pathToSm + HX_("/modchart.lua",d5,99,c0,d9)));
            		}
HXLINE( 351)		if (this->executeModchart) {
HXLINE( 352)			::PlayStateChangeables_obj::Optimize = false;
            		}
HXLINE( 361)		if (this->executeModchart) {
HXLINE( 362)			::PlayState_obj::songMultiplier = ( (Float)(1) );
            		}
HXLINE( 366)		this->storyDifficultyText = ::CoolUtil_obj::difficultyFromInt(::PlayState_obj::storyDifficulty);
HXLINE( 368)		this->iconRPC = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
HXLINE( 371)		::String _hx_switch_1 = this->iconRPC;
            		if (  (_hx_switch_1==HX_("mom-car",52,e6,f7,f6)) ){
HXLINE( 378)			this->iconRPC = HX_("mom",cb,16,53,00);
HXDLIN( 378)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_1==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE( 376)			this->iconRPC = HX_("monster",1a,54,b0,b8);
HXDLIN( 376)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_1==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 374)			this->iconRPC = HX_("senpai",3c,df,8d,6b);
HXDLIN( 374)			goto _hx_goto_8;
            		}
            		_hx_goto_8:;
HXLINE( 382)		if (::PlayState_obj::isStoryMode) {
HXLINE( 384)			this->detailsText = (HX_("Story Mode: Week ",38,e3,aa,dd) + ::PlayState_obj::storyWeek);
            		}
            		else {
HXLINE( 388)			this->detailsText = HX_("Freeplay",c0,4c,38,fc);
            		}
HXLINE( 392)		this->detailsPausedText = (HX_("Paused - ",65,2f,92,fd) + this->detailsText);
HXLINE( 395)		::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN( 395)		::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE( 402)		::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE( 395)		::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
HXLINE( 411)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 412)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 413)		{
HXLINE( 413)			 ::flixel::FlxCamera _hx_tmp3 = this->camHUD;
HXDLIN( 413)			_hx_tmp3->bgColor = (_hx_tmp3->bgColor & 16777215);
HXDLIN( 413)			 ::flixel::FlxCamera _hx_tmp4 = this->camHUD;
HXDLIN( 413)			_hx_tmp4->bgColor = (_hx_tmp4->bgColor | 0);
            		}
HXLINE( 414)		this->camSustains =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 415)		{
HXLINE( 415)			 ::flixel::FlxCamera _hx_tmp5 = this->camSustains;
HXDLIN( 415)			_hx_tmp5->bgColor = (_hx_tmp5->bgColor & 16777215);
HXDLIN( 415)			 ::flixel::FlxCamera _hx_tmp6 = this->camSustains;
HXDLIN( 415)			_hx_tmp6->bgColor = (_hx_tmp6->bgColor | 0);
            		}
HXLINE( 416)		this->camNotes =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 417)		{
HXLINE( 417)			 ::flixel::FlxCamera _hx_tmp7 = this->camNotes;
HXDLIN( 417)			_hx_tmp7->bgColor = (_hx_tmp7->bgColor & 16777215);
HXDLIN( 417)			 ::flixel::FlxCamera _hx_tmp8 = this->camNotes;
HXDLIN( 417)			_hx_tmp8->bgColor = (_hx_tmp8->bgColor | 0);
            		}
HXLINE( 419)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE( 420)		::flixel::FlxG_obj::cameras->add(this->camHUD,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 421)		::flixel::FlxG_obj::cameras->add(this->camSustains,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 422)		::flixel::FlxG_obj::cameras->add(this->camNotes,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 424)		 ::NoteSplash tempNoteSplash =  ::NoteSplash_obj::__alloc( HX_CTX ,0,( (Float)(0) ),( (Float)(0) ));
HXLINE( 425)		this->grpNoteSplashes->add(tempNoteSplash).StaticCast<  ::NoteSplash >();
HXLINE( 426)		tempNoteSplash->set_alpha(((Float)0.1));
HXLINE( 428)		this->camHUD->set_zoom(::PlayStateChangeables_obj::zoom);
HXLINE( 430)		::flixel::FlxCamera_obj::_defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE( 432)		this->persistentUpdate = true;
HXLINE( 433)		this->persistentDraw = true;
HXLINE( 435)		if (::hx::IsNull( ::PlayState_obj::SONG )) {
HXLINE( 436)			::PlayState_obj::SONG = ::Song_obj::loadFromJson(HX_("dungeon",fa,68,99,a0),HX_("dungeon",fa,68,99,a0));
            		}
HXLINE( 438)		::Conductor_obj::mapBPMChanges(::PlayState_obj::SONG);
HXLINE( 439)		::Conductor_obj::changeBPM(( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE( 441)		::Conductor_obj::bpm = ( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 443)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 445)			::PlayState_obj::SONG->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 448)		::TimingStruct_obj::clearTimings();
HXLINE( 450)		int currentIndex = 0;
HXLINE( 451)		{
HXLINE( 451)			int _g = 0;
HXDLIN( 451)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 451)			while((_g < _g1->length)){
HXLINE( 451)				 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 451)				_g = (_g + 1);
HXLINE( 453)				if ((i->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 455)					Float beat = i->position;
HXLINE( 457)					Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 459)					Float bpm = i->value;
HXLINE( 461)					::TimingStruct_obj::addTiming(beat,bpm,endBeat,( (Float)(0) ));
HXLINE( 463)					if ((currentIndex != 0)) {
HXLINE( 465)						 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 466)						data->endBeat = beat;
HXLINE( 467)						data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 468)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            					}
HXLINE( 471)					currentIndex = (currentIndex + 1);
            				}
            			}
            		}
HXLINE( 476)		this->recalculateAllSectionTimes();
HXLINE( 483)		::String _hx_switch_2 = songLowercase;
            		if (  (_hx_switch_2==HX_("crystalized",46,89,53,f2)) ||  (_hx_switch_2==HX_("dungeon",fa,68,99,a0)) ||  (_hx_switch_2==HX_("necromancipation",9c,e3,00,b3)) ||  (_hx_switch_2==HX_("raveyard",18,cb,f2,df)) ){
HXLINE( 487)			::String library = null();
HXDLIN( 487)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("",00,00,00,00) + ((HX_("data/",c5,0e,88,d4) + songLowercase) + HX_("/Dialogue",67,30,98,3b))) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXDLIN( 487)			goto _hx_goto_10;
            		}
            		_hx_goto_10:;
HXLINE( 491)		::String stageCheck = HX_("stage",be,6a,0b,84);
HXLINE( 493)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic) )) {
HXLINE( 495)			if ((::PlayState_obj::storyWeek == 1)) {
HXLINE( 499)				::String _hx_switch_3 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
            				if (  (_hx_switch_3==HX_("crystalized",46,89,53,f2)) ){
HXLINE( 504)					stageCheck = HX_("cave-thing",ae,5d,16,1d);
HXDLIN( 504)					goto _hx_goto_11;
            				}
            				if (  (_hx_switch_3==HX_("dungeon",fa,68,99,a0)) ){
HXLINE( 502)					stageCheck = HX_("basement",2f,0a,ce,11);
HXDLIN( 502)					goto _hx_goto_11;
            				}
            				if (  (_hx_switch_3==HX_("necromancipation",9c,e3,00,b3)) ){
HXLINE( 506)					stageCheck = HX_("finale",2f,28,79,86);
HXDLIN( 506)					goto _hx_goto_11;
            				}
            				if (  (_hx_switch_3==HX_("raveyard",18,cb,f2,df)) ){
HXLINE( 508)					stageCheck = HX_("raveyard",18,cb,f2,df);
HXDLIN( 508)					goto _hx_goto_11;
            				}
            				_hx_goto_11:;
            			}
            		}
            		else {
HXLINE( 517)			stageCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
            		}
HXLINE( 520)		if (::PlayState_obj::isStoryMode) {
HXLINE( 521)			::PlayState_obj::songMultiplier = ( (Float)(1) );
            		}
HXLINE( 524)		::String gfCheck = HX_("gf",1f,5a,00,00);
HXLINE( 526)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic) )) {
HXLINE( 528)			switch((int)(::PlayState_obj::storyWeek)){
            				case (int)4: {
HXLINE( 531)					gfCheck = HX_("gf-car",a6,63,ab,07);
            				}
            				break;
            				case (int)5: {
HXLINE( 533)					gfCheck = HX_("gf-christmas",94,26,b1,6d);
            				}
            				break;
            				case (int)6: {
HXLINE( 535)					gfCheck = HX_("gf-pixel",98,3e,8c,55);
            				}
            				break;
            			}
            		}
            		else {
HXLINE( 540)			gfCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) );
            		}
HXLINE( 543)		if (!(::PlayState_obj::stageTesting)) {
HXLINE( 545)			::PlayState_obj::gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),gfCheck,null());
HXLINE( 547)			if (::hx::IsNull( ::PlayState_obj::gf->frames )) {
HXLINE( 552)				::PlayState_obj::gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),HX_("gf",1f,5a,00,00),null());
            			}
HXLINE( 555)			::PlayState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 557)			if (::hx::IsNull( ::PlayState_obj::boyfriend->frames )) {
HXLINE( 562)				::PlayState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),HX_("bf",c4,55,00,00));
            			}
HXLINE( 565)			::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 567)			if (::hx::IsNull( ::PlayState_obj::dad->frames )) {
HXLINE( 572)				::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),HX_("dad",47,36,4c,00),null());
            			}
HXLINE( 575)			::PlayState_obj::Stage =  ::Stage_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
HXLINE( 577)			{
HXLINE( 577)				int _g = 0;
HXDLIN( 577)				::cpp::VirtualArray _g1 = ::PlayState_obj::Stage->toAdd;
HXDLIN( 577)				while((_g < _g1->get_length())){
HXLINE( 577)					 ::Dynamic i = _g1->__get(_g);
HXDLIN( 577)					_g = (_g + 1);
HXLINE( 579)					this->add(i);
            				}
            			}
HXLINE( 581)			if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 582)				int _g5_current = 0;
HXDLIN( 582)				::Array< ::Dynamic> _g5_array = ::PlayState_obj::Stage->layInFront;
HXDLIN( 582)				while((_g5_current < _g5_array->length)){
HXLINE( 582)					::Array< ::Dynamic> _g6_value = _g5_array->__get(_g5_current).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 582)					_g5_current = (_g5_current + 1);
HXDLIN( 582)					int _g6_key = (_g5_current - 1);
HXDLIN( 582)					int index = _g6_key;
HXDLIN( 582)					::Array< ::Dynamic> array = _g6_value;
HXLINE( 584)					switch((int)(index)){
            						case (int)0: {
HXLINE( 587)							this->add(::PlayState_obj::gf);
HXLINE( 588)							::PlayState_obj::gf->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 589)							{
HXLINE( 589)								int _g = 0;
HXDLIN( 589)								while((_g < array->length)){
HXLINE( 589)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 589)									_g = (_g + 1);
HXLINE( 590)									this->add(bg);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 592)							this->add(::PlayState_obj::dad);
HXLINE( 593)							{
HXLINE( 593)								int _g = 0;
HXDLIN( 593)								while((_g < array->length)){
HXLINE( 593)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 593)									_g = (_g + 1);
HXLINE( 594)									this->add(bg);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 596)							this->add(::PlayState_obj::boyfriend);
HXLINE( 597)							{
HXLINE( 597)								int _g = 0;
HXDLIN( 597)								while((_g < array->length)){
HXLINE( 597)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 597)									_g = (_g + 1);
HXLINE( 598)									this->add(bg);
            								}
            							}
            						}
            						break;
            					}
            				}
            			}
HXLINE( 602)			Float _hx_tmp = ::PlayState_obj::dad->getGraphicMidpoint(null())->x;
HXDLIN( 602)			this->camPos =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 604)			::String _hx_switch_4 = ::PlayState_obj::dad->curCharacter;
            			if (  (_hx_switch_4==HX_("carl-phase-1",aa,d9,dd,da)) ){
HXLINE( 649)				{
HXLINE( 650)					{
HXLINE( 650)						 ::flixel::math::FlxPoint _g = this->camPos;
HXDLIN( 650)						_g->set_x((_g->x + 50));
            					}
HXLINE( 651)					this->tweenCamIn();
            				}
HXLINE( 654)				{
HXLINE( 654)					 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 654)					_g1->set_x((_g1->x - ( (Float)(150) )));
            				}
HXLINE( 655)				{
HXLINE( 655)					 ::Character _g2 = ::PlayState_obj::dad;
HXDLIN( 655)					_g2->set_y((_g2->y + 100));
            				}
HXLINE( 656)				 ::flixel::math::FlxPoint _hx_tmp = this->camPos;
HXDLIN( 656)				Float _hx_tmp1 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 656)				_hx_tmp->set(_hx_tmp1,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 648)				goto _hx_goto_17;
            			}
            			if (  (_hx_switch_4==HX_("dad",47,36,4c,00)) ){
HXLINE( 621)				 ::flixel::math::FlxPoint _g = this->camPos;
HXDLIN( 621)				_g->set_x((_g->x + 400));
HXDLIN( 621)				goto _hx_goto_17;
            			}
            			if (  (_hx_switch_4==HX_("gf",1f,5a,00,00)) ){
HXLINE( 607)				::PlayState_obj::dad->setPosition(::PlayState_obj::gf->x,::PlayState_obj::gf->y);
HXLINE( 608)				::PlayState_obj::gf->set_visible(false);
HXLINE( 609)				if (::PlayState_obj::isStoryMode) {
HXLINE( 611)					{
HXLINE( 611)						 ::flixel::math::FlxPoint _g = this->camPos;
HXDLIN( 611)						_g->set_x((_g->x + 600));
            					}
HXLINE( 612)					this->tweenCamIn();
            				}
HXLINE( 606)				goto _hx_goto_17;
            			}
            			if (  (_hx_switch_4==HX_("monster",1a,54,b0,b8)) ){
HXLINE( 617)				 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 617)				_g->set_y((_g->y + 100));
HXDLIN( 617)				goto _hx_goto_17;
            			}
            			if (  (_hx_switch_4==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE( 619)				 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 619)				_g->set_y((_g->y + 130));
HXDLIN( 619)				goto _hx_goto_17;
            			}
            			if (  (_hx_switch_4==HX_("parents-christmas",fe,94,c5,32)) ){
HXLINE( 626)				 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 626)				_g->set_x((_g->x - ( (Float)(500) )));
HXDLIN( 626)				goto _hx_goto_17;
            			}
            			if (  (_hx_switch_4==HX_("pico",e5,e8,57,4a)) ){
HXLINE( 623)				{
HXLINE( 623)					 ::flixel::math::FlxPoint _g = this->camPos;
HXDLIN( 623)					_g->set_x((_g->x + 600));
            				}
HXLINE( 624)				{
HXLINE( 624)					 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 624)					_g1->set_y((_g1->y + 300));
            				}
HXLINE( 622)				goto _hx_goto_17;
            			}
            			if (  (_hx_switch_4==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 628)				{
HXLINE( 628)					 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 628)					_g->set_x((_g->x + 150));
            				}
HXLINE( 629)				{
HXLINE( 629)					 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 629)					_g1->set_y((_g1->y + 360));
            				}
HXLINE( 630)				 ::flixel::math::FlxPoint _hx_tmp = this->camPos;
HXDLIN( 630)				Float _hx_tmp1 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 630)				_hx_tmp->set(_hx_tmp1,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 627)				goto _hx_goto_17;
            			}
            			if (  (_hx_switch_4==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 632)				{
HXLINE( 632)					 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 632)					_g->set_x((_g->x + 150));
            				}
HXLINE( 633)				{
HXLINE( 633)					 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 633)					_g1->set_y((_g1->y + 360));
            				}
HXLINE( 634)				 ::flixel::math::FlxPoint _hx_tmp = this->camPos;
HXDLIN( 634)				Float _hx_tmp1 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 634)				_hx_tmp->set(_hx_tmp1,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 631)				goto _hx_goto_17;
            			}
            			if (  (_hx_switch_4==HX_("spirit",31,bb,a9,bd)) ){
HXLINE( 636)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 639)					if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 641)						 ::flixel::addons::effects::FlxTrail evilTrail =  ::flixel::addons::effects::FlxTrail_obj::__alloc( HX_CTX ,::PlayState_obj::dad,null(),4,24,((Float)0.3),((Float)0.069));
HXLINE( 644)						this->add(evilTrail);
            					}
            				}
HXLINE( 636)				goto _hx_goto_17;
            			}
            			if (  (_hx_switch_4==HX_("spooky",eb,bd,9e,c1)) ){
HXLINE( 615)				 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 615)				_g->set_y((_g->y + 200));
HXDLIN( 615)				goto _hx_goto_17;
            			}
            			_hx_goto_17:;
HXLINE( 661)			if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 662)				::String _hx_switch_5 = ::PlayState_obj::Stage->curStage;
            				if (  (_hx_switch_5==HX_("basement",2f,0a,ce,11)) ){
HXLINE( 689)					::PlayState_obj::dad->setPosition(((Float)-431.9),((Float)-42.5));
HXLINE( 690)					::PlayState_obj::boyfriend->setPosition(((Float)1014.85),((Float)292.55));
HXLINE( 691)					::PlayState_obj::gf->set_visible(false);
HXLINE( 688)					goto _hx_goto_18;
            				}
            				if (  (_hx_switch_5==HX_("cave-thing",ae,5d,16,1d)) ){
HXLINE( 693)					::PlayState_obj::dad->setPosition(((Float)-736.15),((Float)-94.7));
HXLINE( 694)					::PlayState_obj::boyfriend->setPosition(((Float)1097.75),((Float)305.45));
HXLINE( 695)					::PlayState_obj::gf->set_visible(false);
HXLINE( 692)					goto _hx_goto_18;
            				}
            				if (  (_hx_switch_5==HX_("finale",2f,28,79,86)) ){
HXLINE( 697)					::PlayState_obj::dad->setPosition(((Float)-737.9),-94);
HXLINE( 698)					::PlayState_obj::boyfriend->setPosition(((Float)1017.85),((Float)457.45));
HXLINE( 699)					::PlayState_obj::gf->set_visible(false);
HXLINE( 696)					goto _hx_goto_18;
            				}
            				if (  (_hx_switch_5==HX_("limo",1f,17,b3,47)) ){
HXLINE( 665)					{
HXLINE( 665)						 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 665)						_g->set_y((_g->y - ( (Float)(220) )));
            					}
HXLINE( 666)					{
HXLINE( 666)						 ::Boyfriend _g1 = ::PlayState_obj::boyfriend;
HXDLIN( 666)						_g1->set_x((_g1->x + 260));
            					}
HXLINE( 667)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 669)						this->resetFastCar();
            					}
HXLINE( 664)					goto _hx_goto_18;
            				}
            				if (  (_hx_switch_5==HX_("mall",d4,3a,56,48)) ){
HXLINE( 673)					 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 673)					_g->set_x((_g->x + 200));
HXDLIN( 673)					goto _hx_goto_18;
            				}
            				if (  (_hx_switch_5==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 676)					{
HXLINE( 676)						 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 676)						_g->set_x((_g->x + 320));
            					}
HXLINE( 677)					{
HXLINE( 677)						 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 677)						_g1->set_y((_g1->y - ( (Float)(80) )));
            					}
HXLINE( 675)					goto _hx_goto_18;
            				}
            				if (  (_hx_switch_5==HX_("outside",25,8d,5e,e6)) ){
HXLINE( 701)					::PlayState_obj::dad->setPosition(((Float)-706.65),((Float)315.25));
HXLINE( 702)					::PlayState_obj::boyfriend->setPosition(((Float)977.35),((Float)630.1));
HXLINE( 703)					::PlayState_obj::gf->set_visible(false);
HXLINE( 700)					goto _hx_goto_18;
            				}
            				if (  (_hx_switch_5==HX_("school",74,b8,c8,40)) ){
HXLINE( 679)					{
HXLINE( 679)						 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 679)						_g->set_x((_g->x + 200));
            					}
HXLINE( 680)					{
HXLINE( 680)						 ::Boyfriend _g1 = ::PlayState_obj::boyfriend;
HXDLIN( 680)						_g1->set_y((_g1->y + 220));
            					}
HXLINE( 681)					{
HXLINE( 681)						 ::Character _g2 = ::PlayState_obj::gf;
HXDLIN( 681)						_g2->set_x((_g2->x + 180));
            					}
HXLINE( 682)					{
HXLINE( 682)						 ::Character _g3 = ::PlayState_obj::gf;
HXDLIN( 682)						_g3->set_y((_g3->y + 300));
            					}
HXLINE( 678)					goto _hx_goto_18;
            				}
            				if (  (_hx_switch_5==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 684)					{
HXLINE( 684)						 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 684)						_g->set_x((_g->x + 200));
            					}
HXLINE( 685)					{
HXLINE( 685)						 ::Boyfriend _g1 = ::PlayState_obj::boyfriend;
HXDLIN( 685)						_g1->set_y((_g1->y + 220));
            					}
HXLINE( 686)					{
HXLINE( 686)						 ::Character _g2 = ::PlayState_obj::gf;
HXDLIN( 686)						_g2->set_x((_g2->x + 180));
            					}
HXLINE( 687)					{
HXLINE( 687)						 ::Character _g3 = ::PlayState_obj::gf;
HXDLIN( 687)						_g3->set_y((_g3->y + 300));
            					}
HXLINE( 683)					goto _hx_goto_18;
            				}
            				_hx_goto_18:;
            			}
            		}
            		else {
HXLINE( 708)			{
HXLINE( 708)				int _g = 0;
HXDLIN( 708)				::cpp::VirtualArray _g1 = ::PlayState_obj::Stage->toAdd;
HXDLIN( 708)				while((_g < _g1->get_length())){
HXLINE( 708)					 ::Dynamic i = _g1->__get(_g);
HXDLIN( 708)					_g = (_g + 1);
HXLINE( 710)					this->add(i);
            				}
            			}
HXLINE( 712)			{
HXLINE( 712)				int _g5_current = 0;
HXDLIN( 712)				::Array< ::Dynamic> _g5_array = ::PlayState_obj::Stage->layInFront;
HXDLIN( 712)				while((_g5_current < _g5_array->length)){
HXLINE( 712)					::Array< ::Dynamic> _g6_value = _g5_array->__get(_g5_current).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 712)					_g5_current = (_g5_current + 1);
HXDLIN( 712)					int _g6_key = (_g5_current - 1);
HXDLIN( 712)					int index = _g6_key;
HXDLIN( 712)					::Array< ::Dynamic> array = _g6_value;
HXLINE( 714)					switch((int)(index)){
            						case (int)0: {
HXLINE( 717)							this->add(::PlayState_obj::gf);
HXLINE( 718)							{
HXLINE( 718)								int _g = 0;
HXDLIN( 718)								while((_g < array->length)){
HXLINE( 718)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 718)									_g = (_g + 1);
HXLINE( 719)									this->add(bg);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 721)							this->add(::PlayState_obj::dad);
HXLINE( 722)							{
HXLINE( 722)								int _g = 0;
HXDLIN( 722)								while((_g < array->length)){
HXLINE( 722)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 722)									_g = (_g + 1);
HXLINE( 723)									this->add(bg);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 725)							this->add(::PlayState_obj::boyfriend);
HXLINE( 726)							{
HXLINE( 726)								int _g = 0;
HXDLIN( 726)								while((_g < array->length)){
HXLINE( 726)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 726)									_g = (_g + 1);
HXLINE( 727)									this->add(bg);
            								}
            							}
            						}
            						break;
            					}
            				}
            			}
HXLINE( 731)			Float _hx_tmp = ::PlayState_obj::dad->getGraphicMidpoint(null())->x;
HXDLIN( 731)			this->camPos =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 733)			::String _hx_switch_6 = ::PlayState_obj::dad->curCharacter;
            			if (  (_hx_switch_6==HX_("dad",47,36,4c,00)) ){
HXLINE( 744)				 ::flixel::math::FlxPoint _g = this->camPos;
HXDLIN( 744)				_g->set_x((_g->x + 400));
HXDLIN( 744)				goto _hx_goto_24;
            			}
            			if (  (_hx_switch_6==HX_("gf",1f,5a,00,00)) ){
HXLINE( 736)				::PlayState_obj::dad->setPosition(::PlayState_obj::gf->x,::PlayState_obj::gf->y);
HXLINE( 737)				::PlayState_obj::gf->set_visible(false);
HXLINE( 738)				if (::PlayState_obj::isStoryMode) {
HXLINE( 740)					{
HXLINE( 740)						 ::flixel::math::FlxPoint _g = this->camPos;
HXDLIN( 740)						_g->set_x((_g->x + 600));
            					}
HXLINE( 741)					this->tweenCamIn();
            				}
HXLINE( 735)				goto _hx_goto_24;
            			}
            			if (  (_hx_switch_6==HX_("pico",e5,e8,57,4a)) ){
HXLINE( 746)				 ::flixel::math::FlxPoint _g = this->camPos;
HXDLIN( 746)				_g->set_x((_g->x + 600));
HXDLIN( 746)				goto _hx_goto_24;
            			}
            			if (  (_hx_switch_6==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 748)				 ::flixel::math::FlxPoint _hx_tmp = this->camPos;
HXDLIN( 748)				Float _hx_tmp1 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 748)				_hx_tmp->set(_hx_tmp1,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXDLIN( 748)				goto _hx_goto_24;
            			}
            			if (  (_hx_switch_6==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 750)				 ::flixel::math::FlxPoint _hx_tmp = this->camPos;
HXDLIN( 750)				Float _hx_tmp1 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 750)				_hx_tmp->set(_hx_tmp1,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXDLIN( 750)				goto _hx_goto_24;
            			}
            			if (  (_hx_switch_6==HX_("spirit",31,bb,a9,bd)) ){
HXLINE( 752)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 755)					if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 757)						 ::flixel::addons::effects::FlxTrail evilTrail =  ::flixel::addons::effects::FlxTrail_obj::__alloc( HX_CTX ,::PlayState_obj::dad,null(),4,24,((Float)0.3),((Float)0.069));
HXLINE( 760)						this->add(evilTrail);
            					}
            				}
HXLINE( 764)				 ::flixel::math::FlxPoint _hx_tmp = this->camPos;
HXDLIN( 764)				Float _hx_tmp1 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 764)				_hx_tmp->set(_hx_tmp1,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 751)				goto _hx_goto_24;
            			}
            			_hx_goto_24:;
            		}
HXLINE( 768)		if (::PlayState_obj::loadRep) {
HXLINE( 774)			::PlayStateChangeables_obj::useDownscroll = ( (bool)(::PlayState_obj::rep->replay->__Field(HX_("isDownscroll",79,6e,f3,21),::hx::paccDynamic)) );
HXLINE( 775)			::PlayStateChangeables_obj::safeFrames = ( (int)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) );
HXLINE( 776)			::PlayStateChangeables_obj::botPlay = true;
            		}
HXLINE( 783)		 ::DialogueBox doof = null();
HXLINE( 785)		if (::PlayState_obj::isStoryMode) {
HXLINE( 787)			doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,this->dialogue);
HXLINE( 790)			doof->scrollFactor->set(null(),null());
HXLINE( 791)			doof->finishThing = this->startCountdown_dyn();
            		}
HXLINE( 794)		if (!(::PlayState_obj::isStoryMode)) {
HXLINE( 796)			Float firstNoteTime = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 797)			bool playerTurn = false;
HXLINE( 798)			{
HXLINE( 798)				int _g3_current = 0;
HXDLIN( 798)				::Array< ::Dynamic> _g3_array = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN( 798)				while((_g3_current < _g3_array->length)){
HXLINE( 798)					 ::Dynamic _g4_value = _g3_array->__get(_g3_current);
HXDLIN( 798)					_g3_current = (_g3_current + 1);
HXDLIN( 798)					int _g4_key = (_g3_current - 1);
HXDLIN( 798)					int index = _g4_key;
HXDLIN( 798)					 ::Dynamic section = _g4_value;
HXLINE( 800)					bool _hx_tmp;
HXDLIN( 800)					if ((( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length > 0)) {
HXLINE( 800)						_hx_tmp = !(::PlayState_obj::isSM);
            					}
            					else {
HXLINE( 800)						_hx_tmp = false;
            					}
HXDLIN( 800)					if (_hx_tmp) {
HXLINE( 802)						if (::hx::IsGreater( section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),5000 )) {
HXLINE( 804)							this->needSkip = true;
HXLINE( 805)							this->skipTo = ( (Float)(section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) );
            						}
HXLINE( 807)						goto _hx_goto_25;
            					}
            					else {
HXLINE( 809)						if (::PlayState_obj::isSM) {
HXLINE( 811)							{
HXLINE( 811)								int _g = 0;
HXDLIN( 811)								::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 811)								while((_g < _g1->length)){
HXLINE( 811)									::cpp::VirtualArray note = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN( 811)									_g = (_g + 1);
HXLINE( 813)									if (::hx::IsLess( note->__get(0),firstNoteTime )) {
HXLINE( 815)										if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 817)											firstNoteTime = ( (Float)(note->__get(0)) );
HXLINE( 818)											if (::hx::IsGreater( note->__get(1),3 )) {
HXLINE( 819)												playerTurn = true;
            											}
            											else {
HXLINE( 821)												playerTurn = false;
            											}
            										}
            										else {
HXLINE( 823)											if (::hx::IsGreater( note->__get(1),3 )) {
HXLINE( 825)												firstNoteTime = ( (Float)(note->__get(0)) );
            											}
            										}
            									}
            								}
            							}
HXLINE( 829)							if (((index + 1) == ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length)) {
HXLINE( 831)								Float timing;
HXDLIN( 831)								bool timing1;
HXDLIN( 831)								if (!(playerTurn)) {
HXLINE( 831)									timing1 = !(::PlayStateChangeables_obj::Optimize);
            								}
            								else {
HXLINE( 831)									timing1 = false;
            								}
HXDLIN( 831)								if (timing1) {
HXLINE( 831)									timing = firstNoteTime;
            								}
            								else {
HXLINE( 831)									timing = ::TimingStruct_obj::getTimeFromBeat((::TimingStruct_obj::getBeatFromTime(firstNoteTime) - ( (Float)(4) )));
            								}
HXLINE( 833)								if ((timing > 5000)) {
HXLINE( 835)									this->needSkip = true;
HXLINE( 836)									this->skipTo = timing;
            								}
            							}
            						}
            					}
            				}
            				_hx_goto_25:;
            			}
            		}
HXLINE( 843)		::Conductor_obj::songPosition = ( (Float)(-5000) );
HXLINE( 844)		::Conductor_obj::rawPosition = ::Conductor_obj::songPosition;
HXLINE( 846)		this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 847)		this->strumLine->scrollFactor->set(null(),null());
HXLINE( 849)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 850)			this->strumLine->set_y(( (Float)((::flixel::FlxG_obj::height - 165)) ));
            		}
HXLINE( 852)		::PlayState_obj::strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 853)		this->add(::PlayState_obj::strumLineNotes);
HXLINE( 854)		this->add(this->grpNoteSplashes);
HXLINE( 856)		::PlayState_obj::playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 857)		::PlayState_obj::cpuStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 859)		this->generateStaticArrows(0);
HXLINE( 860)		this->generateStaticArrows(1);
HXLINE( 864)		bool _hx_tmp9 = ::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) );
HXLINE( 869)		this->generateSong(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 873)		::String songLowercase1 = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXLINE( 874)		::String _hx_switch_7 = songLowercase1;
            		if (  (_hx_switch_7==HX_("dad-battle",be,d5,66,07)) ){
HXLINE( 877)			songLowercase1 = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN( 877)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_7==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE( 881)			songLowercase1 = HX_("milf",d6,4c,5c,48);
HXDLIN( 881)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_7==HX_("philly-nice",22,2e,26,44)) ){
HXLINE( 879)			songLowercase1 = HX_("philly",28,77,5e,ef);
HXDLIN( 879)			goto _hx_goto_27;
            		}
            		_hx_goto_27:;
HXLINE( 883)		if (this->executeModchart) {
HXLINE( 885)			::PlayState_obj::luaModchart = ::ModchartState_obj::createModchartState(::PlayState_obj::isStoryMode);
HXLINE( 886)			::PlayState_obj::luaModchart->executeState(HX_("start",62,74,0b,84),::cpp::VirtualArray_obj::__new(1)->init(0,songLowercase1));
            		}
HXLINE( 890)		if (this->executeModchart) {
HXLINE( 892)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camGame,HX_("camGame",a1,47,50,cf))->Register(::ModchartState_obj::lua);
HXLINE( 893)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camHUD,HX_("camHUD",e8,2b,76,b7))->Register(::ModchartState_obj::lua);
HXLINE( 894)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camSustains,HX_("camSustains",9f,69,a2,15))->Register(::ModchartState_obj::lua);
HXLINE( 895)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camSustains,HX_("camNotes",b2,c1,02,a8))->Register(::ModchartState_obj::lua);
HXLINE( 896)			 ::LuaCharacter_obj::__alloc( HX_CTX ,::PlayState_obj::dad,HX_("dad",47,36,4c,00))->Register(::ModchartState_obj::lua);
HXLINE( 897)			 ::LuaCharacter_obj::__alloc( HX_CTX ,::PlayState_obj::gf,HX_("gf",1f,5a,00,00))->Register(::ModchartState_obj::lua);
HXLINE( 898)			 ::LuaCharacter_obj::__alloc( HX_CTX ,::PlayState_obj::boyfriend,HX_("boyfriend",6a,29,b8,e6))->Register(::ModchartState_obj::lua);
            		}
HXLINE( 900)		int index = 0;
HXLINE( 902)		if ((::PlayState_obj::startTime != 0)) {
HXLINE( 904)			::Array< ::Dynamic> toBeRemoved = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 905)			{
HXLINE( 905)				int _g = 0;
HXDLIN( 905)				int _g1 = this->notes->members->get_length();
HXDLIN( 905)				while((_g < _g1)){
HXLINE( 905)					_g = (_g + 1);
HXDLIN( 905)					int i = (_g - 1);
HXLINE( 907)					 ::Note dunceNote = Dynamic( this->notes->members->__get(i)).StaticCast<  ::Note >();
HXLINE( 909)					if (((dunceNote->strumTime - ::PlayState_obj::startTime) <= 0)) {
HXLINE( 910)						toBeRemoved->push(dunceNote);
            					}
            					else {
HXLINE( 913)						if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 915)							if (dunceNote->mustPress) {
HXLINE( 916)								Float _hx_tmp = (Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(dunceNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y * (::PlayState_obj::startTime - dunceNote->strumTime));
HXLINE( 917)								Float _hx_tmp1;
HXDLIN( 917)								if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE( 917)									_hx_tmp1 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            								}
            								else {
HXLINE( 917)									_hx_tmp1 = ::PlayStateChangeables_obj::scrollSpeed;
            								}
HXLINE( 916)								Float _hx_tmp2 = (_hx_tmp * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp1,2));
HXDLIN( 916)								dunceNote->set_y((_hx_tmp2 - ( (Float)(dunceNote->noteYOff) )));
            							}
            							else {
HXLINE( 920)								Float _hx_tmp = (Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(dunceNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y * (::PlayState_obj::startTime - dunceNote->strumTime));
HXLINE( 921)								Float _hx_tmp1;
HXDLIN( 921)								if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE( 921)									_hx_tmp1 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            								}
            								else {
HXLINE( 921)									_hx_tmp1 = ::PlayStateChangeables_obj::scrollSpeed;
            								}
HXLINE( 920)								Float _hx_tmp2 = (_hx_tmp * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp1,2));
HXDLIN( 920)								dunceNote->set_y((_hx_tmp2 - ( (Float)(dunceNote->noteYOff) )));
            							}
            						}
            						else {
HXLINE( 926)							if (dunceNote->mustPress) {
HXLINE( 927)								Float _hx_tmp = (Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(dunceNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y * (::PlayState_obj::startTime - dunceNote->strumTime));
HXLINE( 928)								Float _hx_tmp1;
HXDLIN( 928)								if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE( 928)									_hx_tmp1 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            								}
            								else {
HXLINE( 928)									_hx_tmp1 = ::PlayStateChangeables_obj::scrollSpeed;
            								}
HXLINE( 927)								Float _hx_tmp2 = (_hx_tmp * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp1,2));
HXDLIN( 927)								dunceNote->set_y((_hx_tmp2 + dunceNote->noteYOff));
            							}
            							else {
HXLINE( 931)								Float _hx_tmp = (Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(dunceNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y * (::PlayState_obj::startTime - dunceNote->strumTime));
HXLINE( 932)								Float _hx_tmp1;
HXDLIN( 932)								if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE( 932)									_hx_tmp1 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            								}
            								else {
HXLINE( 932)									_hx_tmp1 = ::PlayStateChangeables_obj::scrollSpeed;
            								}
HXLINE( 931)								Float _hx_tmp2 = (_hx_tmp * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp1,2));
HXDLIN( 931)								dunceNote->set_y((_hx_tmp2 + dunceNote->noteYOff));
            							}
            						}
            					}
            				}
            			}
HXLINE( 938)			{
HXLINE( 938)				int _g2 = 0;
HXDLIN( 938)				while((_g2 < toBeRemoved->length)){
HXLINE( 938)					 ::Note i = toBeRemoved->__get(_g2).StaticCast<  ::Note >();
HXDLIN( 938)					_g2 = (_g2 + 1);
HXLINE( 939)					this->notes->members->remove(i);
            				}
            			}
            		}
HXLINE( 946)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 948)		this->camFollow->setPosition(this->camPos->x,this->camPos->y);
HXLINE( 950)		if (::hx::IsNotNull( ::PlayState_obj::prevCamFollow )) {
HXLINE( 952)			this->camFollow = ::PlayState_obj::prevCamFollow;
HXLINE( 953)			::PlayState_obj::prevCamFollow = null();
            		}
HXLINE( 956)		this->add(this->camFollow);
HXLINE( 958)		 ::flixel::FlxCamera _hx_tmp10 = ::flixel::FlxG_obj::camera;
HXDLIN( 958)		 ::flixel::FlxObject _hx_tmp11 = this->camFollow;
HXDLIN( 958)		_hx_tmp10->follow(_hx_tmp11,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),(((Float)0.04) * (( (Float)(30) ) / ::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->getFPS())));
HXLINE( 960)		::flixel::FlxG_obj::camera->set_zoom(::PlayState_obj::Stage->camZoom);
HXLINE( 961)		{
HXLINE( 961)			 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN( 961)			 ::flixel::math::FlxPoint point = this->camFollow->getPosition(null());
HXDLIN( 961)			_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN( 961)			if (point->_weak) {
HXLINE( 961)				point->put();
            			}
            		}
HXLINE( 963)		{
HXLINE( 963)			 ::flixel::math::FlxRect _this1 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 963)			_this1->x = ( (Float)(0) );
HXDLIN( 963)			_this1->y = ( (Float)(0) );
HXDLIN( 963)			_this1->width = ( (Float)(::flixel::FlxG_obj::width) );
HXDLIN( 963)			_this1->height = ( (Float)(::flixel::FlxG_obj::height) );
            		}
HXLINE( 965)		::flixel::FlxG_obj::fixedTimestep = false;
HXLINE( 967)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE( 969)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,10,null());
HXDLIN( 969)			::String library = null();
HXDLIN( 969)			::PlayState_obj::songPosBG = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 970)			if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 971)				::PlayState_obj::songPosBG->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            			}
HXLINE( 972)			::PlayState_obj::songPosBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 973)			::PlayState_obj::songPosBG->scrollFactor->set(null(),null());
HXLINE( 974)			this->add(::PlayState_obj::songPosBG);
HXLINE( 976)			Float _hx_tmp1 = (::PlayState_obj::songPosBG->x + 4);
HXDLIN( 976)			Float _hx_tmp2 = (::PlayState_obj::songPosBG->y + 4);
HXDLIN( 976)			int _hx_tmp3 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_width() - ( (Float)(8) )));
HXDLIN( 976)			int _hx_tmp4 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_height() - ( (Float)(8) )));
HXDLIN( 976)			::PlayState_obj::songPosBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp3,_hx_tmp4,::hx::ObjectPtr<OBJ_>(this),HX_("songPositionBar",d5,62,6e,a6),0,this->songLength,null());
HXLINE( 978)			::PlayState_obj::songPosBar->scrollFactor->set(null(),null());
HXLINE( 979)			::PlayState_obj::songPosBar->createFilledBar(-8355712,-16711936,null(),null());
HXLINE( 980)			this->add(::PlayState_obj::songPosBar);
HXLINE( 982)			Float songName = ::PlayState_obj::songPosBG->x;
HXDLIN( 982)			Float songName1 = (songName + (::PlayState_obj::songPosBG->get_width() / ( (Float)(2) )));
HXDLIN( 982)			 ::flixel::text::FlxText songName2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(songName1 - ( (Float)((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).length * 5)) )),::PlayState_obj::songPosBG->y,0,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),16,null());
HXLINE( 983)			if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 984)				 ::flixel::text::FlxText _g = songName2;
HXDLIN( 984)				_g->set_y((_g->y - ( (Float)(3) )));
            			}
HXLINE( 985)			songName2->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 986)			songName2->scrollFactor->set(null(),null());
HXLINE( 987)			this->add(songName2);
HXLINE( 988)			songName2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE( 991)		 ::flixel::FlxSprite _hx_tmp12 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)),null());
HXDLIN( 991)		::String library1 = null();
HXDLIN( 991)		this->healthBarBG = _hx_tmp12->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE( 992)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 993)			this->healthBarBG->set_y(( (Float)(50) ));
            		}
HXLINE( 994)		this->healthBarBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 995)		this->healthBarBG->scrollFactor->set(null(),null());
HXLINE( 996)		this->add(this->healthBarBG);
HXLINE( 998)		Float _hx_tmp13 = (this->healthBarBG->x + 4);
HXDLIN( 998)		Float _hx_tmp14 = (this->healthBarBG->y + 4);
HXDLIN( 998)		int _hx_tmp15 = ::Std_obj::_hx_int((this->healthBarBG->get_width() - ( (Float)(8) )));
HXDLIN( 998)		this->healthBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp13,_hx_tmp14,::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn(),_hx_tmp15,::Std_obj::_hx_int((this->healthBarBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("health",9c,28,06,fd),0,2,null());
HXLINE(1000)		this->healthBar->scrollFactor->set(null(),null());
HXLINE(1001)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("colour",4c,c8,86,c6),::hx::paccDynamic)) )) {
HXLINE(1003)			::String _hx_switch_8 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
            			if (  (_hx_switch_8==HX_("carl-phase-1",aa,d9,dd,da)) ||  (_hx_switch_8==HX_("carl-phase-2",ab,d9,dd,da)) ||  (_hx_switch_8==HX_("carl-phase-3",ac,d9,dd,da)) ){
HXLINE(1020)				this->healthBar->createFilledBar(-5216769,-16738364,null(),null());
HXDLIN(1020)				goto _hx_goto_30;
            			}
            			if (  (_hx_switch_8==HX_("gf",1f,5a,00,00)) ){
HXLINE(1006)				this->healthBar->createFilledBar(-65536,-16738364,null(),null());
HXDLIN(1006)				goto _hx_goto_30;
            			}
            			if (  (_hx_switch_8==HX_("monster",1a,54,b0,b8)) ||  (_hx_switch_8==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE(1012)				this->healthBar->createFilledBar(-664313,-16738364,null(),null());
HXDLIN(1012)				goto _hx_goto_30;
            			}
            			if (  (_hx_switch_8==HX_("dad",47,36,4c,00)) ||  (_hx_switch_8==HX_("mom-car",52,e6,f7,f6)) ||  (_hx_switch_8==HX_("parents-christmas",fe,94,c5,32)) ){
HXLINE(1008)				this->healthBar->createFilledBar(-10876939,-16738364,null(),null());
HXDLIN(1008)				goto _hx_goto_30;
            			}
            			if (  (_hx_switch_8==HX_("pico",e5,e8,57,4a)) ){
HXLINE(1014)				this->healthBar->createFilledBar(-11356908,-16738364,null(),null());
HXDLIN(1014)				goto _hx_goto_30;
            			}
            			if (  (_hx_switch_8==HX_("senpai",3c,df,8d,6b)) ||  (_hx_switch_8==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE(1016)				this->healthBar->createFilledBar(-561811,-16738364,null(),null());
HXDLIN(1016)				goto _hx_goto_30;
            			}
            			if (  (_hx_switch_8==HX_("spirit",31,bb,a9,bd)) ){
HXLINE(1018)				this->healthBar->createFilledBar(-5438203,-16738364,null(),null());
HXDLIN(1018)				goto _hx_goto_30;
            			}
            			if (  (_hx_switch_8==HX_("spooky",eb,bd,9e,c1)) ){
HXLINE(1010)				this->healthBar->createFilledBar(-688633,-16738364,null(),null());
HXDLIN(1010)				goto _hx_goto_30;
            			}
            			_hx_goto_30:;
            		}
            		else {
HXLINE(1024)			this->healthBar->createFilledBar(-65536,-10027213,null(),null());
            		}
HXLINE(1026)		this->add(this->healthBar);
HXLINE(1029)		Float _hx_tmp16 = (this->healthBarBG->y + 50);
HXLINE(1031)		::String _hx_tmp17 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE(1032)		::String _hx_tmp18;
HXDLIN(1032)		if ((::flixel::math::FlxMath_obj::roundDecimal(::PlayState_obj::songMultiplier,2) != ((Float)1.00))) {
HXLINE(1032)			_hx_tmp18 = ((HX_(" (",08,1c,00,00) + ::flixel::math::FlxMath_obj::roundDecimal(::PlayState_obj::songMultiplier,2)) + HX_("x)",b1,68,00,00));
            		}
            		else {
HXLINE(1032)			_hx_tmp18 = HX_("",00,00,00,00);
            		}
HXLINE(1029)		this->kadeEngineWatermark =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,4,_hx_tmp16,0,((((_hx_tmp17 + _hx_tmp18) + HX_(" - ",73,6f,18,00)) + ::CoolUtil_obj::difficultyFromInt(::PlayState_obj::storyDifficulty)) + HX_(" | V.2.0",18,22,23,b9)),16,null());
HXLINE(1036)		this->kadeEngineWatermark->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1037)		this->kadeEngineWatermark->scrollFactor->set(null(),null());
HXLINE(1038)		this->add(this->kadeEngineWatermark);
HXLINE(1040)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(1041)			this->kadeEngineWatermark->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            		}
HXLINE(1043)		this->scoreTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(235) )),(this->healthBarBG->y + 50),0,HX_("",00,00,00,00),20,null());
HXLINE(1045)		this->scoreTxt->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(1047)		this->originalX = this->scoreTxt->x;
HXLINE(1049)		this->scoreTxt->scrollFactor->set(null(),null());
HXLINE(1051)		this->scoreTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1053)		this->add(this->scoreTxt);
HXLINE(1055)		Float _hx_tmp19 = this->healthBarBG->x;
HXDLIN(1055)		Float _hx_tmp20 = ((_hx_tmp19 + (this->healthBarBG->get_width() / ( (Float)(2) ))) - ( (Float)(75) ));
HXDLIN(1055)		int _hx_tmp21;
HXDLIN(1055)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(1055)			_hx_tmp21 = 100;
            		}
            		else {
HXLINE(1055)			_hx_tmp21 = -100;
            		}
HXDLIN(1055)		this->replayTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp20,(this->healthBarBG->y + _hx_tmp21),0,HX_("REPLAY",27,93,04,b9),20,null());
HXLINE(1057)		this->replayTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),42,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1058)		this->replayTxt->set_borderSize(( (Float)(4) ));
HXLINE(1059)		this->replayTxt->set_borderQuality(( (Float)(2) ));
HXLINE(1060)		this->replayTxt->scrollFactor->set(null(),null());
HXLINE(1061)		if (::PlayState_obj::loadRep) {
HXLINE(1063)			this->add(this->replayTxt);
            		}
HXLINE(1066)		Float _hx_tmp22 = this->healthBarBG->x;
HXDLIN(1066)		Float _hx_tmp23 = ((_hx_tmp22 + (this->healthBarBG->get_width() / ( (Float)(2) ))) - ( (Float)(75) ));
HXDLIN(1066)		int _hx_tmp24;
HXDLIN(1066)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(1066)			_hx_tmp24 = 100;
            		}
            		else {
HXLINE(1066)			_hx_tmp24 = -100;
            		}
HXDLIN(1066)		this->botPlayState =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp23,(this->healthBarBG->y + _hx_tmp24),0,HX_("BOTPLAY",5b,cf,7d,e1),20,null());
HXLINE(1068)		this->botPlayState->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),42,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1069)		this->botPlayState->scrollFactor->set(null(),null());
HXLINE(1070)		this->botPlayState->set_borderSize(( (Float)(4) ));
HXLINE(1071)		this->botPlayState->set_borderQuality(( (Float)(2) ));
HXLINE(1072)		bool _hx_tmp25;
HXDLIN(1072)		if (::PlayStateChangeables_obj::botPlay) {
HXLINE(1072)			_hx_tmp25 = !(::PlayState_obj::loadRep);
            		}
            		else {
HXLINE(1072)			_hx_tmp25 = false;
            		}
HXDLIN(1072)		if (_hx_tmp25) {
HXLINE(1073)			this->add(this->botPlayState);
            		}
HXLINE(1075)		this->iconP1 =  ::HealthIcon_obj::__alloc( HX_CTX ,::PlayState_obj::boyfriend->curCharacter,true);
HXLINE(1076)		 ::HealthIcon _hx_tmp26 = this->iconP1;
HXDLIN(1076)		Float _hx_tmp27 = this->healthBar->y;
HXDLIN(1076)		_hx_tmp26->set_y((_hx_tmp27 - (this->iconP1->get_height() / ( (Float)(2) ))));
HXLINE(1077)		this->add(this->iconP1);
HXLINE(1079)		this->iconP2 =  ::HealthIcon_obj::__alloc( HX_CTX ,::PlayState_obj::dad->curCharacter,false);
HXLINE(1080)		 ::HealthIcon _hx_tmp28 = this->iconP2;
HXDLIN(1080)		Float _hx_tmp29 = this->healthBar->y;
HXDLIN(1080)		_hx_tmp28->set_y((_hx_tmp29 - (this->iconP2->get_height() / ( (Float)(2) ))));
HXLINE(1081)		this->add(this->iconP2);
HXLINE(1083)		this->grpNoteSplashes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1084)		::PlayState_obj::strumLineNotes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1085)		this->notes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1086)		this->healthBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1087)		this->healthBarBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1088)		this->iconP1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1089)		this->iconP2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1090)		this->scoreTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1091)		if (::PlayState_obj::isStoryMode) {
HXLINE(1092)			doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1093)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(1095)			::PlayState_obj::songPosBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1096)			::PlayState_obj::songPosBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1098)		this->kadeEngineWatermark->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1099)		if (::PlayState_obj::loadRep) {
HXLINE(1100)			this->replayTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1107)		this->startingSong = true;
HXLINE(1111)		if (::PlayState_obj::isStoryMode) {
HXLINE(1113)			::String _hx_switch_9 = ::StringTools_obj::replace(this->curSong,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
            			if (  (_hx_switch_9==HX_("crystalized",46,89,53,f2)) ){
HXLINE(1146)				this->CarlDialogue(doof);
HXDLIN(1146)				goto _hx_goto_31;
            			}
            			if (  (_hx_switch_9==HX_("dungeon",fa,68,99,a0)) ){
HXLINE(1144)				this->CarlDialogue(doof);
HXDLIN(1144)				goto _hx_goto_31;
            			}
            			if (  (_hx_switch_9==HX_("necromancipation",9c,e3,00,b3)) ){
HXLINE(1148)				this->CarlDialogue(doof);
HXDLIN(1148)				goto _hx_goto_31;
            			}
            			if (  (_hx_switch_9==HX_("raveyard",18,cb,f2,df)) ){
HXLINE(1150)				this->CarlDialogue(doof);
HXDLIN(1150)				goto _hx_goto_31;
            			}
            			if (  (_hx_switch_9==HX_("winter-horrorland",9d,39,f4,1e)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1138_create)
HXLINE(1138)							_gthis->startCountdown();
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1131_create)
HXLINE(1132)						_gthis->camHUD->set_visible(true);
HXLINE(1133)						_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1134)						::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("zoom",13,a3,f8,50),::PlayState_obj::Stage->camZoom)),((Float)2.5), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis)))));
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1122_create)
HXLINE(1123)					_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1124)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1124)					_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Turn_On",5f,e1,29,ad),null()),null(),null(),null(),null(),null());
HXLINE(1125)					_gthis->camFollow->set_y(( (Float)(-2050) ));
HXLINE(1126)					{
HXLINE(1126)						 ::flixel::FlxObject _g = _gthis->camFollow;
HXDLIN(1126)						_g->set_x((_g->x + 200));
            					}
HXLINE(1127)					{
HXLINE(1127)						 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN(1127)						 ::flixel::math::FlxPoint point = _gthis->camFollow->getPosition(null());
HXDLIN(1127)						_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN(1127)						if (point->_weak) {
HXLINE(1127)							point->put();
            						}
            					}
HXLINE(1128)					::flixel::FlxG_obj::camera->set_zoom(((Float)1.5));
HXLINE(1130)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_2(_gthis,blackScreen2)),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1116)				 ::flixel::FlxSprite blackScreen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(1116)				int blackScreen1 = ::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::width * 2)) ));
HXDLIN(1116)				 ::flixel::FlxSprite blackScreen2 = blackScreen->makeGraphic(blackScreen1,::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::height * 2)) )),-16777216,null(),null());
HXLINE(1117)				this->add(blackScreen2);
HXLINE(1118)				blackScreen2->scrollFactor->set(null(),null());
HXLINE(1119)				this->camHUD->set_visible(false);
HXLINE(1121)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_3(_gthis,blackScreen2)),null());
HXLINE(1115)				goto _hx_goto_31;
            			}
            			/* default */{
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer timer){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1153_create)
HXLINE(1153)					_gthis->startCountdown();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1152)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
            			_hx_goto_31:;
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer timer){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1160_create)
HXLINE(1160)				_gthis->startCountdown();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1159)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_4(_gthis)),null());
            		}
HXLINE(1164)		if (!(::PlayState_obj::loadRep)) {
HXLINE(1165)			::PlayState_obj::rep =  ::Replay_obj::__alloc( HX_CTX ,HX_("na",33,60,00,00));
            		}
HXLINE(1167)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->handleInput_dyn(),null(),null(),null());
HXLINE(1168)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->releaseInput_dyn(),null(),null(),null());
HXLINE(1169)		this->super::create();
            	}


void PlayState_obj::schoolIntro( ::DialogueBox dialogueBox){
            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,black1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1201_schoolIntro)
HXLINE(1202)			{
HXLINE(1202)				 ::flixel::FlxSprite _g = black1;
HXDLIN(1202)				_g->set_alpha((_g->alpha - ((Float)0.15)));
            			}
HXLINE(1204)			if ((black1->alpha > 0)) {
HXLINE(1206)				tmr->reset(((Float)0.3));
            			}
            			else {
HXLINE(1210)				if (::hx::IsNotNull( dialogueBox )) {
HXLINE(1212)					_gthis->inCutscene = true;
HXLINE(1214)					if ((::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
            						HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer swagTimer){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1219_schoolIntro)
HXLINE(1220)							{
HXLINE(1220)								 ::flixel::FlxSprite _g = senpaiEvil;
HXDLIN(1220)								_g->set_alpha((_g->alpha + ((Float)0.15)));
            							}
HXLINE(1221)							if ((senpaiEvil->alpha < 1)) {
HXLINE(1223)								swagTimer->reset(null());
            							}
            							else {
            								HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(0)
            								void _hx_run(){
            									HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::DialogueBox,dialogueBox) HXARGC(0)
            									void _hx_run(){
            										HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1234_schoolIntro)
HXLINE(1234)										_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            									}
            									HX_END_LOCAL_FUNC0((void))

            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1229_schoolIntro)
HXLINE(1230)									_gthis->remove(senpaiEvil,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1231)									_gthis->remove(red1,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1232)									::flixel::FlxG_obj::camera->fade(-1,((Float)0.01),true, ::Dynamic(new _hx_Closure_0(_gthis,dialogueBox)),true);
            								}
            								HX_END_LOCAL_FUNC0((void))

            								HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            								void _hx_run( ::flixel::util::FlxTimer deadTime){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1239_schoolIntro)
HXLINE(1239)									::flixel::FlxG_obj::camera->fade(-1,((Float)1.6),false,null(),null());
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(1227)								senpaiEvil->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1228)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1228)								_hx_tmp->play(::Paths_obj::sound(HX_("Senpai_Dies",56,a2,b9,ec),null()),1,false,null(),true, ::Dynamic(new _hx_Closure_1(_gthis,dialogueBox,red1,senpaiEvil)));
HXLINE(1237)								 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)3.2), ::Dynamic(new _hx_Closure_2()),null());
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1216)						_gthis->add(senpaiEvil).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1217)						senpaiEvil->set_alpha(( (Float)(0) ));
HXLINE(1218)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_3(_gthis,dialogueBox,red1,senpaiEvil)),null());
            					}
            					else {
HXLINE(1246)						_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            				else {
HXLINE(1250)					_gthis->startCountdown();
            				}
HXLINE(1252)				_gthis->remove(black1,null()).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1173_schoolIntro)
HXLINE(1172)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1174)		 ::flixel::FlxSprite black =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1174)		 ::flixel::FlxSprite black1 = black->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-16777216,null(),null());
HXLINE(1175)		black1->scrollFactor->set(null(),null());
HXLINE(1176)		this->add(black1);
HXLINE(1178)		 ::flixel::FlxSprite red =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1178)		 ::flixel::FlxSprite red1 = red->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-58575,null(),null());
HXLINE(1179)		red1->scrollFactor->set(null(),null());
HXLINE(1181)		 ::flixel::FlxSprite senpaiEvil =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(1182)		 ::flixel::FlxSprite senpaiEvil1 = senpaiEvil;
HXDLIN(1182)		::String library = null();
HXDLIN(1182)		bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN(1182)		::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/senpaiCrazy",d1,d1,90,fa)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(1182)		senpaiEvil1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/senpaiCrazy",d1,d1,90,fa)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE(1183)		senpaiEvil->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Senpai Pre Explosion",54,71,6e,81),24,false,null(),null());
HXLINE(1184)		 ::flixel::FlxSprite senpaiEvil2 = senpaiEvil;
HXDLIN(1184)		senpaiEvil2->setGraphicSize(::Std_obj::_hx_int((senpaiEvil->get_width() * ( (Float)(6) ))),null());
HXLINE(1185)		senpaiEvil->scrollFactor->set(null(),null());
HXLINE(1186)		senpaiEvil->updateHitbox();
HXLINE(1187)		senpaiEvil->screenCenter(null());
HXLINE(1189)		bool _hx_tmp1;
HXDLIN(1189)		if ((::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase() != HX_("roses",04,6c,64,ed))) {
HXLINE(1189)			_hx_tmp1 = (::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase() == HX_("thorns",9c,bf,c7,8c));
            		}
            		else {
HXLINE(1189)			_hx_tmp1 = true;
            		}
HXDLIN(1189)		if (_hx_tmp1) {
HXLINE(1192)			this->remove(black1,null());
HXLINE(1194)			if ((::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
HXLINE(1196)				this->add(red1);
            			}
            		}
HXLINE(1200)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_4(_gthis,dialogueBox,red1,black1,senpaiEvil)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,schoolIntro,(void))

void PlayState_obj::CarlDialogue( ::DialogueBox dialogueBox){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::DialogueBox,dialogueBox) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1262_CarlDialogue)
HXLINE(1262)			if (::hx::IsNotNull( dialogueBox )) {
HXLINE(1264)				_gthis->inCutscene = true;
HXLINE(1265)				_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1266)				{
HXLINE(1266)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1266)					_this->cleanup(_this->autoDestroy,true);
            				}
            			}
            			else {
HXLINE(1269)				_gthis->startCountdown();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1258_CarlDialogue)
HXLINE(1257)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1259)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_0(_gthis,dialogueBox)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,CarlDialogue,(void))

void PlayState_obj::startCountdown(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis,::Array< int >,swagCounter) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1300_startCountdown)
HXLINE(1302)			bool _hx_tmp;
HXDLIN(1302)			if (_gthis->allowedToHeadbang) {
HXLINE(1302)				_hx_tmp = (::hx::Mod(swagCounter->__get(0),_gthis->gfSpeed) == 0);
            			}
            			else {
HXLINE(1302)				_hx_tmp = false;
            			}
HXDLIN(1302)			if (_hx_tmp) {
HXLINE(1303)				::PlayState_obj::gf->dance(null(),null());
            			}
HXLINE(1304)			if ((::hx::Mod(swagCounter->__get(0),_gthis->idleBeat) == 0)) {
HXLINE(1306)				bool _hx_tmp;
HXDLIN(1306)				if (_gthis->idleToBeat) {
HXLINE(1306)					_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            				}
            				else {
HXLINE(1306)					_hx_tmp = false;
            				}
HXDLIN(1306)				if (_hx_tmp) {
HXLINE(1307)					::PlayState_obj::boyfriend->dance(_gthis->forcedToIdle,null());
            				}
HXLINE(1308)				bool _hx_tmp1;
HXDLIN(1308)				if (_gthis->idleToBeat) {
HXLINE(1308)					_hx_tmp1 = !(::StringTools_obj::startsWith(::PlayState_obj::dad->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            				}
            				else {
HXLINE(1308)					_hx_tmp1 = false;
            				}
HXDLIN(1308)				if (_hx_tmp1) {
HXLINE(1309)					::PlayState_obj::dad->dance(_gthis->forcedToIdle,null());
            				}
            			}
            			else {
HXLINE(1311)				bool _hx_tmp;
HXDLIN(1311)				bool _hx_tmp1;
HXDLIN(1311)				if ((::PlayState_obj::dad->curCharacter != HX_("spooky",eb,bd,9e,c1))) {
HXLINE(1311)					_hx_tmp1 = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            				}
            				else {
HXLINE(1311)					_hx_tmp1 = true;
            				}
HXDLIN(1311)				if (_hx_tmp1) {
HXLINE(1311)					_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::dad->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            				}
            				else {
HXLINE(1311)					_hx_tmp = false;
            				}
HXDLIN(1311)				if (_hx_tmp) {
HXLINE(1312)					::PlayState_obj::dad->dance(null(),null());
            				}
            			}
HXLINE(1314)			 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1315)			introAssets->set(HX_("default",c1,d8,c3,9b),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_47,3));
HXLINE(1316)			introAssets->set(HX_("pixel",86,c6,a3,c2),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_48,3));
HXLINE(1318)			::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(HX_("default",c1,d8,c3,9b))) );
HXLINE(1319)			::String week6Bullshit = null();
HXLINE(1321)			if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1323)				introAlts = ( (::Array< ::String >)(introAssets->get(HX_("pixel",86,c6,a3,c2))) );
HXLINE(1324)				_gthis->altSuffix = HX_("-pixel",39,03,b3,c0);
HXLINE(1325)				week6Bullshit = HX_("week6",c2,95,be,c7);
            			}
HXLINE(1328)			switch((int)(swagCounter->__get(0))){
            				case (int)0: {
HXLINE(1332)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1332)					_hx_tmp->play(::Paths_obj::sound((HX_("intro3",47,54,90,9e) + _gthis->altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)1: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,ready1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1347_startCountdown)
HXLINE(1347)						ready1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1334)					 ::flixel::FlxSprite ready =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1334)					 ::flixel::FlxSprite ready1 = ready->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),week6Bullshit),null(),null(),null(),null(),null());
HXLINE(1335)					ready1->scrollFactor->set(null(),null());
HXLINE(1336)					ready1->updateHitbox();
HXLINE(1338)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1339)						 ::flixel::FlxSprite ready = ready1;
HXDLIN(1339)						Float _hx_tmp = ready1->get_width();
HXDLIN(1339)						ready->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1341)					ready1->screenCenter(null());
HXLINE(1342)					_gthis->add(ready1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1343)					 ::flixel::FlxSprite ready2 = ready1;
HXDLIN(1343)					 ::flixel::FlxSprite _g = ready1;
HXDLIN(1343)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1343)					::flixel::tweens::FlxTween_obj::tween(ready2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(ready1)))));
HXLINE(1350)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1350)					_hx_tmp1->play(::Paths_obj::sound((HX_("intro2",46,54,90,9e) + _gthis->altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)2: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,set1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1364_startCountdown)
HXLINE(1364)						set1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1352)					 ::flixel::FlxSprite set =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1352)					 ::flixel::FlxSprite set1 = set->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),week6Bullshit),null(),null(),null(),null(),null());
HXLINE(1353)					set1->scrollFactor->set(null(),null());
HXLINE(1355)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1356)						 ::flixel::FlxSprite set = set1;
HXDLIN(1356)						Float _hx_tmp = set1->get_width();
HXDLIN(1356)						set->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1358)					set1->screenCenter(null());
HXLINE(1359)					_gthis->add(set1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1360)					 ::flixel::FlxSprite set2 = set1;
HXDLIN(1360)					 ::flixel::FlxSprite _g = set1;
HXDLIN(1360)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1360)					::flixel::tweens::FlxTween_obj::tween(set2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(set1)))));
HXLINE(1367)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1367)					_hx_tmp1->play(::Paths_obj::sound((HX_("intro1",45,54,90,9e) + _gthis->altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)3: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::flixel::FlxSprite,go1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1383_startCountdown)
HXLINE(1383)						go1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1369)					 ::flixel::FlxSprite go =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1369)					 ::flixel::FlxSprite go1 = go->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),week6Bullshit),null(),null(),null(),null(),null());
HXLINE(1370)					go1->scrollFactor->set(null(),null());
HXLINE(1372)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1373)						 ::flixel::FlxSprite go = go1;
HXDLIN(1373)						Float _hx_tmp = go1->get_width();
HXDLIN(1373)						go->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1375)					go1->updateHitbox();
HXLINE(1377)					go1->screenCenter(null());
HXLINE(1378)					_gthis->add(go1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1379)					 ::flixel::FlxSprite go2 = go1;
HXDLIN(1379)					 ::flixel::FlxSprite _g = go1;
HXDLIN(1379)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1379)					::flixel::tweens::FlxTween_obj::tween(go2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(go1)))));
HXLINE(1386)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1386)					_hx_tmp1->play(::Paths_obj::sound((HX_("introGo",b4,7b,b9,1f) + _gthis->altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            			}
HXLINE(1389)			::Array< int > swagCounter1 = swagCounter;
HXDLIN(1389)			int _hx_tmp1 = 0;
HXDLIN(1389)			swagCounter1[_hx_tmp1] = (swagCounter1->__get(_hx_tmp1) + 1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1283_startCountdown)
HXLINE(1282)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1284)		this->inCutscene = false;
HXLINE(1286)		this->appearStaticArrows();
HXLINE(1292)		this->talking = false;
HXLINE(1293)		this->startedCountdown = true;
HXLINE(1294)		::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE(1295)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(1295)		::Conductor_obj::songPosition = (::Conductor_obj::songPosition - (::Conductor_obj::crochet * ( (Float)(5) )));
HXLINE(1297)		::Array< int > swagCounter = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_53,1);
HXLINE(1299)		 ::flixel::util::FlxTimer _hx_tmp1 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(1299)		this->startTimer = _hx_tmp1->start((::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_3(_gthis,swagCounter)),4);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startCountdown,(void))

::String PlayState_obj::getKey(int charCode){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1398_getKey)
HXLINE(1399)		{
HXLINE(1399)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap);
HXDLIN(1399)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1399)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(1399)				::String key = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN(1399)				int value = ( (int)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE(1401)				if ((charCode == value)) {
HXLINE(1402)					return key;
            				}
            			}
            		}
HXLINE(1404)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getKey,return )

void PlayState_obj::releaseInput( ::openfl::events::KeyboardEvent evt){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1410_releaseInput)
HXLINE(1412)		::String key = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(evt->keyCode);
HXLINE(1414)		::Array< ::String > binds = ::Array_obj< ::String >::__new(4)->init(0, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic)))->init(1, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic)))->init(2, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic)))->init(3, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic)));
HXLINE(1421)		int data = -1;
HXLINE(1423)		switch((int)(evt->keyCode)){
            			case (int)37: {
HXLINE(1426)				data = 0;
            			}
            			break;
            			case (int)38: {
HXLINE(1430)				data = 2;
            			}
            			break;
            			case (int)39: {
HXLINE(1432)				data = 3;
            			}
            			break;
            			case (int)40: {
HXLINE(1428)				data = 1;
            			}
            			break;
            		}
HXLINE(1435)		{
HXLINE(1435)			int _g = 0;
HXDLIN(1435)			int _g1 = binds->length;
HXDLIN(1435)			while((_g < _g1)){
HXLINE(1435)				_g = (_g + 1);
HXDLIN(1435)				int i = (_g - 1);
HXLINE(1437)				::String _hx_tmp = binds->__get(i).toLowerCase();
HXDLIN(1437)				if ((_hx_tmp == key.toLowerCase())) {
HXLINE(1438)					data = i;
            				}
            			}
            		}
HXLINE(1441)		if ((data == -1)) {
HXLINE(1442)			return;
            		}
HXLINE(1444)		this->keys[data] = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,releaseInput,(void))

void PlayState_obj::handleInput( ::openfl::events::KeyboardEvent evt){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1508_handleInput)
HXLINE(1508)			bool _hx_tmp;
HXDLIN(1508)			bool _hx_tmp1;
HXDLIN(1508)			if (daNote->canBeHit) {
HXLINE(1508)				_hx_tmp1 = daNote->mustPress;
            			}
            			else {
HXLINE(1508)				_hx_tmp1 = false;
            			}
HXDLIN(1508)			if (_hx_tmp1) {
HXLINE(1508)				_hx_tmp = !(daNote->wasGoodHit);
            			}
            			else {
HXLINE(1508)				_hx_tmp = false;
            			}
HXDLIN(1508)			if (_hx_tmp) {
HXLINE(1509)				_gthis->closestNotes->push(daNote);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		int _hx_run( ::Note a, ::Note b){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1512_handleInput)
HXLINE(1512)			return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1451_handleInput)
HXLINE(1450)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1453)		bool _hx_tmp;
HXDLIN(1453)		bool _hx_tmp1;
HXDLIN(1453)		if (!(::PlayStateChangeables_obj::botPlay)) {
HXLINE(1453)			_hx_tmp1 = ::PlayState_obj::loadRep;
            		}
            		else {
HXLINE(1453)			_hx_tmp1 = true;
            		}
HXDLIN(1453)		if (!(_hx_tmp1)) {
HXLINE(1453)			_hx_tmp = this->paused;
            		}
            		else {
HXLINE(1453)			_hx_tmp = true;
            		}
HXDLIN(1453)		if (_hx_tmp) {
HXLINE(1454)			return;
            		}
HXLINE(1461)		::String key = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(evt->keyCode);
HXLINE(1463)		::Array< ::String > binds = ::Array_obj< ::String >::__new(4)->init(0, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic)))->init(1, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic)))->init(2, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic)))->init(3, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic)));
HXLINE(1470)		int data = -1;
HXLINE(1472)		switch((int)(evt->keyCode)){
            			case (int)37: {
HXLINE(1475)				data = 0;
            			}
            			break;
            			case (int)38: {
HXLINE(1479)				data = 2;
            			}
            			break;
            			case (int)39: {
HXLINE(1481)				data = 3;
            			}
            			break;
            			case (int)40: {
HXLINE(1477)				data = 1;
            			}
            			break;
            		}
HXLINE(1484)		{
HXLINE(1484)			int _g = 0;
HXDLIN(1484)			int _g1 = binds->length;
HXDLIN(1484)			while((_g < _g1)){
HXLINE(1484)				_g = (_g + 1);
HXDLIN(1484)				int i = (_g - 1);
HXLINE(1486)				::String _hx_tmp = binds->__get(i).toLowerCase();
HXDLIN(1486)				if ((_hx_tmp == key.toLowerCase())) {
HXLINE(1487)					data = i;
            				}
            			}
            		}
HXLINE(1489)		if ((data == -1)) {
HXLINE(1492)			return;
            		}
HXLINE(1494)		if (this->keys->__get(data)) {
HXLINE(1497)			return;
            		}
HXLINE(1500)		this->keys[data] = true;
HXLINE(1502)		 ::Ana ana =  ::Ana_obj::__alloc( HX_CTX ,::Conductor_obj::songPosition,null(),false,HX_("miss",fc,52,5c,48),data);
HXLINE(1504)		this->closestNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1506)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(1512)		this->closestNotes->sort( ::Dynamic(new _hx_Closure_1()));
HXLINE(1514)		::Array< ::Dynamic> dataNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1515)		{
HXLINE(1515)			int _g2 = 0;
HXDLIN(1515)			::Array< ::Dynamic> _g3 = this->closestNotes;
HXDLIN(1515)			while((_g2 < _g3->length)){
HXLINE(1515)				 ::Note i = _g3->__get(_g2).StaticCast<  ::Note >();
HXDLIN(1515)				_g2 = (_g2 + 1);
HXLINE(1516)				bool _hx_tmp;
HXDLIN(1516)				if ((i->noteData == data)) {
HXLINE(1516)					_hx_tmp = !(i->isSustainNote);
            				}
            				else {
HXLINE(1516)					_hx_tmp = false;
            				}
HXDLIN(1516)				if (_hx_tmp) {
HXLINE(1517)					dataNotes->push(i);
            				}
            			}
            		}
HXLINE(1521)		if ((dataNotes->length != 0)) {
HXLINE(1523)			 ::Note coolNote = null();
HXLINE(1525)			{
HXLINE(1525)				int _g = 0;
HXDLIN(1525)				while((_g < dataNotes->length)){
HXLINE(1525)					 ::Note i = dataNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(1525)					_g = (_g + 1);
HXLINE(1527)					coolNote = i;
HXLINE(1528)					goto _hx_goto_60;
            				}
            				_hx_goto_60:;
            			}
HXLINE(1531)			if ((dataNotes->length > 1)) {
HXLINE(1533)				int _g = 0;
HXDLIN(1533)				int _g1 = dataNotes->length;
HXDLIN(1533)				while((_g < _g1)){
HXLINE(1533)					_g = (_g + 1);
HXDLIN(1533)					int i = (_g - 1);
HXLINE(1535)					if ((i == 0)) {
HXLINE(1536)						continue;
            					}
HXLINE(1538)					 ::Note note = dataNotes->__get(i).StaticCast<  ::Note >();
HXLINE(1540)					bool _hx_tmp;
HXDLIN(1540)					bool _hx_tmp1;
HXDLIN(1540)					if (!(note->isSustainNote)) {
HXLINE(1540)						_hx_tmp1 = ((note->strumTime - coolNote->strumTime) < 2);
            					}
            					else {
HXLINE(1540)						_hx_tmp1 = false;
            					}
HXDLIN(1540)					if (_hx_tmp1) {
HXLINE(1540)						_hx_tmp = (note->noteData == data);
            					}
            					else {
HXLINE(1540)						_hx_tmp = false;
            					}
HXDLIN(1540)					if (_hx_tmp) {
HXLINE(1544)						note->kill();
HXLINE(1545)						this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(1546)						note->destroy();
            					}
            				}
            			}
HXLINE(1551)			::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
HXLINE(1552)			this->goodNoteHit(coolNote,null());
HXLINE(1553)			Float noteDiff = -((coolNote->strumTime - ::Conductor_obj::songPosition));
HXLINE(1554)			ana->hit = true;
HXLINE(1555)			ana->hitJudge = ::Ratings_obj::judgeNote(noteDiff);
HXLINE(1556)			ana->nearestNote = ::cpp::VirtualArray_obj::__new(3)->init(0,coolNote->strumTime)->init(1,coolNote->noteData)->init(2,coolNote->sustainLength);
            		}
            		else {
HXLINE(1558)			bool _hx_tmp;
HXDLIN(1558)			if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(1558)				_hx_tmp = this->songStarted;
            			}
            			else {
HXLINE(1558)				_hx_tmp = false;
            			}
HXDLIN(1558)			if (_hx_tmp) {
HXLINE(1560)				this->noteMiss(data,null());
HXLINE(1561)				ana->hit = false;
HXLINE(1562)				ana->hitJudge = HX_("shit",c0,cf,52,4c);
HXLINE(1563)				ana->nearestNote = ::cpp::VirtualArray_obj::__new(0);
HXLINE(1564)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1564)				_hx_tmp->health = (_hx_tmp->health - ((Float)0.20));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,handleInput,(void))

void PlayState_obj::startSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1577_startSong)
HXLINE(1578)		this->startingSong = false;
HXLINE(1579)		this->songStarted = true;
HXLINE(1580)		this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(1581)		this->lastReportedPlayheadPosition = 0;
HXLINE(1583)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1584)		this->vocals->play(null(),null(),null());
HXLINE(1587)		if (this->allowedToHeadbang) {
HXLINE(1588)			::PlayState_obj::gf->dance(null(),null());
            		}
HXLINE(1589)		bool _hx_tmp;
HXDLIN(1589)		if (this->idleToBeat) {
HXLINE(1589)			_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(1589)			_hx_tmp = false;
            		}
HXDLIN(1589)		if (_hx_tmp) {
HXLINE(1590)			::PlayState_obj::boyfriend->dance(this->forcedToIdle,null());
            		}
HXLINE(1591)		bool _hx_tmp1;
HXDLIN(1591)		if (this->idleToBeat) {
HXLINE(1591)			_hx_tmp1 = !(::StringTools_obj::startsWith(::PlayState_obj::dad->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(1591)			_hx_tmp1 = false;
            		}
HXDLIN(1591)		if (_hx_tmp1) {
HXLINE(1592)			::PlayState_obj::dad->dance(this->forcedToIdle,null());
            		}
HXLINE(1595)		::String _hx_switch_0 = this->curSong;
            		if (  (_hx_switch_0==HX_("Blammed",76,2a,51,09)) ||  (_hx_switch_0==HX_("Bopeebo",90,29,16,da)) ||  (_hx_switch_0==HX_("Cocoa",e9,0c,83,dd)) ||  (_hx_switch_0==HX_("Eggnog",81,78,4e,29)) ||  (_hx_switch_0==HX_("Philly Nice",95,67,fc,96)) ){
HXLINE(1598)			this->allowedToCheer = true;
HXDLIN(1598)			goto _hx_goto_65;
            		}
            		/* default */{
HXLINE(1600)			this->allowedToCheer = false;
            		}
            		_hx_goto_65:;
HXLINE(1603)		if (this->useVideo) {
HXLINE(1604)			::GlobalVideo_obj::get()->__Field(HX_("resume",ad,69,84,08),::hx::paccDynamic)();
            		}
HXLINE(1606)		if (this->executeModchart) {
HXLINE(1607)			::PlayState_obj::luaModchart->executeState(HX_("songStart",4d,bc,85,b3),::cpp::VirtualArray_obj::__new(1)->init(0,null()));
            		}
HXLINE(1611)		::String _hx_tmp2 = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(1611)		::String _hx_tmp3 = (_hx_tmp2 + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(1618)		::String _hx_tmp4 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(1611)		::DiscordClient_obj::changePresence(_hx_tmp3,(((_hx_tmp4 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
HXLINE(1626)		::flixel::FlxG_obj::sound->music->set_time(::PlayState_obj::startTime);
HXLINE(1627)		if (::hx::IsNotNull( this->vocals )) {
HXLINE(1628)			this->vocals->set_time(::PlayState_obj::startTime);
            		}
HXLINE(1629)		::Conductor_obj::songPosition = ::PlayState_obj::startTime;
HXLINE(1630)		::PlayState_obj::startTime = ( (Float)(0) );
HXLINE(1658)		{
HXLINE(1659)			::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
HXLINE(1660)			if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(1661)				::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
            			}
            		}
HXLINE(1667)		{
HXLINE(1667)			int _g = 0;
HXDLIN(1667)			int _g1 = this->unspawnNotes->length;
HXDLIN(1667)			while((_g < _g1)){
HXLINE(1667)				_g = (_g + 1);
HXDLIN(1667)				int i = (_g - 1);
HXLINE(1668)				if ((this->unspawnNotes->__get(i).StaticCast<  ::Note >()->strumTime < ::PlayState_obj::startTime)) {
HXLINE(1669)					this->unspawnNotes->remove(this->unspawnNotes->__get(i).StaticCast<  ::Note >());
            				}
            			}
            		}
HXLINE(1671)		if (this->needSkip) {
HXLINE(1673)			this->skipActive = true;
HXLINE(1674)			this->skipText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->healthBarBG->x + 80),(this->healthBarBG->y - ( (Float)(110) )),500,null(),null(),null());
HXLINE(1675)			this->skipText->set_text(HX_("Press Space to Skip Intro",59,92,f0,d6));
HXLINE(1676)			this->skipText->set_size(30);
HXLINE(1677)			this->skipText->set_color(-5383962);
HXLINE(1678)			this->skipText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1679)			this->add(this->skipText);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startSong,(void))

void PlayState_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1686_generateSong)
HXLINE(1689)		 ::Dynamic songData = ::PlayState_obj::SONG;
HXLINE(1690)		::Conductor_obj::changeBPM(( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE(1692)		this->curSong = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE(1695)		bool _hx_tmp;
HXDLIN(1695)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1695)			_hx_tmp = !(::PlayState_obj::isSM);
            		}
            		else {
HXLINE(1695)			_hx_tmp = false;
            		}
HXDLIN(1695)		if (_hx_tmp) {
HXLINE(1696)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1696)			::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1696)			::String _hx_switch_0 = songLowercase;
            			if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1696)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1696)				goto _hx_goto_68;
            			}
            			if (  (_hx_switch_0==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1696)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1696)				goto _hx_goto_68;
            			}
            			if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1696)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1696)				goto _hx_goto_68;
            			}
            			_hx_goto_68:;
HXDLIN(1696)			this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
            		}
            		else {
HXLINE(1698)			this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE(1708)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1710)		if (!(this->paused)) {
HXLINE(1713)			bool _hx_tmp;
HXDLIN(1713)			if (!(::PlayState_obj::isStoryMode)) {
HXLINE(1713)				_hx_tmp = ::PlayState_obj::isSM;
            			}
            			else {
HXLINE(1713)				_hx_tmp = false;
            			}
HXDLIN(1713)			if (_hx_tmp) {
HXLINE(1716)				 ::haxe::io::Bytes bytes = ::sys::io::File_obj::getBytes(((::PlayState_obj::pathToSm + HX_("/",2f,00,00,00)) + ::PlayState_obj::sm->header->MUSIC));
HXLINE(1717)				 ::openfl::media::Sound sound =  ::openfl::media::Sound_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1718)				sound->loadCompressedDataFromByteArray(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytesData(bytes->b),bytes->length);
HXLINE(1719)				::flixel::FlxG_obj::sound->playMusic(sound,null(),null(),null());
            			}
            			else {
HXLINE(1723)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1723)				::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1723)				::String _hx_switch_1 = songLowercase;
            				if (  (_hx_switch_1==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1723)					songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1723)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_1==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1723)					songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1723)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_1==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1723)					songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1723)					goto _hx_goto_69;
            				}
            				_hx_goto_69:;
HXDLIN(1723)				_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),1,false,null());
            			}
            		}
HXLINE(1729)		::flixel::FlxG_obj::sound->music->onComplete = this->endSong_dyn();
HXLINE(1730)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(1732)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1733)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this = ::flixel::FlxG_obj::sound;
HXDLIN(1733)			::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1733)			::String _hx_switch_2 = songLowercase;
            			if (  (_hx_switch_2==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1733)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1733)				goto _hx_goto_70;
            			}
            			if (  (_hx_switch_2==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1733)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1733)				goto _hx_goto_70;
            			}
            			if (  (_hx_switch_2==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1733)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1733)				goto _hx_goto_70;
            			}
            			_hx_goto_70:;
HXDLIN(1733)			::String EmbeddedSound = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
HXDLIN(1733)			bool _hx_tmp;
HXDLIN(1733)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE(1733)				_hx_tmp = ::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE(1733)				_hx_tmp = true;
            			}
HXDLIN(1733)			if (_hx_tmp) {
HXLINE(1733)				::openfl::utils::Assets_obj::getSound(EmbeddedSound,true);
            			}
            		}
HXLINE(1734)		if (!(::PlayState_obj::isSM)) {
HXLINE(1735)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this = ::flixel::FlxG_obj::sound;
HXDLIN(1735)			::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1735)			::String _hx_switch_3 = songLowercase;
            			if (  (_hx_switch_3==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1735)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1735)				goto _hx_goto_71;
            			}
            			if (  (_hx_switch_3==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1735)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1735)				goto _hx_goto_71;
            			}
            			if (  (_hx_switch_3==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1735)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1735)				goto _hx_goto_71;
            			}
            			_hx_goto_71:;
HXDLIN(1735)			::String EmbeddedSound = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
HXDLIN(1735)			bool _hx_tmp;
HXDLIN(1735)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE(1735)				_hx_tmp = ::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE(1735)				_hx_tmp = true;
            			}
HXDLIN(1735)			if (_hx_tmp) {
HXLINE(1735)				::openfl::utils::Assets_obj::getSound(EmbeddedSound,true);
            			}
            		}
HXLINE(1740)		this->songLength = (::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) ));
HXLINE(1742)		::Conductor_obj::crochet = (((( (Float)(60) ) / ( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) )) * ( (Float)(1000) )) / ::PlayState_obj::songMultiplier);
HXLINE(1743)		::Conductor_obj::stepCrochet = (::Conductor_obj::crochet / ( (Float)(4) ));
HXLINE(1745)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(1747)			this->remove(::PlayState_obj::songPosBG,null());
HXLINE(1748)			this->remove(::PlayState_obj::songPosBar,null());
HXLINE(1749)			this->remove(this->songName,null());
HXLINE(1751)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,10,null());
HXDLIN(1751)			::String library = null();
HXDLIN(1751)			::PlayState_obj::songPosBG = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1752)			if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(1753)				::PlayState_obj::songPosBG->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            			}
HXLINE(1754)			::PlayState_obj::songPosBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(1755)			::PlayState_obj::songPosBG->scrollFactor->set(null(),null());
HXLINE(1756)			this->add(::PlayState_obj::songPosBG);
HXLINE(1758)			Float _hx_tmp1 = (::PlayState_obj::songPosBG->x + 4);
HXLINE(1759)			Float _hx_tmp2 = (::PlayState_obj::songPosBG->y + 4);
HXLINE(1760)			int _hx_tmp3 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_width() - ( (Float)(8) )));
HXLINE(1758)			::PlayState_obj::songPosBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp3,::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("songPositionBar",d5,62,6e,a6),0,100,null());
HXLINE(1762)			::PlayState_obj::songPosBar->set_numDivisions(1000);
HXLINE(1763)			::PlayState_obj::songPosBar->scrollFactor->set(null(),null());
HXLINE(1764)			::PlayState_obj::songPosBar->createFilledBar(-8355712,-16711936,null(),null());
HXLINE(1765)			this->add(::PlayState_obj::songPosBar);
HXLINE(1767)			Float songName = ::PlayState_obj::songPosBG->x;
HXDLIN(1767)			Float songName1 = (songName + (::PlayState_obj::songPosBG->get_width() / ( (Float)(2) )));
HXDLIN(1767)			 ::flixel::text::FlxText songName2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(songName1 - ( (Float)((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).length * 5)) )),::PlayState_obj::songPosBG->y,0,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),16,null());
HXLINE(1768)			if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(1769)				 ::flixel::text::FlxText _g = songName2;
HXDLIN(1769)				_g->set_y((_g->y - ( (Float)(3) )));
            			}
HXLINE(1770)			songName2->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1771)			songName2->scrollFactor->set(null(),null());
HXLINE(1772)			this->add(songName2);
HXLINE(1774)			::PlayState_obj::songPosBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1775)			::PlayState_obj::songPosBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1776)			songName2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1780)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(1781)		this->add(this->notes);
HXLINE(1783)		::Array< ::Dynamic> noteData = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE(1788)		int playerCounter = 0;
HXLINE(1793)		::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXLINE(1794)		::String _hx_switch_4 = songLowercase;
            		if (  (_hx_switch_4==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1797)			songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1797)			goto _hx_goto_72;
            		}
            		if (  (_hx_switch_4==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1801)			songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1801)			goto _hx_goto_72;
            		}
            		if (  (_hx_switch_4==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1799)			songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1799)			goto _hx_goto_72;
            		}
            		_hx_goto_72:;
HXLINE(1804)		::String songPath = ((HX_("assets/data/",f9,10,73,a0) + songLowercase) + HX_("/",2f,00,00,00));
HXLINE(1807)		bool _hx_tmp1;
HXDLIN(1807)		if (::PlayState_obj::isSM) {
HXLINE(1807)			_hx_tmp1 = !(::PlayState_obj::isStoryMode);
            		}
            		else {
HXLINE(1807)			_hx_tmp1 = false;
            		}
HXDLIN(1807)		if (_hx_tmp1) {
HXLINE(1808)			songPath = ::PlayState_obj::pathToSm;
            		}
HXLINE(1811)		{
HXLINE(1811)			int _g = 0;
HXDLIN(1811)			::Array< ::String > _g1 = ::sys::FileSystem_obj::readDirectory(songPath);
HXDLIN(1811)			while((_g < _g1->length)){
HXLINE(1811)				::String file = _g1->__get(_g);
HXDLIN(1811)				_g = (_g + 1);
HXLINE(1813)				::String path = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,songPath)->init(1,file));
HXLINE(1814)				if (!(::sys::FileSystem_obj::isDirectory(path))) {
HXLINE(1816)					if (::StringTools_obj::endsWith(path,HX_(".offset",41,ee,1a,d9))) {
HXLINE(1819)						::PlayState_obj::songOffset = ::Std_obj::parseFloat(file.substring(0,file.indexOf(HX_(".off",01,64,bc,1e),null())));
HXLINE(1820)						goto _hx_goto_73;
            					}
            					else {
HXLINE(1825)						::sys::io::File_obj::saveContent(((songPath + ::PlayState_obj::songOffset) + HX_(".offset",41,ee,1a,d9)),HX_("",00,00,00,00));
            					}
            				}
            			}
            			_hx_goto_73:;
            		}
HXLINE(1830)		int daBeats = 0;
HXLINE(1833)		{
HXLINE(1833)			int _g2 = 0;
HXDLIN(1833)			while((_g2 < noteData->length)){
HXLINE(1833)				 ::Dynamic section = noteData->__get(_g2);
HXDLIN(1833)				_g2 = (_g2 + 1);
HXLINE(1835)				int coolSection = ::Std_obj::_hx_int((( (Float)(section->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) / ( (Float)(4) )));
HXLINE(1837)				{
HXLINE(1837)					int _g = 0;
HXDLIN(1837)					::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1837)					while((_g < _g1->length)){
HXLINE(1837)						::cpp::VirtualArray songNotes = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(1837)						_g = (_g + 1);
HXLINE(1839)						Float daStrumTime = ((( (Float)(songNotes->__get(0)) ) - ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic)) )) - ::PlayState_obj::songOffset);
HXLINE(1840)						if ((daStrumTime < 0)) {
HXLINE(1841)							daStrumTime = ( (Float)(0) );
            						}
HXLINE(1842)						int daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__get(1),4));
HXLINE(1844)						bool gottaHitNote = true;
HXLINE(1846)						bool _hx_tmp;
HXDLIN(1846)						if (::hx::IsGreater( songNotes->__get(1),3 )) {
HXLINE(1846)							_hx_tmp = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
            						}
            						else {
HXLINE(1846)							_hx_tmp = false;
            						}
HXDLIN(1846)						if (_hx_tmp) {
HXLINE(1847)							gottaHitNote = false;
            						}
            						else {
HXLINE(1848)							bool _hx_tmp;
HXDLIN(1848)							if (::hx::IsLess( songNotes->__get(1),4 )) {
HXLINE(1848)								_hx_tmp = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            							}
            							else {
HXLINE(1848)								_hx_tmp = false;
            							}
HXDLIN(1848)							if (_hx_tmp) {
HXLINE(1849)								gottaHitNote = false;
            							}
            						}
HXLINE(1852)						 ::Note oldNote;
HXLINE(1853)						if ((this->unspawnNotes->length > 0)) {
HXLINE(1854)							oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
            						}
            						else {
HXLINE(1856)							oldNote = null();
            						}
HXLINE(1858)						 ::Note swagNote =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,oldNote,false,false,false,songNotes->__get(4));
HXLINE(1860)						bool _hx_tmp1;
HXDLIN(1860)						if (!(gottaHitNote)) {
HXLINE(1860)							_hx_tmp1 = ::PlayStateChangeables_obj::Optimize;
            						}
            						else {
HXLINE(1860)							_hx_tmp1 = false;
            						}
HXDLIN(1860)						if (_hx_tmp1) {
HXLINE(1861)							continue;
            						}
HXLINE(1863)						swagNote->sustainLength = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(( (Float)(songNotes->__get(2)) )));
HXLINE(1864)						swagNote->scrollFactor->set(0,0);
HXLINE(1866)						Float susLength = swagNote->sustainLength;
HXLINE(1868)						susLength = (susLength / ::Conductor_obj::stepCrochet);
HXLINE(1869)						this->unspawnNotes->push(swagNote);
HXLINE(1871)						bool _hx_tmp2;
HXDLIN(1871)						bool _hx_tmp3;
HXDLIN(1871)						if (!(( (bool)(songNotes->__get(3)) ))) {
HXLINE(1871)							bool _hx_tmp;
HXDLIN(1871)							if (!(( (bool)(section->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ))) {
HXLINE(1871)								_hx_tmp = ( (bool)(section->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(1871)								_hx_tmp = true;
            							}
HXDLIN(1871)							if (_hx_tmp) {
HXLINE(1871)								_hx_tmp3 = !(gottaHitNote);
            							}
            							else {
HXLINE(1871)								_hx_tmp3 = false;
            							}
            						}
            						else {
HXLINE(1871)							_hx_tmp3 = true;
            						}
HXDLIN(1871)						if (!(_hx_tmp3)) {
HXLINE(1871)							if (( (bool)(section->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) )) {
HXLINE(1871)								_hx_tmp2 = gottaHitNote;
            							}
            							else {
HXLINE(1871)								_hx_tmp2 = false;
            							}
            						}
            						else {
HXLINE(1871)							_hx_tmp2 = true;
            						}
HXDLIN(1871)						swagNote->isAlt = _hx_tmp2;
HXLINE(1873)						if ((susLength > 0)) {
HXLINE(1874)							swagNote->isParent = true;
            						}
HXLINE(1876)						int type = 0;
HXLINE(1878)						{
HXLINE(1878)							int _g2 = 0;
HXDLIN(1878)							int _g3 = ::Math_obj::floor(susLength);
HXDLIN(1878)							while((_g2 < _g3)){
HXLINE(1878)								_g2 = (_g2 + 1);
HXDLIN(1878)								int susNote = (_g2 - 1);
HXLINE(1880)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
HXLINE(1882)								 ::Note sustainNote =  ::Note_obj::__alloc( HX_CTX ,((daStrumTime + (::Conductor_obj::stepCrochet * ( (Float)(susNote) ))) + ::Conductor_obj::stepCrochet),daNoteData,oldNote,true,null(),null(),null());
HXLINE(1883)								sustainNote->scrollFactor->set(null(),null());
HXLINE(1884)								this->unspawnNotes->push(sustainNote);
HXLINE(1885)								bool _hx_tmp;
HXDLIN(1885)								bool _hx_tmp1;
HXDLIN(1885)								if (!(( (bool)(songNotes->__get(3)) ))) {
HXLINE(1885)									bool _hx_tmp;
HXDLIN(1885)									if (!(( (bool)(section->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ))) {
HXLINE(1885)										_hx_tmp = ( (bool)(section->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) );
            									}
            									else {
HXLINE(1885)										_hx_tmp = true;
            									}
HXDLIN(1885)									if (_hx_tmp) {
HXLINE(1885)										_hx_tmp1 = !(gottaHitNote);
            									}
            									else {
HXLINE(1885)										_hx_tmp1 = false;
            									}
            								}
            								else {
HXLINE(1885)									_hx_tmp1 = true;
            								}
HXDLIN(1885)								if (!(_hx_tmp1)) {
HXLINE(1885)									if (( (bool)(section->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) )) {
HXLINE(1885)										_hx_tmp = gottaHitNote;
            									}
            									else {
HXLINE(1885)										_hx_tmp = false;
            									}
            								}
            								else {
HXLINE(1885)									_hx_tmp = true;
            								}
HXDLIN(1885)								sustainNote->isAlt = _hx_tmp;
HXLINE(1887)								sustainNote->mustPress = gottaHitNote;
HXLINE(1889)								if (sustainNote->mustPress) {
HXLINE(1891)									 ::Note _g = sustainNote;
HXDLIN(1891)									_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
HXLINE(1894)								sustainNote->parent = swagNote;
HXLINE(1895)								swagNote->children->push(sustainNote);
HXLINE(1896)								sustainNote->spotInLine = type;
HXLINE(1897)								type = (type + 1);
            							}
            						}
HXLINE(1900)						swagNote->mustPress = gottaHitNote;
HXLINE(1902)						if (swagNote->mustPress) {
HXLINE(1904)							 ::Note _g = swagNote;
HXDLIN(1904)							_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            					}
            				}
HXLINE(1907)				daBeats = (daBeats + 1);
            			}
            		}
HXLINE(1913)		this->unspawnNotes->sort(this->sortByShit_dyn());
HXLINE(1915)		this->generatedMusic = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateSong,(void))

int PlayState_obj::sortByShit( ::Note Obj1, ::Note Obj2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1921_sortByShit)
HXDLIN(1921)		Float Value1 = Obj1->strumTime;
HXDLIN(1921)		Float Value2 = Obj2->strumTime;
HXDLIN(1921)		int result = 0;
HXDLIN(1921)		if ((Value1 < Value2)) {
HXDLIN(1921)			result = -1;
            		}
            		else {
HXDLIN(1921)			if ((Value1 > Value2)) {
HXDLIN(1921)				result = 1;
            			}
            		}
HXDLIN(1921)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByShit,return )

void PlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1926_generateStaticArrows)
HXDLIN(1926)		int _g = 0;
HXDLIN(1926)		while((_g < 4)){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2023_generateStaticArrows)
HXLINE(2023)				spr->centerOffsets(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXDLIN(1926)			_g = (_g + 1);
HXDLIN(1926)			int i = (_g - 1);
HXLINE(1929)			 ::StaticArrow babyArrow =  ::StaticArrow_obj::__alloc( HX_CTX ,( (Float)(0) ),this->strumLine->y);
HXLINE(1932)			::String noteTypeCheck = HX_("normal",27,72,69,30);
HXLINE(1934)			bool _hx_tmp;
HXDLIN(1934)			if (::PlayStateChangeables_obj::Optimize) {
HXLINE(1934)				_hx_tmp = (player == 0);
            			}
            			else {
HXLINE(1934)				_hx_tmp = false;
            			}
HXDLIN(1934)			if (_hx_tmp) {
HXLINE(1935)				continue;
            			}
HXLINE(1937)			if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic) )) {
HXLINE(1939)				if ((::PlayState_obj::storyWeek == 6)) {
HXLINE(1942)					noteTypeCheck = HX_("pixel",86,c6,a3,c2);
            				}
            			}
            			else {
HXLINE(1947)				noteTypeCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) );
            			}
HXLINE(1950)			if ((noteTypeCheck == HX_("pixel",86,c6,a3,c2))) {
HXLINE(1953)				babyArrow->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/pixelUI/arrows-pixels",b7,c3,c7,09)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),true,17,17,null(),null());
HXLINE(1954)				babyArrow->animation->add(HX_("green",c3,0e,ed,99),::Array_obj< int >::fromData( _hx_array_data_46c2835d_82,1),null(),null(),null(),null());
HXLINE(1955)				babyArrow->animation->add(HX_("red",51,d9,56,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_83,1),null(),null(),null(),null());
HXLINE(1956)				babyArrow->animation->add(HX_("blue",9a,42,19,41),::Array_obj< int >::fromData( _hx_array_data_46c2835d_84,1),null(),null(),null(),null());
HXLINE(1957)				babyArrow->animation->add(HX_("purplel",b0,7e,2d,e7),::Array_obj< int >::fromData( _hx_array_data_46c2835d_85,1),null(),null(),null(),null());
HXLINE(1959)				Float _hx_tmp = babyArrow->get_width();
HXDLIN(1959)				babyArrow->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
HXLINE(1960)				babyArrow->updateHitbox();
HXLINE(1961)				babyArrow->set_antialiasing(false);
HXLINE(1963)				{
HXLINE(1963)					 ::StaticArrow _g = babyArrow;
HXDLIN(1963)					_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(i) ))));
            				}
HXLINE(1964)				babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::__new(1)->init(0,i),null(),null(),null(),null());
HXLINE(1965)				babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::__new(2)->init(0,(4 + i))->init(1,(8 + i)),12,false,null(),null());
HXLINE(1966)				babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::__new(2)->init(0,(12 + i))->init(1,(16 + i)),24,false,null(),null());
HXLINE(1968)				{
HXLINE(1970)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 0),::Array_obj< int >::fromData( _hx_array_data_46c2835d_86,2),24,false,null(),null());
HXDLIN(1970)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 1),::Array_obj< int >::fromData( _hx_array_data_46c2835d_87,2),24,false,null(),null());
HXDLIN(1970)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 2),::Array_obj< int >::fromData( _hx_array_data_46c2835d_88,2),24,false,null(),null());
HXDLIN(1970)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 3),::Array_obj< int >::fromData( _hx_array_data_46c2835d_89,2),24,false,null(),null());
            				}
            			}
            			else {
HXLINE(1974)				::String library = null();
HXDLIN(1974)				bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN(1974)				::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(1974)				babyArrow->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE(1975)				{
HXLINE(1976)					{
HXLINE(1977)						babyArrow->animation->addByPrefix(this->dataColor->__get(0),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(0)),null(),null(),null(),null());
HXLINE(1978)						 ::flixel::animation::FlxAnimationController babyArrow1 = babyArrow->animation;
HXDLIN(1978)						babyArrow1->addByPrefix((HX_("dirCon",f5,88,50,bc) + 0),(this->dataSuffix->__get(0).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE(1976)					{
HXLINE(1977)						babyArrow->animation->addByPrefix(this->dataColor->__get(1),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(1)),null(),null(),null(),null());
HXLINE(1978)						 ::flixel::animation::FlxAnimationController babyArrow2 = babyArrow->animation;
HXDLIN(1978)						babyArrow2->addByPrefix((HX_("dirCon",f5,88,50,bc) + 1),(this->dataSuffix->__get(1).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE(1976)					{
HXLINE(1977)						babyArrow->animation->addByPrefix(this->dataColor->__get(2),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(2)),null(),null(),null(),null());
HXLINE(1978)						 ::flixel::animation::FlxAnimationController babyArrow3 = babyArrow->animation;
HXDLIN(1978)						babyArrow3->addByPrefix((HX_("dirCon",f5,88,50,bc) + 2),(this->dataSuffix->__get(2).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE(1976)					{
HXLINE(1977)						babyArrow->animation->addByPrefix(this->dataColor->__get(3),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(3)),null(),null(),null(),null());
HXLINE(1978)						 ::flixel::animation::FlxAnimationController babyArrow4 = babyArrow->animation;
HXDLIN(1978)						babyArrow4->addByPrefix((HX_("dirCon",f5,88,50,bc) + 3),(this->dataSuffix->__get(3).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
            				}
HXLINE(1981)				::String lowerDir = this->dataSuffix->__get(i).toLowerCase();
HXLINE(1983)				babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(i)),null(),null(),null(),null());
HXLINE(1984)				babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),(lowerDir + HX_(" press",63,df,f3,93)),24,false,null(),null());
HXLINE(1985)				babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),(lowerDir + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
HXLINE(1987)				{
HXLINE(1987)					 ::StaticArrow _g = babyArrow;
HXDLIN(1987)					_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(i) ))));
            				}
HXLINE(1989)				babyArrow->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(1990)				babyArrow->setGraphicSize(::Std_obj::_hx_int((babyArrow->get_width() * ((Float)0.7))),null());
            			}
HXLINE(1993)			babyArrow->updateHitbox();
HXLINE(1994)			babyArrow->scrollFactor->set(null(),null());
HXLINE(1996)			babyArrow->set_alpha(( (Float)(0) ));
HXLINE(1997)			if (!(::PlayState_obj::isStoryMode)) {
HXLINE(1999)				{
HXLINE(1999)					 ::StaticArrow _g = babyArrow;
HXDLIN(1999)					_g->set_y((_g->y - ( (Float)(10) )));
            				}
HXLINE(2001)				::flixel::tweens::FlxTween_obj::tween(babyArrow, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("y",79,00,00,00),(babyArrow->y + 10))
            					->setFixed(1,HX_("alpha",5e,a7,96,21),1)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (((Float)0.2) * ( (Float)(i) ))))
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
            			}
HXLINE(2004)			babyArrow->ID = i;
HXLINE(2006)			switch((int)(player)){
            				case (int)0: {
HXLINE(2009)					::PlayState_obj::cpuStrums->add(babyArrow).StaticCast<  ::StaticArrow >();
            				}
            				break;
            				case (int)1: {
HXLINE(2011)					::PlayState_obj::playerStrums->add(babyArrow).StaticCast<  ::StaticArrow >();
            				}
            				break;
            			}
HXLINE(2014)			babyArrow->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(2015)			{
HXLINE(2015)				 ::StaticArrow _g1 = babyArrow;
HXDLIN(2015)				_g1->set_x((_g1->x + 50));
            			}
HXLINE(2016)			{
HXLINE(2016)				 ::StaticArrow _g2 = babyArrow;
HXDLIN(2016)				_g2->set_x((_g2->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) * ( (Float)(player) ))));
            			}
HXLINE(2018)			if (::PlayStateChangeables_obj::Optimize) {
HXLINE(2019)				 ::StaticArrow _g = babyArrow;
HXDLIN(2019)				_g->set_x((_g->x - ( (Float)(275) )));
            			}
HXLINE(2021)			::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE(2026)			::PlayState_obj::strumLineNotes->add(babyArrow).StaticCast<  ::StaticArrow >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateStaticArrows,(void))

void PlayState_obj::appearStaticArrows(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite babyArrow){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2034_appearStaticArrows)
HXLINE(2034)			if (::PlayState_obj::isStoryMode) {
HXLINE(2035)				babyArrow->set_alpha(( (Float)(1) ));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2032_appearStaticArrows)
HXDLIN(2032)		::PlayState_obj::strumLineNotes->forEach( ::Dynamic(new _hx_Closure_0()),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,appearStaticArrows,(void))

void PlayState_obj::tweenCamIn(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2041_tweenCamIn)
HXDLIN(2041)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),((Float)1.3))),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,tweenCamIn,(void))

void PlayState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2045_openSubState)
HXLINE(2046)		if (this->paused) {
HXLINE(2048)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(2050)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(2051)				if (::hx::IsNotNull( this->vocals )) {
HXLINE(2052)					if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(2053)						this->vocals->pause();
            					}
            				}
            			}
HXLINE(2057)			::String _hx_tmp = ( (::String)(((((HX_("PAUSED on ",af,49,21,f3) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2057)			::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(2063)			::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2057)			::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
HXLINE(2070)			if (!(this->startTimer->finished)) {
HXLINE(2071)				this->startTimer->active = false;
            			}
            		}
HXLINE(2074)		this->super::openSubState(SubState);
            	}


void PlayState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2078_closeSubState)
HXLINE(2079)		if (this->paused) {
HXLINE(2081)			bool _hx_tmp;
HXDLIN(2081)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(2081)				_hx_tmp = !(this->startingSong);
            			}
            			else {
HXLINE(2081)				_hx_tmp = false;
            			}
HXDLIN(2081)			if (_hx_tmp) {
HXLINE(2083)				this->resyncVocals();
            			}
HXLINE(2086)			if (!(this->startTimer->finished)) {
HXLINE(2087)				this->startTimer->active = true;
            			}
HXLINE(2088)			this->paused = false;
HXLINE(2091)			if (this->startTimer->finished) {
HXLINE(2093)				::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2093)				::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(2100)				::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2093)				::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,true,(this->songLength - ::Conductor_obj::songPosition));
            			}
            			else {
HXLINE(2111)				::String _hx_tmp = this->detailsText;
HXDLIN(2111)				::String _hx_tmp1 = ( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2111)				::String _hx_tmp2 = (_hx_tmp1 + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXDLIN(2111)				::DiscordClient_obj::changePresence(_hx_tmp,_hx_tmp2,this->iconRPC,null(),null());
            			}
            		}
HXLINE(2116)		this->super::closeSubState();
            	}


void PlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2120_resyncVocals)
HXLINE(2121)		this->vocals->pause();
HXLINE(2123)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(2124)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(2125)		this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE(2126)		this->vocals->play(null(),null(),null());
HXLINE(2129)		{
HXLINE(2130)			::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
HXLINE(2131)			if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(2132)				::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
            			}
            		}
HXLINE(2137)		::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2137)		::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(2144)		::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2137)		::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resyncVocals,(void))

void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2174_update)
HXLINE(2173)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2176)		this->perfectMode = false;
HXLINE(2180)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::Note >() )) {
HXLINE(2183)			if (((this->unspawnNotes->__get(0).StaticCast<  ::Note >()->strumTime - ::Conductor_obj::songPosition) < (( (Float)(14000) ) * ::PlayState_obj::songMultiplier))) {
HXLINE(2185)				 ::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::Note >();
HXLINE(2186)				this->notes->add(dunceNote).StaticCast<  ::Note >();
HXLINE(2188)				if (this->executeModchart) {
HXLINE(2190)					 ::LuaNote_obj::__alloc( HX_CTX ,dunceNote,this->currentLuaIndex);
HXLINE(2191)					dunceNote->luaID = this->currentLuaIndex;
            				}
HXLINE(2194)				if (this->executeModchart) {
HXLINE(2196)					if (!(dunceNote->isSustainNote)) {
HXLINE(2197)						dunceNote->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camNotes));
            					}
            					else {
HXLINE(2199)						dunceNote->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camSustains));
            					}
            				}
            				else {
HXLINE(2203)					dunceNote->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            				}
HXLINE(2206)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE(2207)				this->unspawnNotes->removeRange(index,1);
HXLINE(2208)				this->currentLuaIndex++;
            			}
            		}
HXLINE(2214)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(2217)			::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
HXLINE(2218)			if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(2219)				::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
            			}
            		}
HXLINE(2224)		if (this->generatedMusic) {
HXLINE(2226)			bool _hx_tmp;
HXDLIN(2226)			if (this->songStarted) {
HXLINE(2226)				_hx_tmp = !(this->endingSong);
            			}
            			else {
HXLINE(2226)				_hx_tmp = false;
            			}
HXDLIN(2226)			if (_hx_tmp) {
HXLINE(2231)				bool _hx_tmp;
HXDLIN(2231)				if ((this->unspawnNotes->length == 0)) {
HXLINE(2231)					_hx_tmp = (this->notes->length == 0);
            				}
            				else {
HXLINE(2231)					_hx_tmp = false;
            				}
HXDLIN(2231)				if (_hx_tmp) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer timer){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2235_update)
HXLINE(2235)						_gthis->endSong();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(2233)					this->endingSong = true;
HXLINE(2234)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            				}
            			}
            		}
HXLINE(2242)		if ((this->updateFrame == 4)) {
HXLINE(2244)			::TimingStruct_obj::clearTimings();
HXLINE(2246)			int currentIndex = 0;
HXLINE(2247)			{
HXLINE(2247)				int _g = 0;
HXDLIN(2247)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(2247)				while((_g < _g1->length)){
HXLINE(2247)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(2247)					_g = (_g + 1);
HXLINE(2249)					if ((i->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE(2251)						Float beat = i->position;
HXLINE(2253)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE(2255)						Float bpm = i->value;
HXLINE(2257)						::TimingStruct_obj::addTiming(beat,bpm,endBeat,( (Float)(0) ));
HXLINE(2259)						if ((currentIndex != 0)) {
HXLINE(2261)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE(2262)							data->endBeat = beat;
HXLINE(2263)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE(2264)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(2265)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE(2266)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE(2269)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE(2273)			this->updateFrame++;
            		}
            		else {
HXLINE(2275)			if ((this->updateFrame != 5)) {
HXLINE(2276)				this->updateFrame++;
            			}
            		}
HXLINE(2279)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(2282)			 ::TimingStruct timingSeg = ::TimingStruct_obj::getTimingAtBeat(this->curDecimalBeat);
HXLINE(2284)			if (::hx::IsNotNull( timingSeg )) {
HXLINE(2287)				Float timingSegBpm = timingSeg->bpm;
HXLINE(2289)				if ((timingSegBpm != ::Conductor_obj::bpm)) {
HXLINE(2292)					::Conductor_obj::changeBPM(timingSegBpm,false);
HXLINE(2293)					::Conductor_obj::crochet = (((( (Float)(60) ) / timingSegBpm) * ( (Float)(1000) )) / ::PlayState_obj::songMultiplier);
HXLINE(2294)					::Conductor_obj::stepCrochet = (::Conductor_obj::crochet / ( (Float)(4) ));
            				}
            			}
HXLINE(2299)			Float newScroll = ((Float)1.0);
HXLINE(2301)			{
HXLINE(2301)				int _g = 0;
HXDLIN(2301)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(2301)				while((_g < _g1->length)){
HXLINE(2301)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(2301)					_g = (_g + 1);
HXLINE(2303)					if ((i->type == HX_("Scroll Speed Change",fc,2c,18,61))) {
HXLINE(2306)						bool _hx_tmp;
HXDLIN(2306)						if ((i->position <= this->curDecimalBeat)) {
HXLINE(2306)							_hx_tmp = !(this->pastScrollChanges->contains(i));
            						}
            						else {
HXLINE(2306)							_hx_tmp = false;
            						}
HXDLIN(2306)						if (_hx_tmp) {
HXLINE(2308)							this->pastScrollChanges->push(i);
HXLINE(2310)							newScroll = i->value;
            						}
            					}
            				}
            			}
HXLINE(2315)			if ((newScroll != 0)) {
HXLINE(2316)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayStateChangeables >();
HXDLIN(2316)				::PlayStateChangeables_obj::scrollSpeed = (::PlayStateChangeables_obj::scrollSpeed * newScroll);
            			}
            		}
HXLINE(2319)		bool _hx_tmp;
HXDLIN(2319)		if (::PlayStateChangeables_obj::botPlay) {
HXLINE(2319)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2319)			_hx_tmp = _this->keyManager->checkStatus(49,_this->status);
            		}
            		else {
HXLINE(2319)			_hx_tmp = false;
            		}
HXDLIN(2319)		if (_hx_tmp) {
HXLINE(2320)			this->camHUD->set_visible(!(this->camHUD->visible));
            		}
HXLINE(2322)		bool _hx_tmp1;
HXDLIN(2322)		bool _hx_tmp2;
HXDLIN(2322)		if (this->useVideo) {
HXLINE(2322)			_hx_tmp2 = ::hx::IsNotNull( ::GlobalVideo_obj::get() );
            		}
            		else {
HXLINE(2322)			_hx_tmp2 = false;
            		}
HXDLIN(2322)		if (_hx_tmp2) {
HXLINE(2322)			_hx_tmp1 = !(this->stopUpdate);
            		}
            		else {
HXLINE(2322)			_hx_tmp1 = false;
            		}
HXDLIN(2322)		if (_hx_tmp1) {
HXLINE(2324)			bool _hx_tmp;
HXDLIN(2324)			if (( (bool)(::GlobalVideo_obj::get()->__Field(HX_("ended",fa,48,7a,70),::hx::paccDynamic)) )) {
HXLINE(2324)				_hx_tmp = !(this->removedVideo);
            			}
            			else {
HXLINE(2324)				_hx_tmp = false;
            			}
HXDLIN(2324)			if (_hx_tmp) {
HXLINE(2326)				this->remove(this->videoSprite,null());
HXLINE(2327)				::openfl::Lib_obj::get_current()->stage->window->onFocusOut->remove(this->focusOut_dyn());
HXLINE(2328)				::openfl::Lib_obj::get_current()->stage->window->onFocusIn->remove(this->focusIn_dyn());
HXLINE(2329)				this->removedVideo = true;
            			}
            		}
HXLINE(2334)		bool _hx_tmp3;
HXDLIN(2334)		bool _hx_tmp4;
HXDLIN(2334)		if (this->executeModchart) {
HXLINE(2334)			_hx_tmp4 = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(2334)			_hx_tmp4 = false;
            		}
HXDLIN(2334)		if (_hx_tmp4) {
HXLINE(2334)			_hx_tmp3 = this->songStarted;
            		}
            		else {
HXLINE(2334)			_hx_tmp3 = false;
            		}
HXDLIN(2334)		if (_hx_tmp3) {
HXLINE(2336)			::PlayState_obj::luaModchart->setVar(HX_("songPos",bf,44,27,aa),::Conductor_obj::songPosition);
HXLINE(2337)			::PlayState_obj::luaModchart->setVar(HX_("hudZoom",6a,47,5d,7c),this->camHUD->zoom);
HXLINE(2338)			 ::ModchartState _hx_tmp = ::PlayState_obj::luaModchart;
HXDLIN(2338)			_hx_tmp->setVar(HX_("curBeat",16,53,29,ac),::HelperFunctions_obj::truncateFloat(this->curDecimalBeat,3));
HXLINE(2339)			::PlayState_obj::luaModchart->setVar(HX_("cameraZoom",58,cc,16,b7),::flixel::FlxG_obj::camera->zoom);
HXLINE(2341)			::PlayState_obj::luaModchart->executeState(HX_("update",09,86,05,87),::cpp::VirtualArray_obj::__new(1)->init(0,elapsed));
HXLINE(2343)			{
HXLINE(2343)				 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,::PlayState_obj::luaModchart->luaWiggles);
HXDLIN(2343)				while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2343)					 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(2343)					::String key = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN(2343)					 ::WiggleEffect value = ( ( ::WiggleEffect)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE(2346)					value->update(elapsed);
            				}
            			}
HXLINE(2349)			::PlayStateChangeables_obj::useDownscroll = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("downscroll",ef,45,d4,4f),HX_("bool",2a,84,1b,41))) );
HXLINE(2358)			 ::flixel::FlxCamera _hx_tmp1 = ::flixel::FlxG_obj::camera;
HXDLIN(2358)			_hx_tmp1->set_angle(( (Float)(::PlayState_obj::luaModchart->getVar(HX_("cameraAngle",ee,36,28,17),HX_("float",9c,c5,96,02))) ));
HXLINE(2359)			 ::flixel::FlxCamera _hx_tmp2 = this->camHUD;
HXDLIN(2359)			_hx_tmp2->set_angle(( (Float)(::PlayState_obj::luaModchart->getVar(HX_("camHudAngle",cb,c2,43,4c),HX_("float",9c,c5,96,02))) ));
HXLINE(2361)			if (( (bool)(::PlayState_obj::luaModchart->getVar(HX_("showOnlyStrums",f3,ec,e4,3c),HX_("bool",2a,84,1b,41))) )) {
HXLINE(2363)				this->healthBarBG->set_visible(false);
HXLINE(2364)				this->kadeEngineWatermark->set_visible(false);
HXLINE(2365)				this->healthBar->set_visible(false);
HXLINE(2366)				this->iconP1->set_visible(false);
HXLINE(2367)				this->iconP2->set_visible(false);
HXLINE(2368)				this->scoreTxt->set_visible(false);
            			}
            			else {
HXLINE(2372)				this->healthBarBG->set_visible(true);
HXLINE(2373)				this->kadeEngineWatermark->set_visible(true);
HXLINE(2374)				this->healthBar->set_visible(true);
HXLINE(2375)				this->iconP1->set_visible(true);
HXLINE(2376)				this->iconP2->set_visible(true);
HXLINE(2377)				this->scoreTxt->set_visible(true);
            			}
HXLINE(2380)			bool p1 = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("strumLine1Visible",1e,97,fd,b5),HX_("bool",2a,84,1b,41))) );
HXLINE(2381)			bool p2 = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("strumLine2Visible",3d,09,30,ef),HX_("bool",2a,84,1b,41))) );
HXLINE(2383)			{
HXLINE(2384)				{
HXLINE(2385)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(0)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2386)					if ((0 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2387)						Dynamic( ::PlayState_obj::playerStrums->members->__get(0)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
HXLINE(2384)				{
HXLINE(2385)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(1)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2386)					if ((1 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2387)						Dynamic( ::PlayState_obj::playerStrums->members->__get(1)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
HXLINE(2384)				{
HXLINE(2385)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(2)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2386)					if ((2 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2387)						Dynamic( ::PlayState_obj::playerStrums->members->__get(2)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
HXLINE(2384)				{
HXLINE(2385)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(3)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2386)					if ((3 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2387)						Dynamic( ::PlayState_obj::playerStrums->members->__get(3)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
            			}
HXLINE(2390)			this->camNotes->set_zoom(this->camHUD->zoom);
HXLINE(2391)			this->camNotes->set_x(this->camHUD->x);
HXLINE(2392)			this->camNotes->set_y(this->camHUD->y);
HXLINE(2393)			this->camNotes->set_angle(this->camHUD->angle);
HXLINE(2394)			this->camSustains->set_zoom(this->camHUD->zoom);
HXLINE(2395)			this->camSustains->set_x(this->camHUD->x);
HXLINE(2396)			this->camSustains->set_y(this->camHUD->y);
HXLINE(2397)			this->camSustains->set_angle(this->camHUD->angle);
            		}
HXLINE(2404)		{
HXLINE(2405)			int balls = (this->notesHitArray->length - 1);
HXLINE(2406)			while((balls >= 0)){
HXLINE(2408)				 ::Date cock = this->notesHitArray->__get(balls).StaticCast<  ::Date >();
HXLINE(2409)				bool _hx_tmp;
HXDLIN(2409)				if (::hx::IsNotNull( cock )) {
HXLINE(2409)					Float _hx_tmp1 = (cock->getTime() + 1000);
HXDLIN(2409)					_hx_tmp = (_hx_tmp1 < ::Date_obj::now()->getTime());
            				}
            				else {
HXLINE(2409)					_hx_tmp = false;
            				}
HXDLIN(2409)				if (_hx_tmp) {
HXLINE(2410)					this->notesHitArray->remove(cock);
            				}
            				else {
HXLINE(2412)					balls = 0;
            				}
HXLINE(2413)				balls = (balls - 1);
            			}
HXLINE(2415)			this->nps = this->notesHitArray->length;
HXLINE(2416)			if ((this->nps > this->maxNPS)) {
HXLINE(2417)				this->maxNPS = this->nps;
            			}
            		}
HXLINE(2420)		if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(2421)			if ((::PlayState_obj::Stage->curStage == HX_("philly",28,77,5e,ef))) {
HXLINE(2424)				if (this->trainMoving) {
HXLINE(2426)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2426)					_hx_tmp->trainFrameTiming = (_hx_tmp->trainFrameTiming + elapsed);
HXLINE(2428)					if ((this->trainFrameTiming >= ((Float)0.041666666666666664))) {
HXLINE(2430)						this->updateTrainPos();
HXLINE(2431)						this->trainFrameTiming = ( (Float)(0) );
            					}
            				}
            			}
            		}
HXLINE(2438)		int lengthInPx = this->scoreTxt->textField->get_length();
HXDLIN(2438)		int lengthInPx1 = (lengthInPx * this->scoreTxt->frameHeight);
HXLINE(2440)		this->scoreTxt->set_x(((this->originalX - (( (Float)(lengthInPx1) ) / ( (Float)(2) ))) + 335));
HXLINE(2442)		bool _hx_tmp5;
HXDLIN(2442)		bool _hx_tmp6;
HXDLIN(2442)		bool _hx_tmp7;
HXDLIN(2442)		if (::PlayerSettings_obj::player1->controls->_pause->check()) {
HXLINE(2442)			_hx_tmp7 = this->startedCountdown;
            		}
            		else {
HXLINE(2442)			_hx_tmp7 = false;
            		}
HXDLIN(2442)		if (_hx_tmp7) {
HXLINE(2442)			_hx_tmp6 = this->canPause;
            		}
            		else {
HXLINE(2442)			_hx_tmp6 = false;
            		}
HXDLIN(2442)		if (_hx_tmp6) {
HXLINE(2442)			_hx_tmp5 = !(this->cannotDie);
            		}
            		else {
HXLINE(2442)			_hx_tmp5 = false;
            		}
HXDLIN(2442)		if (_hx_tmp5) {
HXLINE(2444)			this->persistentUpdate = false;
HXLINE(2445)			this->persistentDraw = true;
HXLINE(2446)			this->paused = true;
HXLINE(2449)			if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < ((Float)0.1))) {
HXLINE(2452)				{
HXLINE(2452)					 ::flixel::FlxState nextState =  ::GitarooPause_obj::__alloc( HX_CTX );
HXDLIN(2452)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2452)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE(2453)				this->clean();
            			}
            			else {
HXLINE(2456)				Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2456)				this->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            			}
            		}
HXLINE(2459)		bool _hx_tmp8;
HXDLIN(2459)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2459)		if (_this->keyManager->checkStatus(55,_this->status)) {
HXLINE(2459)			_hx_tmp8 = this->songStarted;
            		}
            		else {
HXLINE(2459)			_hx_tmp8 = false;
            		}
HXDLIN(2459)		if (_hx_tmp8) {
HXLINE(2461)			::PlayState_obj::songMultiplier = ( (Float)(1) );
HXLINE(2462)			if (this->useVideo) {
HXLINE(2464)				::GlobalVideo_obj::get()->__Field(HX_("stop",02,f0,5b,4c),::hx::paccDynamic)();
HXLINE(2465)				this->remove(this->videoSprite,null());
HXLINE(2467)				::openfl::Lib_obj::get_current()->stage->window->onFocusOut->remove(this->focusOut_dyn());
HXLINE(2468)				::openfl::Lib_obj::get_current()->stage->window->onFocusIn->remove(this->focusIn_dyn());
HXLINE(2470)				this->removedVideo = true;
            			}
HXLINE(2472)			this->cannotDie = true;
HXLINE(2474)			{
HXLINE(2474)				 ::flixel::FlxState nextState =  ::ChartingState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2474)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2474)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(2475)			this->clean();
HXLINE(2476)			::PlayState_obj::stageTesting = false;
HXLINE(2477)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->handleInput_dyn(),null());
HXLINE(2478)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->releaseInput_dyn(),null());
HXLINE(2480)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2482)				::PlayState_obj::luaModchart->die();
HXLINE(2483)				::PlayState_obj::luaModchart = null();
            			}
            		}
HXLINE(2491)		 ::HealthIcon _hx_tmp9 = this->iconP1;
HXDLIN(2491)		_hx_tmp9->setGraphicSize(::Std_obj::_hx_int((150 + (((Float)0.50) * (this->iconP1->get_width() - ( (Float)(150) ))))),null());
HXLINE(2492)		 ::HealthIcon _hx_tmp10 = this->iconP2;
HXDLIN(2492)		_hx_tmp10->setGraphicSize(::Std_obj::_hx_int((150 + (((Float)0.50) * (this->iconP2->get_width() - ( (Float)(150) ))))),null());
HXLINE(2494)		this->iconP1->updateHitbox();
HXLINE(2495)		this->iconP2->updateHitbox();
HXLINE(2497)		int iconOffset = 26;
HXLINE(2499)		 ::HealthIcon _hx_tmp11 = this->iconP1;
HXDLIN(2499)		Float _hx_tmp12 = this->healthBar->x;
HXDLIN(2499)		Float _hx_tmp13 = this->healthBar->get_width();
HXDLIN(2499)		_hx_tmp11->set_x((_hx_tmp12 + ((_hx_tmp13 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))) - ( (Float)(iconOffset) ))));
HXLINE(2500)		 ::HealthIcon _hx_tmp14 = this->iconP2;
HXDLIN(2500)		Float _hx_tmp15 = this->healthBar->x;
HXDLIN(2500)		Float _hx_tmp16 = this->healthBar->get_width();
HXDLIN(2500)		Float _hx_tmp17 = (_hx_tmp15 + (_hx_tmp16 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))));
HXDLIN(2500)		_hx_tmp14->set_x((_hx_tmp17 - (this->iconP2->get_width() - ( (Float)(iconOffset) ))));
HXLINE(2502)		if ((this->health > 2)) {
HXLINE(2503)			this->health = ( (Float)(2) );
            		}
HXLINE(2504)		if ((this->healthBar->get_percent() < 20)) {
HXLINE(2505)			this->iconP1->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(2507)			this->iconP1->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(2509)		if ((this->healthBar->get_percent() > 80)) {
HXLINE(2510)			this->iconP2->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(2512)			this->iconP2->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(2636)		bool _hx_tmp18;
HXDLIN(2636)		if (this->skipActive) {
HXLINE(2636)			_hx_tmp18 = (::Conductor_obj::songPosition >= this->skipTo);
            		}
            		else {
HXLINE(2636)			_hx_tmp18 = false;
            		}
HXDLIN(2636)		if (_hx_tmp18) {
HXLINE(2638)			this->remove(this->skipText,null());
HXLINE(2639)			this->skipActive = false;
            		}
HXLINE(2642)		bool _hx_tmp19;
HXDLIN(2642)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2642)		if (_this1->keyManager->checkStatus(32,_this1->status)) {
HXLINE(2642)			_hx_tmp19 = this->skipActive;
            		}
            		else {
HXLINE(2642)			_hx_tmp19 = false;
            		}
HXDLIN(2642)		if (_hx_tmp19) {
HXLINE(2644)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(2645)			this->vocals->pause();
HXLINE(2646)			::Conductor_obj::songPosition = this->skipTo;
HXLINE(2648)			::flixel::FlxG_obj::sound->music->set_time(::Conductor_obj::songPosition);
HXLINE(2649)			::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(2651)			this->vocals->set_time(::Conductor_obj::songPosition);
HXLINE(2652)			this->vocals->play(null(),null(),null());
HXLINE(2653)			this->remove(this->skipText,null());
HXLINE(2654)			this->skipActive = false;
            		}
HXLINE(2657)		if (this->startingSong) {
HXLINE(2659)			if (this->startedCountdown) {
HXLINE(2661)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(2661)				::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(2662)				::Conductor_obj::rawPosition = ::Conductor_obj::songPosition;
HXLINE(2663)				if ((::Conductor_obj::songPosition >= 0)) {
HXLINE(2664)					this->startSong();
            				}
            			}
            		}
            		else {
HXLINE(2670)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(2670)			::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * (( (Float)(1000) ) * ::PlayState_obj::songMultiplier)));
HXLINE(2671)			::Conductor_obj::rawPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(2676)			this->songPositionBar = ((::Conductor_obj::songPosition - this->songLength) / ( (Float)(1000) ));
HXLINE(2678)			this->currentSection = this->getSectionByTime(::Conductor_obj::songPosition);
HXLINE(2680)			if (!(this->paused)) {
HXLINE(2682)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2682)				_hx_tmp->songTime = (_hx_tmp->songTime + (::flixel::FlxG_obj::game->ticks - this->previousFrameTime));
HXLINE(2683)				this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(2686)				if ((::Conductor_obj::lastSongPos != ::Conductor_obj::songPosition)) {
HXLINE(2688)					this->songTime = ((this->songTime + ::Conductor_obj::songPosition) / ( (Float)(2) ));
HXLINE(2689)					::Conductor_obj::lastSongPos = ::Conductor_obj::songPosition;
            				}
            			}
            		}
HXLINE(2698)		bool _hx_tmp20;
HXDLIN(2698)		if (this->generatedMusic) {
HXLINE(2698)			_hx_tmp20 = ::hx::IsNotNull( this->currentSection );
            		}
            		else {
HXLINE(2698)			_hx_tmp20 = false;
            		}
HXDLIN(2698)		if (_hx_tmp20) {
HXLINE(2702)			if (this->allowedToCheer) {
HXLINE(2705)				bool _hx_tmp;
HXDLIN(2705)				bool _hx_tmp1;
HXDLIN(2705)				if ((::PlayState_obj::gf->animation->_curAnim->name != HX_("danceLeft",da,cc,f9,df))) {
HXLINE(2705)					_hx_tmp1 = (::PlayState_obj::gf->animation->_curAnim->name == HX_("danceRight",a9,7f,a6,91));
            				}
            				else {
HXLINE(2705)					_hx_tmp1 = true;
            				}
HXDLIN(2705)				if (!(_hx_tmp1)) {
HXLINE(2705)					_hx_tmp = (::PlayState_obj::gf->animation->_curAnim->name == HX_("idle",14,a7,b3,45));
            				}
            				else {
HXLINE(2705)					_hx_tmp = true;
            				}
HXDLIN(2705)				if (_hx_tmp) {
HXLINE(2710)					::String _hx_switch_0 = this->curSong;
            					if (  (_hx_switch_0==HX_("Blammed",76,2a,51,09)) ){
HXLINE(2753)						bool _hx_tmp;
HXDLIN(2753)						if ((this->curBeat > 30)) {
HXLINE(2753)							_hx_tmp = (this->curBeat < 190);
            						}
            						else {
HXLINE(2753)							_hx_tmp = false;
            						}
HXDLIN(2753)						if (_hx_tmp) {
HXLINE(2755)							bool _hx_tmp;
HXDLIN(2755)							if ((this->curBeat >= 90)) {
HXLINE(2755)								_hx_tmp = (this->curBeat > 128);
            							}
            							else {
HXLINE(2755)								_hx_tmp = true;
            							}
HXDLIN(2755)							if (_hx_tmp) {
HXLINE(2757)								if ((::hx::Mod(this->curBeat,4) == 2)) {
HXLINE(2759)									if (!(this->triggeredAlready)) {
HXLINE(2761)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2762)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2766)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2753)						goto _hx_goto_100;
            					}
            					if (  (_hx_switch_0==HX_("Bopeebo",90,29,16,da)) ){
HXLINE(2737)						bool _hx_tmp;
HXDLIN(2737)						if ((this->curBeat > 5)) {
HXLINE(2737)							_hx_tmp = (this->curBeat < 130);
            						}
            						else {
HXLINE(2737)							_hx_tmp = false;
            						}
HXDLIN(2737)						if (_hx_tmp) {
HXLINE(2739)							if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(2741)								if (!(this->triggeredAlready)) {
HXLINE(2743)									::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2744)									this->triggeredAlready = true;
            								}
            							}
            							else {
HXLINE(2748)								this->triggeredAlready = false;
            							}
            						}
HXLINE(2737)						goto _hx_goto_100;
            					}
            					if (  (_hx_switch_0==HX_("Cocoa",e9,0c,83,dd)) ){
HXLINE(2772)						if ((this->curBeat < 170)) {
HXLINE(2774)							bool _hx_tmp;
HXDLIN(2774)							if ((this->curBeat >= 65)) {
HXLINE(2774)								if ((this->curBeat > 130)) {
HXLINE(2774)									_hx_tmp = (this->curBeat < 145);
            								}
            								else {
HXLINE(2774)									_hx_tmp = false;
            								}
            							}
            							else {
HXLINE(2774)								_hx_tmp = true;
            							}
HXDLIN(2774)							if (_hx_tmp) {
HXLINE(2776)								if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(2778)									if (!(this->triggeredAlready)) {
HXLINE(2780)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2781)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2785)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2772)						goto _hx_goto_100;
            					}
            					if (  (_hx_switch_0==HX_("Eggnog",81,78,4e,29)) ){
HXLINE(2791)						bool _hx_tmp;
HXDLIN(2791)						bool _hx_tmp1;
HXDLIN(2791)						if ((this->curBeat > 10)) {
HXLINE(2791)							_hx_tmp1 = (this->curBeat != 111);
            						}
            						else {
HXLINE(2791)							_hx_tmp1 = false;
            						}
HXDLIN(2791)						if (_hx_tmp1) {
HXLINE(2791)							_hx_tmp = (this->curBeat < 220);
            						}
            						else {
HXLINE(2791)							_hx_tmp = false;
            						}
HXDLIN(2791)						if (_hx_tmp) {
HXLINE(2793)							if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(2795)								if (!(this->triggeredAlready)) {
HXLINE(2797)									::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2798)									this->triggeredAlready = true;
            								}
            							}
            							else {
HXLINE(2802)								this->triggeredAlready = false;
            							}
            						}
HXLINE(2791)						goto _hx_goto_100;
            					}
            					if (  (_hx_switch_0==HX_("Philly Nice",95,67,fc,96)) ){
HXLINE(2715)						if ((this->curBeat < 250)) {
HXLINE(2718)							bool _hx_tmp;
HXDLIN(2718)							if ((this->curBeat != 184)) {
HXLINE(2718)								_hx_tmp = (this->curBeat != 216);
            							}
            							else {
HXLINE(2718)								_hx_tmp = false;
            							}
HXDLIN(2718)							if (_hx_tmp) {
HXLINE(2720)								if ((::hx::Mod(this->curBeat,16) == 8)) {
HXLINE(2723)									if (!(this->triggeredAlready)) {
HXLINE(2725)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2726)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2730)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2715)						goto _hx_goto_100;
            					}
            					_hx_goto_100:;
            				}
            			}
HXLINE(2810)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2811)				::PlayState_obj::luaModchart->setVar(HX_("mustHit",ca,3b,5d,00), ::Dynamic(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)));
            			}
HXLINE(2814)			bool _hx_tmp;
HXDLIN(2814)			Float _hx_tmp1 = this->camFollow->x;
HXDLIN(2814)			if ((_hx_tmp1 != (::PlayState_obj::dad->getMidpoint(null())->x + 150))) {
HXLINE(2814)				_hx_tmp = !(( (bool)(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(2814)				_hx_tmp = false;
            			}
HXDLIN(2814)			if (_hx_tmp) {
HXLINE(2816)				int offsetX = 0;
HXLINE(2817)				int offsetY = 0;
HXLINE(2819)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2821)					offsetX = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followXOffset",ba,cc,46,b7),HX_("float",9c,c5,96,02))) );
HXLINE(2822)					offsetY = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followYOffset",7b,43,dc,e0),HX_("float",9c,c5,96,02))) );
            				}
HXLINE(2825)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2825)				Float _hx_tmp1 = ((::PlayState_obj::dad->getMidpoint(null())->x + 150) + offsetX);
HXDLIN(2825)				_hx_tmp->setPosition(_hx_tmp1,((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(100) )) + offsetY));
HXLINE(2827)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2828)					::PlayState_obj::luaModchart->executeState(HX_("playerTwoTurn",c8,15,04,05),::cpp::VirtualArray_obj::__new(0));
            				}
HXLINE(2832)				::String _hx_switch_1 = ::PlayState_obj::dad->curCharacter;
            				if (  (_hx_switch_1==HX_("mom",cb,16,53,00)) ||  (_hx_switch_1==HX_("mom-car",52,e6,f7,f6)) ){
HXLINE(2835)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2835)					_hx_tmp->set_y(::PlayState_obj::dad->getMidpoint(null())->y);
HXDLIN(2835)					goto _hx_goto_101;
            				}
            				if (  (_hx_switch_1==HX_("senpai",3c,df,8d,6b)) ||  (_hx_switch_1==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE(2837)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2837)					_hx_tmp->set_y((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(430) )));
HXLINE(2838)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2838)					_hx_tmp1->set_x((::PlayState_obj::dad->getMidpoint(null())->x - ( (Float)(100) )));
HXLINE(2836)					goto _hx_goto_101;
            				}
            				_hx_goto_101:;
            			}
HXLINE(2842)			bool _hx_tmp2;
HXDLIN(2842)			if (( (bool)(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(2842)				Float _hx_tmp = this->camFollow->x;
HXDLIN(2842)				_hx_tmp2 = (_hx_tmp != (::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) )));
            			}
            			else {
HXLINE(2842)				_hx_tmp2 = false;
            			}
HXDLIN(2842)			if (_hx_tmp2) {
HXLINE(2844)				int offsetX = 0;
HXLINE(2845)				int offsetY = 0;
HXLINE(2847)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2849)					offsetX = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followXOffset",ba,cc,46,b7),HX_("float",9c,c5,96,02))) );
HXLINE(2850)					offsetY = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followYOffset",7b,43,dc,e0),HX_("float",9c,c5,96,02))) );
            				}
HXLINE(2853)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2853)				Float _hx_tmp1 = ((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) )) + offsetX);
HXDLIN(2853)				_hx_tmp->setPosition(_hx_tmp1,((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(100) )) + offsetY));
HXLINE(2856)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2857)					::PlayState_obj::luaModchart->executeState(HX_("playerOneTurn",a2,b7,e0,d9),::cpp::VirtualArray_obj::__new(0));
            				}
HXLINE(2859)				if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(2860)					::String _hx_switch_2 = ::PlayState_obj::Stage->curStage;
            					if (  (_hx_switch_2==HX_("limo",1f,17,b3,47)) ){
HXLINE(2863)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2863)						_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(300) )));
HXDLIN(2863)						goto _hx_goto_102;
            					}
            					if (  (_hx_switch_2==HX_("mall",d4,3a,56,48)) ){
HXLINE(2865)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2865)						_hx_tmp->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXDLIN(2865)						goto _hx_goto_102;
            					}
            					if (  (_hx_switch_2==HX_("school",74,b8,c8,40)) ){
HXLINE(2867)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2867)						_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE(2868)						 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2868)						_hx_tmp1->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE(2866)						goto _hx_goto_102;
            					}
            					if (  (_hx_switch_2==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE(2870)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2870)						_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE(2871)						 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2871)						_hx_tmp1->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE(2869)						goto _hx_goto_102;
            					}
            					_hx_goto_102:;
            				}
            			}
            		}
HXLINE(2876)		bool _hx_tmp21;
HXDLIN(2876)		if (this->camZooming) {
HXLINE(2876)			_hx_tmp21 = (::Conductor_obj::bpm < 320);
            		}
            		else {
HXLINE(2876)			_hx_tmp21 = false;
            		}
HXDLIN(2876)		if (_hx_tmp21) {
HXLINE(2879)			if ((::Conductor_obj::bpm > 320)) {
HXLINE(2881)				this->camZooming = false;
            			}
HXLINE(2884)			if (::hx::IsLess( ::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic),((Float)0.8) )) {
HXLINE(2885)				::flixel::FlxG_obj::save->data->__SetField(HX_("zoom",13,a3,f8,50),((Float)0.8),::hx::paccDynamic);
            			}
HXLINE(2887)			if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic),((Float)1.2) )) {
HXLINE(2888)				::flixel::FlxG_obj::save->data->__SetField(HX_("zoom",13,a3,f8,50),((Float)1.2),::hx::paccDynamic);
            			}
HXLINE(2890)			if (!(this->executeModchart)) {
HXLINE(2892)				Float a = ::PlayState_obj::Stage->camZoom;
HXDLIN(2892)				::flixel::FlxG_obj::camera->set_zoom((a + (((Float)0.95) * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE(2893)				Float a1 = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic)) );
HXDLIN(2893)				this->camHUD->set_zoom((a1 + (((Float)0.95) * (this->camHUD->zoom - a1))));
HXLINE(2895)				this->camNotes->set_zoom(this->camHUD->zoom);
HXLINE(2896)				this->camSustains->set_zoom(this->camHUD->zoom);
            			}
            			else {
HXLINE(2900)				Float a = ::PlayState_obj::Stage->camZoom;
HXDLIN(2900)				::flixel::FlxG_obj::camera->set_zoom((a + (((Float)0.95) * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE(2901)				this->camHUD->set_zoom((1 + (((Float)0.95) * (this->camHUD->zoom - ( (Float)(1) )))));
HXLINE(2903)				this->camNotes->set_zoom(this->camHUD->zoom);
HXLINE(2904)				this->camSustains->set_zoom(this->camHUD->zoom);
            			}
            		}
HXLINE(2912)		if ((this->curSong == HX_("Fresh",4e,f6,b3,99))) {
HXLINE(2914)			switch((int)(this->curBeat)){
            				case (int)16: {
HXLINE(2917)					this->camZooming = true;
HXLINE(2918)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)48: {
HXLINE(2920)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)80: {
HXLINE(2922)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)112: {
HXLINE(2924)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)163: {
            				}
            				break;
            			}
            		}
HXLINE(2931)		bool _hx_tmp22;
HXDLIN(2931)		if ((this->health <= 0)) {
HXLINE(2931)			_hx_tmp22 = !(this->cannotDie);
            		}
            		else {
HXLINE(2931)			_hx_tmp22 = false;
            		}
HXDLIN(2931)		if (_hx_tmp22) {
HXLINE(2933)			if (!(this->usedTimeTravel)) {
HXLINE(2935)				::PlayState_obj::boyfriend->stunned = true;
HXLINE(2937)				this->persistentUpdate = false;
HXLINE(2938)				this->persistentDraw = false;
HXLINE(2939)				this->paused = true;
HXLINE(2941)				{
HXLINE(2941)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(2941)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(2942)				{
HXLINE(2942)					 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(2942)					_this1->cleanup(_this1->autoDestroy,true);
            				}
HXLINE(2944)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("InstantRespawn",e7,e4,09,0a),::hx::paccDynamic)) )) {
HXLINE(2946)					 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2946)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2946)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				else {
HXLINE(2950)					Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2950)					this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            				}
HXLINE(2955)				::String _hx_tmp = ( (::String)(((((HX_("GAME OVER -- ",e2,09,af,80) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2955)				::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(2961)				::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2955)				::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            			}
            			else {
HXLINE(2972)				this->health = ( (Float)(1) );
            			}
            		}
HXLINE(2974)		bool _hx_tmp23;
HXDLIN(2974)		if (!(this->inCutscene)) {
HXLINE(2974)			_hx_tmp23 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("resetButton",21,e5,f4,79),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2974)			_hx_tmp23 = false;
            		}
HXDLIN(2974)		if (_hx_tmp23) {
HXLINE(2976)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2976)			if (_this->keyManager->checkStatus(82,_this->status)) {
HXLINE(2978)				::PlayState_obj::boyfriend->stunned = true;
HXLINE(2980)				this->persistentUpdate = false;
HXLINE(2981)				this->persistentDraw = false;
HXLINE(2982)				this->paused = true;
HXLINE(2984)				{
HXLINE(2984)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(2984)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(2985)				{
HXLINE(2985)					 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(2985)					_this1->cleanup(_this1->autoDestroy,true);
            				}
HXLINE(2987)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("InstantRespawn",e7,e4,09,0a),::hx::paccDynamic)) )) {
HXLINE(2989)					 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2989)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2989)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				else {
HXLINE(2993)					Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2993)					this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            				}
HXLINE(2998)				::String _hx_tmp = ( (::String)(((((HX_("GAME OVER -- ",e2,09,af,80) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2998)				::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(3004)				::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2998)				::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            			}
            		}
HXLINE(3017)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis,Float,stepHeight1,::Array< bool >,holdArray3) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3023_update)
HXLINE(3027)				if (!(daNote->modifiedByLua)) {
HXLINE(3029)					if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(3031)						if (daNote->mustPress) {
HXLINE(3033)							 ::Note daNote1 = daNote;
HXDLIN(3033)							Float _hx_tmp = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(3034)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::songPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXLINE(3035)							Float _hx_tmp2;
HXDLIN(3035)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(3035)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(3035)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(3033)							Float _hx_tmp3 = (_hx_tmp + (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(3033)							daNote1->set_y((_hx_tmp3 - ( (Float)(daNote->noteYOff) )));
            						}
            						else {
HXLINE(3040)							 ::Note daNote1 = daNote;
HXDLIN(3040)							Float _hx_tmp = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(3041)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::songPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXDLIN(3041)							Float _hx_tmp2;
HXDLIN(3041)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(3041)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(3041)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(3040)							Float _hx_tmp3 = (_hx_tmp + (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(3040)							daNote1->set_y((_hx_tmp3 - ( (Float)(daNote->noteYOff) )));
            						}
HXLINE(3043)						if (daNote->isSustainNote) {
HXLINE(3046)							{
HXLINE(3046)								 ::Note _g = daNote;
HXDLIN(3046)								Float _g1 = _g->y;
HXDLIN(3046)								Float _hx_tmp = daNote->get_height();
HXDLIN(3046)								_g->set_y((_g1 - (_hx_tmp - stepHeight1)));
            							}
HXLINE(3049)							if (!(::PlayStateChangeables_obj::botPlay)) {
HXLINE(3051)								bool _hx_tmp;
HXDLIN(3051)								bool _hx_tmp1;
HXDLIN(3051)								bool _hx_tmp2;
HXDLIN(3051)								if (daNote->mustPress) {
HXLINE(3051)									_hx_tmp2 = daNote->wasGoodHit;
            								}
            								else {
HXLINE(3051)									_hx_tmp2 = true;
            								}
HXDLIN(3051)								if (!(_hx_tmp2)) {
HXLINE(3051)									_hx_tmp1 = holdArray3->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))));
            								}
            								else {
HXLINE(3051)									_hx_tmp1 = true;
            								}
HXDLIN(3051)								if (_hx_tmp1) {
HXLINE(3052)									Float _hx_tmp1 = (daNote->y - (daNote->offset->y * daNote->scale->y));
HXDLIN(3052)									Float _hx_tmp2 = (_hx_tmp1 + daNote->get_height());
HXLINE(3051)									_hx_tmp = (_hx_tmp2 >= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            								}
            								else {
HXLINE(3051)									_hx_tmp = false;
            								}
HXDLIN(3051)								if (_hx_tmp) {
HXLINE(3055)									 ::flixel::math::FlxRect swagRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,(daNote->frameWidth * 2),(daNote->frameHeight * 2));
HXLINE(3056)									swagRect->height = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(3059)									swagRect->y = (( (Float)(daNote->frameHeight) ) - swagRect->height);
HXLINE(3061)									daNote->set_clipRect(swagRect);
            								}
            							}
            							else {
HXLINE(3066)								 ::flixel::math::FlxRect swagRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,(daNote->frameWidth * 2),(daNote->frameHeight * 2));
HXLINE(3067)								swagRect->height = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(3070)								swagRect->y = (( (Float)(daNote->frameHeight) ) - swagRect->height);
HXLINE(3072)								daNote->set_clipRect(swagRect);
            							}
            						}
            					}
            					else {
HXLINE(3078)						if (daNote->mustPress) {
HXLINE(3079)							 ::Note daNote1 = daNote;
HXDLIN(3079)							Float _hx_tmp = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(3080)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::songPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXDLIN(3080)							Float _hx_tmp2;
HXDLIN(3080)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(3080)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(3080)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(3079)							Float _hx_tmp3 = (_hx_tmp - (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(3079)							daNote1->set_y((_hx_tmp3 + daNote->noteYOff));
            						}
            						else {
HXLINE(3083)							 ::Note daNote1 = daNote;
HXDLIN(3083)							Float _hx_tmp = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(3084)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::songPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXDLIN(3084)							Float _hx_tmp2;
HXDLIN(3084)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(3084)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(3084)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(3083)							Float _hx_tmp3 = (_hx_tmp - (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(3083)							daNote1->set_y((_hx_tmp3 + daNote->noteYOff));
            						}
HXLINE(3086)						if (daNote->isSustainNote) {
HXLINE(3088)							if (!(::PlayStateChangeables_obj::botPlay)) {
HXLINE(3090)								bool _hx_tmp;
HXDLIN(3090)								bool _hx_tmp1;
HXDLIN(3090)								bool _hx_tmp2;
HXDLIN(3090)								if (daNote->mustPress) {
HXLINE(3090)									_hx_tmp2 = daNote->wasGoodHit;
            								}
            								else {
HXLINE(3090)									_hx_tmp2 = true;
            								}
HXDLIN(3090)								if (!(_hx_tmp2)) {
HXLINE(3090)									_hx_tmp1 = holdArray3->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))));
            								}
            								else {
HXLINE(3090)									_hx_tmp1 = true;
            								}
HXDLIN(3090)								if (_hx_tmp1) {
HXLINE(3090)									_hx_tmp = ((daNote->y + (daNote->offset->y * daNote->scale->y)) <= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            								}
            								else {
HXLINE(3090)									_hx_tmp = false;
            								}
HXDLIN(3090)								if (_hx_tmp) {
HXLINE(3094)									Float swagRect = daNote->get_width();
HXDLIN(3094)									Float swagRect1 = (swagRect / daNote->scale->x);
HXDLIN(3094)									Float swagRect2 = daNote->get_height();
HXDLIN(3094)									 ::flixel::math::FlxRect swagRect3 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,swagRect1,(swagRect2 / daNote->scale->y));
HXLINE(3095)									swagRect3->y = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(3098)									 ::flixel::math::FlxRect swagRect4 = swagRect3;
HXDLIN(3098)									swagRect4->height = (swagRect4->height - swagRect3->y);
HXLINE(3100)									daNote->set_clipRect(swagRect3);
            								}
            							}
            							else {
HXLINE(3105)								Float swagRect = daNote->get_width();
HXDLIN(3105)								Float swagRect1 = (swagRect / daNote->scale->x);
HXDLIN(3105)								Float swagRect2 = daNote->get_height();
HXDLIN(3105)								 ::flixel::math::FlxRect swagRect3 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,swagRect1,(swagRect2 / daNote->scale->y));
HXLINE(3106)								swagRect3->y = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(3109)								 ::flixel::math::FlxRect swagRect4 = swagRect3;
HXDLIN(3109)								swagRect4->height = (swagRect4->height - swagRect3->y);
HXLINE(3111)								daNote->set_clipRect(swagRect3);
            							}
            						}
            					}
            				}
HXLINE(3117)				bool _hx_tmp;
HXDLIN(3117)				if (!(daNote->mustPress)) {
HXLINE(3117)					_hx_tmp = (::Conductor_obj::songPosition >= daNote->strumTime);
            				}
            				else {
HXLINE(3117)					_hx_tmp = false;
            				}
HXDLIN(3117)				if (_hx_tmp) {
HXLINE(3119)					if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic),HX_("Tutorial",be,4b,67,5c) )) {
HXLINE(3120)						_gthis->camZooming = true;
            					}
HXLINE(3122)					::String altAnim = HX_("",00,00,00,00);
HXLINE(3124)					if (daNote->isAlt) {
HXLINE(3126)						altAnim = HX_("-alt",1c,93,08,1e);
            					}
HXLINE(3131)					bool _hx_tmp;
HXDLIN(3131)					if (!(daNote->isParent)) {
HXLINE(3131)						_hx_tmp = ::hx::IsNotNull( daNote->parent );
            					}
            					else {
HXLINE(3131)						_hx_tmp = false;
            					}
HXDLIN(3131)					if (_hx_tmp) {
HXLINE(3133)						if ((daNote->spotInLine != (daNote->parent->children->length - 1))) {
            							HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            							void _hx_run( ::StaticArrow spr){
            								HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3141_update)
HXLINE(3141)								_gthis->pressArrow(spr,spr->ID,daNote);
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(3135)							int singData = ::Std_obj::_hx_int(::Math_obj::abs(( (Float)(daNote->noteData) )));
HXLINE(3136)							::PlayState_obj::dad->playAnim(((HX_("sing",4f,96,53,4c) + _gthis->dataSuffix->__get(singData)) + altAnim),true,null(),null());
HXLINE(3139)							::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_1(_gthis,daNote)),null());
HXLINE(3156)							if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3157)								::PlayState_obj::luaModchart->executeState(HX_("playerTwoSing",9a,c0,51,04),::cpp::VirtualArray_obj::__new(2)->init(0,::Math_obj::abs(( (Float)(daNote->noteData) )))->init(1,::Conductor_obj::songPosition));
            							}
HXLINE(3160)							::PlayState_obj::dad->holdTimer = ( (Float)(0) );
HXLINE(3162)							if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(3163)								_gthis->vocals->set_volume(( (Float)(1) ));
            							}
            						}
            					}
            					else {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            						void _hx_run( ::StaticArrow spr){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3174_update)
HXLINE(3174)							_gthis->pressArrow(spr,spr->ID,daNote);
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(3168)						int singData = ::Std_obj::_hx_int(::Math_obj::abs(( (Float)(daNote->noteData) )));
HXLINE(3169)						::PlayState_obj::dad->playAnim(((HX_("sing",4f,96,53,4c) + _gthis->dataSuffix->__get(singData)) + altAnim),true,null(),null());
HXLINE(3172)						::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_2(_gthis,daNote)),null());
HXLINE(3189)						if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3190)							::PlayState_obj::luaModchart->executeState(HX_("playerTwoSing",9a,c0,51,04),::cpp::VirtualArray_obj::__new(2)->init(0,::Math_obj::abs(( (Float)(daNote->noteData) )))->init(1,::Conductor_obj::songPosition));
            						}
HXLINE(3193)						::PlayState_obj::dad->holdTimer = ( (Float)(0) );
HXLINE(3195)						if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(3196)							_gthis->vocals->set_volume(( (Float)(1) ));
            						}
            					}
HXLINE(3198)					daNote->set_active(false);
HXLINE(3200)					daNote->kill();
HXLINE(3201)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(3202)					daNote->destroy();
            				}
HXLINE(3205)				bool _hx_tmp1;
HXDLIN(3205)				if (daNote->mustPress) {
HXLINE(3205)					_hx_tmp1 = !(daNote->modifiedByLua);
            				}
            				else {
HXLINE(3205)					_hx_tmp1 = false;
            				}
HXDLIN(3205)				if (_hx_tmp1) {
HXLINE(3207)					daNote->set_visible(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->visible);
HXLINE(3208)					daNote->set_x(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->x);
HXLINE(3209)					if (!(daNote->isSustainNote)) {
HXLINE(3210)						daNote->modAngle = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            					}
HXLINE(3211)					if (daNote->sustainActive) {
HXLINE(3213)						if (_gthis->executeModchart) {
HXLINE(3214)							daNote->set_alpha(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->alpha);
            						}
            					}
HXLINE(3216)					daNote->modAngle = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            				}
            				else {
HXLINE(3218)					bool _hx_tmp;
HXDLIN(3218)					if (!(daNote->wasGoodHit)) {
HXLINE(3218)						_hx_tmp = !(daNote->modifiedByLua);
            					}
            					else {
HXLINE(3218)						_hx_tmp = false;
            					}
HXDLIN(3218)					if (_hx_tmp) {
HXLINE(3220)						daNote->set_visible(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->visible);
HXLINE(3221)						daNote->set_x(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->x);
HXLINE(3222)						if (!(daNote->isSustainNote)) {
HXLINE(3223)							daNote->modAngle = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            						}
HXLINE(3224)						if (daNote->sustainActive) {
HXLINE(3226)							if (_gthis->executeModchart) {
HXLINE(3227)								daNote->set_alpha(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->alpha);
            							}
            						}
HXLINE(3229)						daNote->modAngle = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            					}
            				}
HXLINE(3232)				if (daNote->isSustainNote) {
HXLINE(3234)					{
HXLINE(3234)						 ::Note _g = daNote;
HXDLIN(3234)						Float _g1 = _g->x;
HXDLIN(3234)						_g->set_x((_g1 + ((daNote->get_width() / ( (Float)(2) )) + 20)));
            					}
HXLINE(3235)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(3236)						 ::Note _g = daNote;
HXDLIN(3236)						_g->set_x((_g->x - ( (Float)(11) )));
            					}
            				}
HXLINE(3243)				bool _hx_tmp2;
HXDLIN(3243)				bool _hx_tmp3;
HXDLIN(3243)				if (daNote->isSustainNote) {
HXLINE(3243)					_hx_tmp3 = daNote->wasGoodHit;
            				}
            				else {
HXLINE(3243)					_hx_tmp3 = false;
            				}
HXDLIN(3243)				if (_hx_tmp3) {
HXLINE(3243)					_hx_tmp2 = (::Conductor_obj::songPosition >= daNote->strumTime);
            				}
            				else {
HXLINE(3243)					_hx_tmp2 = false;
            				}
HXDLIN(3243)				if (_hx_tmp2) {
HXLINE(3245)					daNote->kill();
HXLINE(3246)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(3247)					daNote->destroy();
            				}
            				else {
HXLINE(3249)					bool _hx_tmp;
HXDLIN(3249)					bool _hx_tmp1;
HXDLIN(3249)					bool _hx_tmp2;
HXDLIN(3249)					bool _hx_tmp3;
HXDLIN(3249)					bool _hx_tmp4;
HXDLIN(3249)					if (daNote->mustPress) {
HXLINE(3249)						_hx_tmp4 = !(::PlayStateChangeables_obj::useDownscroll);
            					}
            					else {
HXLINE(3249)						_hx_tmp4 = false;
            					}
HXDLIN(3249)					if (!(_hx_tmp4)) {
HXLINE(3249)						if (daNote->mustPress) {
HXLINE(3249)							_hx_tmp3 = ::PlayStateChangeables_obj::useDownscroll;
            						}
            						else {
HXLINE(3249)							_hx_tmp3 = false;
            						}
            					}
            					else {
HXLINE(3249)						_hx_tmp3 = true;
            					}
HXDLIN(3249)					if (_hx_tmp3) {
HXLINE(3249)						_hx_tmp2 = daNote->mustPress;
            					}
            					else {
HXLINE(3249)						_hx_tmp2 = false;
            					}
HXDLIN(3249)					if (_hx_tmp2) {
HXLINE(3249)						_hx_tmp1 = (((daNote->strumTime / ::PlayState_obj::songMultiplier) - (::Conductor_obj::songPosition / ::PlayState_obj::songMultiplier)) < -((( (Float)(166) ) * ::Conductor_obj::timeScale)));
            					}
            					else {
HXLINE(3249)						_hx_tmp1 = false;
            					}
HXDLIN(3249)					if (_hx_tmp1) {
HXLINE(3249)						_hx_tmp = _gthis->songStarted;
            					}
            					else {
HXLINE(3249)						_hx_tmp = false;
            					}
HXDLIN(3249)					if (_hx_tmp) {
HXLINE(3253)						bool _hx_tmp;
HXDLIN(3253)						if (daNote->isSustainNote) {
HXLINE(3253)							_hx_tmp = daNote->wasGoodHit;
            						}
            						else {
HXLINE(3253)							_hx_tmp = false;
            						}
HXDLIN(3253)						if (_hx_tmp) {
HXLINE(3255)							daNote->kill();
HXLINE(3256)							_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
            						}
            						else {
HXLINE(3260)							bool _hx_tmp;
HXDLIN(3260)							if (::PlayState_obj::loadRep) {
HXLINE(3260)								_hx_tmp = daNote->isSustainNote;
            							}
            							else {
HXLINE(3260)								_hx_tmp = false;
            							}
HXDLIN(3260)							if (_hx_tmp) {
HXLINE(3263)								if (::hx::IsNotNull( _gthis->findByTime(daNote->strumTime) )) {
HXLINE(3264)									 ::PlayState _gthis1 = _gthis;
HXDLIN(3264)									_gthis1->totalNotesHit = (_gthis1->totalNotesHit + 1);
            								}
            								else {
HXLINE(3267)									_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(3268)									bool _hx_tmp;
HXDLIN(3268)									if (::PlayState_obj::theFunne) {
HXLINE(3268)										_hx_tmp = !(daNote->isSustainNote);
            									}
            									else {
HXLINE(3268)										_hx_tmp = false;
            									}
HXDLIN(3268)									if (_hx_tmp) {
HXLINE(3270)										_gthis->noteMiss(daNote->noteData,daNote);
            									}
HXLINE(3272)									if (daNote->isParent) {
HXLINE(3274)										 ::PlayState _gthis1 = _gthis;
HXDLIN(3274)										_gthis1->health = (_gthis1->health - ((Float)0.15));
HXLINE(3276)										{
HXLINE(3276)											int _g = 0;
HXDLIN(3276)											::Array< ::Dynamic> _g1 = daNote->children;
HXDLIN(3276)											while((_g < _g1->length)){
HXLINE(3276)												 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3276)												_g = (_g + 1);
HXLINE(3278)												i->set_alpha(((Float)0.3));
HXLINE(3279)												i->sustainActive = false;
            											}
            										}
            									}
            									else {
HXLINE(3284)										bool _hx_tmp;
HXDLIN(3284)										bool _hx_tmp1;
HXDLIN(3284)										bool _hx_tmp2;
HXDLIN(3284)										if (!(daNote->wasGoodHit)) {
HXLINE(3284)											_hx_tmp2 = daNote->isSustainNote;
            										}
            										else {
HXLINE(3284)											_hx_tmp2 = false;
            										}
HXDLIN(3284)										if (_hx_tmp2) {
HXLINE(3284)											_hx_tmp1 = daNote->sustainActive;
            										}
            										else {
HXLINE(3284)											_hx_tmp1 = false;
            										}
HXDLIN(3284)										if (_hx_tmp1) {
HXLINE(3284)											_hx_tmp = (daNote->spotInLine != daNote->parent->children->length);
            										}
            										else {
HXLINE(3284)											_hx_tmp = false;
            										}
HXDLIN(3284)										if (_hx_tmp) {
HXLINE(3291)											{
HXLINE(3291)												int _g = 0;
HXDLIN(3291)												::Array< ::Dynamic> _g1 = daNote->parent->children;
HXDLIN(3291)												while((_g < _g1->length)){
HXLINE(3291)													 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3291)													_g = (_g + 1);
HXLINE(3293)													i->set_alpha(((Float)0.3));
HXLINE(3294)													i->sustainActive = false;
            												}
            											}
HXLINE(3296)											if (daNote->parent->wasGoodHit) {
HXLINE(3297)												::PlayState_obj::misses++;
            											}
HXLINE(3298)											_gthis->updateAccuracy();
            										}
            										else {
HXLINE(3300)											bool _hx_tmp;
HXDLIN(3300)											if (!(daNote->wasGoodHit)) {
HXLINE(3300)												_hx_tmp = !(daNote->isSustainNote);
            											}
            											else {
HXLINE(3300)												_hx_tmp = false;
            											}
HXDLIN(3300)											if (_hx_tmp) {
HXLINE(3303)												 ::PlayState _gthis1 = _gthis;
HXDLIN(3303)												_gthis1->health = (_gthis1->health - ((Float)0.15));
            											}
            										}
            									}
            								}
            							}
            							else {
HXLINE(3310)								_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(3311)								bool _hx_tmp;
HXDLIN(3311)								if (::PlayState_obj::theFunne) {
HXLINE(3311)									_hx_tmp = !(daNote->isSustainNote);
            								}
            								else {
HXLINE(3311)									_hx_tmp = false;
            								}
HXDLIN(3311)								if (_hx_tmp) {
HXLINE(3313)									if (::PlayStateChangeables_obj::botPlay) {
HXLINE(3315)										daNote->rating = HX_("bad",c5,b1,4a,00);
HXLINE(3316)										_gthis->goodNoteHit(daNote,null());
            									}
            									else {
HXLINE(3319)										_gthis->noteMiss(daNote->noteData,daNote);
            									}
            								}
HXLINE(3322)								bool _hx_tmp1;
HXDLIN(3322)								if (daNote->isParent) {
HXLINE(3322)									_hx_tmp1 = daNote->visible;
            								}
            								else {
HXLINE(3322)									_hx_tmp1 = false;
            								}
HXDLIN(3322)								if (_hx_tmp1) {
HXLINE(3324)									 ::PlayState _gthis1 = _gthis;
HXDLIN(3324)									_gthis1->health = (_gthis1->health - ((Float)0.15));
HXLINE(3326)									{
HXLINE(3326)										int _g = 0;
HXDLIN(3326)										::Array< ::Dynamic> _g1 = daNote->children;
HXDLIN(3326)										while((_g < _g1->length)){
HXLINE(3326)											 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3326)											_g = (_g + 1);
HXLINE(3328)											i->set_alpha(((Float)0.3));
HXLINE(3329)											i->sustainActive = false;
            										}
            									}
            								}
            								else {
HXLINE(3334)									bool _hx_tmp;
HXDLIN(3334)									bool _hx_tmp1;
HXDLIN(3334)									bool _hx_tmp2;
HXDLIN(3334)									if (!(daNote->wasGoodHit)) {
HXLINE(3334)										_hx_tmp2 = daNote->isSustainNote;
            									}
            									else {
HXLINE(3334)										_hx_tmp2 = false;
            									}
HXDLIN(3334)									if (_hx_tmp2) {
HXLINE(3334)										_hx_tmp1 = daNote->sustainActive;
            									}
            									else {
HXLINE(3334)										_hx_tmp1 = false;
            									}
HXDLIN(3334)									if (_hx_tmp1) {
HXLINE(3334)										_hx_tmp = (daNote->spotInLine != daNote->parent->children->length);
            									}
            									else {
HXLINE(3334)										_hx_tmp = false;
            									}
HXDLIN(3334)									if (_hx_tmp) {
HXLINE(3341)										{
HXLINE(3341)											int _g = 0;
HXDLIN(3341)											::Array< ::Dynamic> _g1 = daNote->parent->children;
HXDLIN(3341)											while((_g < _g1->length)){
HXLINE(3341)												 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3341)												_g = (_g + 1);
HXLINE(3343)												i->set_alpha(((Float)0.3));
HXLINE(3344)												i->sustainActive = false;
            											}
            										}
HXLINE(3346)										if (daNote->parent->wasGoodHit) {
HXLINE(3347)											::PlayState_obj::misses++;
            										}
HXLINE(3348)										_gthis->updateAccuracy();
            									}
            									else {
HXLINE(3350)										bool _hx_tmp;
HXDLIN(3350)										if (!(daNote->wasGoodHit)) {
HXLINE(3350)											_hx_tmp = !(daNote->isSustainNote);
            										}
            										else {
HXLINE(3350)											_hx_tmp = false;
            										}
HXDLIN(3350)										if (_hx_tmp) {
HXLINE(3353)											 ::PlayState _gthis1 = _gthis;
HXDLIN(3353)											_gthis1->health = (_gthis1->health - ((Float)0.15));
            										}
            									}
            								}
            							}
            						}
HXLINE(3359)						daNote->set_visible(false);
HXLINE(3360)						daNote->kill();
HXLINE(3361)						_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3019)			bool holdArray = ::PlayerSettings_obj::player1->controls->_left->check();
HXDLIN(3019)			bool holdArray1 = ::PlayerSettings_obj::player1->controls->_down->check();
HXDLIN(3019)			bool holdArray2 = ::PlayerSettings_obj::player1->controls->_up->check();
HXDLIN(3019)			::Array< bool > holdArray3 = ::Array_obj< bool >::__new(4)->init(0,holdArray)->init(1,holdArray1)->init(2,holdArray2)->init(3,::PlayerSettings_obj::player1->controls->_right->check());
HXLINE(3020)			Float stepHeight = (((Float)0.45) * ::Conductor_obj::stepCrochet);
HXDLIN(3020)			Float stepHeight1 = (stepHeight * ::flixel::math::FlxMath_obj::roundDecimal(( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ),2));
HXLINE(3022)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_3(_gthis,stepHeight1,holdArray3)),null());
            		}
HXLINE(3366)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            			void _hx_run( ::StaticArrow spr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3369_update)
HXLINE(3369)				if (spr->animation->get_finished()) {
HXLINE(3371)					spr->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(3372)					spr->centerOffsets(null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3367)			::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_4()),null());
HXLINE(3375)			if (::PlayStateChangeables_obj::botPlay) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(1)
            				void _hx_run( ::StaticArrow spr){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3379_update)
HXLINE(3379)					if (spr->animation->get_finished()) {
HXLINE(3381)						spr->playAnim(HX_("static",ae,dc,fb,05),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(3377)				::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_5()),null());
            			}
            		}
HXLINE(3388)		bool _hx_tmp24;
HXDLIN(3388)		if (!(this->inCutscene)) {
HXLINE(3388)			_hx_tmp24 = this->songStarted;
            		}
            		else {
HXLINE(3388)			_hx_tmp24 = false;
            		}
HXDLIN(3388)		if (_hx_tmp24) {
HXLINE(3389)			this->keyShit();
            		}
HXLINE(3396)		this->super::update(elapsed);
            	}


 ::Dynamic PlayState_obj::getSectionByTime(Float ms){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3400_getSectionByTime)
HXLINE(3402)		{
HXLINE(3402)			int _g = 0;
HXDLIN(3402)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3402)			while((_g < _g1->length)){
HXLINE(3402)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3402)				_g = (_g + 1);
HXLINE(3404)				Float start = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(( (Float)(i->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) )));
HXLINE(3405)				Float end = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(( (Float)(i->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic)) )));
HXLINE(3408)				bool _hx_tmp;
HXDLIN(3408)				if ((ms >= start)) {
HXLINE(3408)					_hx_tmp = (ms < end);
            				}
            				else {
HXLINE(3408)					_hx_tmp = false;
            				}
HXDLIN(3408)				if (_hx_tmp) {
HXLINE(3410)					return i;
            				}
            			}
            		}
HXLINE(3415)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getSectionByTime,return )

void PlayState_obj::recalculateAllSectionTimes(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3423_recalculateAllSectionTimes)
HXDLIN(3423)		int _g = 0;
HXDLIN(3423)		int _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3423)		while((_g < _g1)){
HXDLIN(3423)			_g = (_g + 1);
HXDLIN(3423)			int i = (_g - 1);
HXLINE(3425)			 ::Dynamic section =  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i);
HXLINE(3427)			int currentBeat = (4 * i);
HXLINE(3429)			 ::TimingStruct currentSeg = ::TimingStruct_obj::getTimingAtBeat(( (Float)(currentBeat) ));
HXLINE(3431)			if (::hx::IsNull( currentSeg )) {
HXLINE(3432)				return;
            			}
HXLINE(3434)			Float start = ((( (Float)(currentBeat) ) - currentSeg->startBeat) / (currentSeg->bpm / ( (Float)(60) )));
HXLINE(3436)			section->__SetField(HX_("startTime",8f,45,f0,05),((currentSeg->startTime + start) * ( (Float)(1000) )),::hx::paccDynamic);
HXLINE(3438)			if ((i != 0)) {
HXLINE(3439)				 ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((i - 1))->__SetField(HX_("endTime",88,85,21,2f),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(3440)			section->__SetField(HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY,::hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,recalculateAllSectionTimes,(void))

void PlayState_obj::endSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3446_endSong)
HXLINE(3445)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3447)		this->endingSong = true;
HXLINE(3448)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->handleInput_dyn(),null());
HXLINE(3449)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->releaseInput_dyn(),null());
HXLINE(3450)		if (this->useVideo) {
HXLINE(3452)			::GlobalVideo_obj::get()->__Field(HX_("stop",02,f0,5b,4c),::hx::paccDynamic)();
HXLINE(3453)			::openfl::Lib_obj::get_current()->stage->window->onFocusOut->remove(this->focusOut_dyn());
HXLINE(3454)			::openfl::Lib_obj::get_current()->stage->window->onFocusIn->remove(this->focusIn_dyn());
HXLINE(3455)			::PlayState_obj::instance->remove(::PlayState_obj::instance->videoSprite,null()).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE(3459)		if (!(::PlayState_obj::loadRep)) {
HXLINE(3460)			::PlayState_obj::rep->SaveReplay(this->saveNotes,this->saveJudge,this->replayAna);
            		}
            		else {
HXLINE(3463)			::PlayStateChangeables_obj::botPlay = false;
HXLINE(3464)			::PlayStateChangeables_obj::scrollSpeed = ( (Float)(1) );
HXLINE(3465)			::PlayStateChangeables_obj::useDownscroll = false;
            		}
HXLINE(3468)		if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic),290 )) {
HXLINE(3469)			::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(290) ));
            		}
HXLINE(3472)		if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3474)			::PlayState_obj::luaModchart->die();
HXLINE(3475)			::PlayState_obj::luaModchart = null();
            		}
HXLINE(3479)		this->canPause = false;
HXLINE(3480)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE(3481)		this->vocals->set_volume(( (Float)(0) ));
HXLINE(3482)		{
HXLINE(3482)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3482)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(3483)		{
HXLINE(3483)			 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN(3483)			_this1->cleanup(_this1->autoDestroy,true);
            		}
HXLINE(3484)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(3488)			::String songHighscore = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE(3489)			::String _hx_switch_0 = songHighscore;
            			if (  (_hx_switch_0==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE(3492)				songHighscore = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN(3492)				goto _hx_goto_118;
            			}
            			if (  (_hx_switch_0==HX_("M.I.L.F",1e,4e,41,0d)) ){
HXLINE(3496)				songHighscore = HX_("Milf",f6,78,35,33);
HXDLIN(3496)				goto _hx_goto_118;
            			}
            			if (  (_hx_switch_0==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE(3494)				songHighscore = HX_("Philly",48,eb,f2,23);
HXDLIN(3494)				goto _hx_goto_118;
            			}
            			_hx_goto_118:;
HXLINE(3500)			::Highscore_obj::saveScore(songHighscore,::Math_obj::round(( (Float)(this->songScore) )),::PlayState_obj::storyDifficulty);
HXLINE(3501)			::String _hx_tmp = ::Ratings_obj::GenerateLetterRank(this->accuracy);
HXDLIN(3501)			::Highscore_obj::saveCombo(songHighscore,_hx_tmp,::PlayState_obj::storyDifficulty);
            		}
HXLINE(3505)		if (::PlayState_obj::offsetTesting) {
HXLINE(3507)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3507)			::String library = null();
HXDLIN(3507)			_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE(3508)			::PlayState_obj::offsetTesting = false;
HXLINE(3509)			{
HXLINE(3509)				 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::OptionsMenu_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(3509)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3509)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(3510)			this->clean();
HXLINE(3511)			::flixel::FlxG_obj::save->data->__SetField(HX_("offset",93,97,3f,60),this->offsetTest,::hx::paccDynamic);
            		}
            		else {
HXLINE(3513)			if (::PlayState_obj::stageTesting) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3516_endSong)
HXLINE(3517)					{
HXLINE(3517)						int _g = 0;
HXDLIN(3517)						::cpp::VirtualArray _g1 = ::PlayState_obj::Stage->toAdd;
HXDLIN(3517)						while((_g < _g1->get_length())){
HXLINE(3517)							 ::Dynamic bg = _g1->__get(_g);
HXDLIN(3517)							_g = (_g + 1);
HXLINE(3519)							_gthis->remove(bg,null()).StaticCast<  ::flixel::FlxBasic >();
            						}
            					}
HXLINE(3521)					{
HXLINE(3521)						int _g2 = 0;
HXDLIN(3521)						::Array< ::Dynamic> _g3 = ::PlayState_obj::Stage->layInFront;
HXDLIN(3521)						while((_g2 < _g3->length)){
HXLINE(3521)							::Array< ::Dynamic> array = _g3->__get(_g2).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(3521)							_g2 = (_g2 + 1);
HXLINE(3523)							{
HXLINE(3523)								int _g = 0;
HXDLIN(3523)								while((_g < array->length)){
HXLINE(3523)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(3523)									_g = (_g + 1);
HXLINE(3524)									_gthis->remove(bg,null()).StaticCast<  ::flixel::FlxBasic >();
            								}
            							}
            						}
            					}
HXLINE(3526)					_gthis->remove(::PlayState_obj::boyfriend,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3527)					_gthis->remove(::PlayState_obj::dad,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3528)					_gthis->remove(::PlayState_obj::gf,null()).StaticCast<  ::flixel::FlxBasic >();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(3515)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(3530)				{
HXLINE(3530)					 ::flixel::FlxState nextState =  ::StageDebugState_obj::__alloc( HX_CTX ,::PlayState_obj::Stage->curStage,null(),null(),null());
HXDLIN(3530)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3530)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
            			else {
HXLINE(3534)				if (::PlayState_obj::isStoryMode) {
HXLINE(3536)					 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN(3536)					::PlayState_obj::campaignScore = (::PlayState_obj::campaignScore + ::Math_obj::round(( (Float)(this->songScore) )));
HXLINE(3537)					 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3537)					::PlayState_obj::campaignMisses = (::PlayState_obj::campaignMisses + ::PlayState_obj::misses);
HXLINE(3538)					 ::Dynamic _hx_tmp2 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3538)					::PlayState_obj::campaignSicks = (::PlayState_obj::campaignSicks + ::PlayState_obj::sicks);
HXLINE(3539)					 ::Dynamic _hx_tmp3 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3539)					::PlayState_obj::campaignGoods = (::PlayState_obj::campaignGoods + ::PlayState_obj::goods);
HXLINE(3540)					 ::Dynamic _hx_tmp4 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3540)					::PlayState_obj::campaignBads = (::PlayState_obj::campaignBads + ::PlayState_obj::bads);
HXLINE(3541)					 ::Dynamic _hx_tmp5 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3541)					::PlayState_obj::campaignShits = (::PlayState_obj::campaignShits + ::PlayState_obj::shits);
HXLINE(3543)					::PlayState_obj::storyPlaylist->remove(::PlayState_obj::storyPlaylist->__get(0));
HXLINE(3545)					if ((::PlayState_obj::storyPlaylist->length <= 0)) {
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3557_endSong)
HXLINE(3557)							if (::hx::IsNull( _gthis->dialogue->__get(1) )) {
HXLINE(3559)								 ::flixel::FlxState nextState =  ::EndingState_obj::__alloc( HX_CTX ,null());
HXDLIN(3559)								if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3559)									::flixel::FlxG_obj::game->_requestedState = nextState;
            								}
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(3547)						this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(3548)						this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(3550)						this->paused = true;
HXLINE(3552)						{
HXLINE(3552)							 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3552)							_this->cleanup(_this->autoDestroy,true);
            						}
HXLINE(3553)						{
HXLINE(3553)							 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN(3553)							_this1->cleanup(_this1->autoDestroy,true);
            						}
HXLINE(3555)						 ::Dynamic alyisunbelievablystupid =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE(3563)						if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("scoreScreen",5e,6c,c3,13),::hx::paccDynamic)) )) {
HXLINE(3565)							if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("raveyard",18,cb,f2,df))) {
HXLINE(3567)								{
HXLINE(3567)									 ::Dynamic filter = null();
HXDLIN(3567)									 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,::PlayState_obj::strumLineNotes->members,filter);
HXDLIN(3567)									while(i->hasNext()){
HXLINE(3567)										 ::StaticArrow i1 = i->next().StaticCast<  ::StaticArrow >();
HXLINE(3568)										i1->set_visible(false);
            									}
            								}
HXLINE(3569)								this->camZooming = false;
HXLINE(3570)								this->canPause = false;
HXLINE(3571)								{
HXLINE(3571)									 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3571)									_this->cleanup(_this->autoDestroy,true);
            								}
HXLINE(3572)								{
HXLINE(3572)									 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN(3572)									_this1->cleanup(_this1->autoDestroy,true);
            								}
HXLINE(3573)								::String library = null();
HXDLIN(3573)								::Array< ::String > dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("carl/DialogueEnd/raveyardDialogueEnd",28,90,c6,ef) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(3574)								 ::DialogueBox doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,dialogue);
HXLINE(3575)								doof->scrollFactor->set(null(),null());
HXLINE(3576)								doof->finishThing = alyisunbelievablystupid;
HXLINE(3577)								doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3578)								this->add(doof);
HXLINE(3580)								::PlayState_obj::prevCamFollow = this->camFollow;
            							}
            							else {
            								HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            								void _hx_run( ::flixel::util::FlxTimer tmr){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3587_endSong)
HXLINE(3587)									::PlayState_obj::inResults = true;
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(3584)								this->openSubState( ::ResultsScreen_obj::__alloc( HX_CTX ,null()));
HXLINE(3585)								 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_2()),null());
            							}
            						}
            						else {
HXLINE(3593)							if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("raveyard",18,cb,f2,df))) {
HXLINE(3595)								{
HXLINE(3595)									 ::Dynamic filter = null();
HXDLIN(3595)									 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,::PlayState_obj::strumLineNotes->members,filter);
HXDLIN(3595)									while(i->hasNext()){
HXLINE(3595)										 ::StaticArrow i1 = i->next().StaticCast<  ::StaticArrow >();
HXLINE(3596)										i1->set_visible(false);
            									}
            								}
HXLINE(3597)								this->camZooming = false;
HXLINE(3598)								this->canPause = false;
HXLINE(3599)								{
HXLINE(3599)									 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3599)									_this->cleanup(_this->autoDestroy,true);
            								}
HXLINE(3600)								{
HXLINE(3600)									 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN(3600)									_this1->cleanup(_this1->autoDestroy,true);
            								}
HXLINE(3601)								::String library = null();
HXDLIN(3601)								::Array< ::String > dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("carl/DialogueEnd/raveyardDialogueEnd",28,90,c6,ef) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(3602)								 ::DialogueBox doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,dialogue);
HXLINE(3603)								doof->scrollFactor->set(null(),null());
HXLINE(3604)								doof->finishThing = alyisunbelievablystupid;
HXLINE(3605)								doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3606)								this->add(doof);
HXLINE(3608)								::PlayState_obj::prevCamFollow = this->camFollow;
            							}
            							else {
HXLINE(3612)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3612)								::String library = null();
HXDLIN(3612)								_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE(3613)								::Conductor_obj::changeBPM(( (Float)(102) ),null());
HXLINE(3614)								{
HXLINE(3614)									 ::flixel::FlxState nextState =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(3614)									if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3614)										::flixel::FlxG_obj::game->_requestedState = nextState;
            									}
            								}
HXLINE(3615)								this->clean();
            							}
            						}
HXLINE(3620)						if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3622)							::PlayState_obj::luaModchart->die();
HXLINE(3623)							::PlayState_obj::luaModchart = null();
            						}
HXLINE(3627)						if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(3629)							if (::NGio_obj::isLoggedIn) {
HXLINE(3629)								 ::io::newgrounds::objects::Medal medal = ( ( ::io::newgrounds::objects::Medal)(::io::newgrounds::NG_obj::core->medals->get(60961)) );
HXDLIN(3629)								if (!(( (bool)(medal->_data->__Field(HX_("unlocked",23,34,0e,5c),::hx::paccDynamic)) ))) {
HXLINE(3629)									medal->sendUnlock();
            								}
            							}
HXLINE(3630)							::Highscore_obj::saveWeekScore(::PlayState_obj::storyWeek,::PlayState_obj::campaignScore,::PlayState_obj::storyDifficulty);
            						}
HXLINE(3633)						::StoryMenuState_obj::unlockNextWeek(::PlayState_obj::storyWeek);
            					}
            					else {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis,::String,poop) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3669_endSong)
HXLINE(3670)							::PlayState_obj::prevCamFollow = _gthis->camFollow;
HXLINE(3671)							if (::hx::IsNull( _gthis->dialogue->__get(1) )) {
HXLINE(3673)								::PlayState_obj::SONG = ::Song_obj::loadFromJson(poop,::PlayState_obj::storyPlaylist->__get(0));
HXLINE(3674)								{
HXLINE(3674)									 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3674)									_this->cleanup(_this->autoDestroy,true);
            								}
HXLINE(3676)								{
HXLINE(3676)									 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(3676)									if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3676)										::flixel::FlxG_obj::game->_requestedState = nextState;
            									}
            								}
HXLINE(3677)								_gthis->clean();
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

            						HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis, ::Dynamic,alyisreallystupid,::String,poop) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3682_endSong)
HXLINE(3683)							{
HXLINE(3683)								 ::Dynamic filter = null();
HXDLIN(3683)								 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,::PlayState_obj::strumLineNotes->members,filter);
HXDLIN(3683)								while(i->hasNext()){
HXLINE(3683)									 ::StaticArrow i1 = i->next().StaticCast<  ::StaticArrow >();
HXLINE(3684)									i1->set_visible(false);
            								}
            							}
HXLINE(3685)							_gthis->camZooming = false;
HXLINE(3686)							_gthis->canPause = false;
HXLINE(3687)							{
HXLINE(3687)								 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3687)								_this->cleanup(_this->autoDestroy,true);
            							}
HXLINE(3688)							{
HXLINE(3688)								 ::flixel::_hx_system::FlxSound _this1 = _gthis->vocals;
HXDLIN(3688)								_this1->cleanup(_this1->autoDestroy,true);
            							}
HXLINE(3689)							::String _hx_switch_1 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
            							if (  (_hx_switch_1==HX_("crystalized",46,89,53,f2)) ){
HXLINE(3701)								::String library = null();
HXDLIN(3701)								::Array< ::String > dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("carl/DialogueEnd/crystalizedDialogueEnd",60,bb,2c,07) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(3702)								 ::DialogueBox doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,dialogue);
HXLINE(3703)								doof->scrollFactor->set(null(),null());
HXLINE(3704)								doof->finishThing = alyisreallystupid;
HXLINE(3705)								doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXLINE(3706)								_gthis->add(doof).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3708)								::PlayState_obj::prevCamFollow = _gthis->camFollow;
HXLINE(3700)								goto _hx_goto_126;
            							}
            							if (  (_hx_switch_1==HX_("dungeon",fa,68,99,a0)) ){
HXLINE(3692)								::String library = null();
HXDLIN(3692)								::Array< ::String > dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("carl/DialogueEnd/dungeonDialogueEnd",ac,22,d1,f9) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(3693)								 ::DialogueBox doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,dialogue);
HXLINE(3694)								doof->scrollFactor->set(null(),null());
HXLINE(3695)								doof->finishThing = alyisreallystupid;
HXLINE(3696)								doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXLINE(3697)								_gthis->add(doof).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3699)								::PlayState_obj::prevCamFollow = _gthis->camFollow;
HXLINE(3691)								goto _hx_goto_126;
            							}
            							if (  (_hx_switch_1==HX_("necromancipation",9c,e3,00,b3)) ){
HXLINE(3710)								::String library = null();
HXDLIN(3710)								::Array< ::String > dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("carl/DialogueEnd/necromancipationDialogueEnd",24,83,2c,51) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(3711)								 ::DialogueBox doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,dialogue);
HXLINE(3712)								doof->scrollFactor->set(null(),null());
HXLINE(3713)								doof->finishThing = alyisreallystupid;
HXLINE(3714)								doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXLINE(3715)								_gthis->add(doof).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3717)								::PlayState_obj::prevCamFollow = _gthis->camFollow;
HXLINE(3709)								goto _hx_goto_126;
            							}
            							if (  (_hx_switch_1==HX_("raveyard",18,cb,f2,df)) ){
HXLINE(3719)								::String library = null();
HXDLIN(3719)								::Array< ::String > dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("carl/DialogueEnd/raveyardDialogueEnd",28,90,c6,ef) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(3720)								 ::DialogueBox doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,dialogue);
HXLINE(3721)								doof->scrollFactor->set(null(),null());
HXLINE(3722)								doof->finishThing = alyisreallystupid;
HXLINE(3723)								doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXLINE(3724)								_gthis->add(doof).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3726)								::PlayState_obj::prevCamFollow = _gthis->camFollow;
HXLINE(3718)								goto _hx_goto_126;
            							}
            							/* default */{
HXLINE(3728)								::PlayState_obj::prevCamFollow = _gthis->camFollow;
HXLINE(3730)								::PlayState_obj::SONG = ::Song_obj::loadFromJson(poop,::PlayState_obj::storyPlaylist->__get(0));
HXLINE(3731)								{
HXLINE(3731)									 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3731)									_this->cleanup(_this->autoDestroy,true);
            								}
HXLINE(3733)								{
HXLINE(3733)									 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(3733)									if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3733)										::flixel::FlxG_obj::game->_requestedState = nextState;
            									}
            								}
HXLINE(3734)								_gthis->clean();
            							}
            							_hx_goto_126:;
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(3638)						::String songFormat = ::StringTools_obj::replace(::PlayState_obj::storyPlaylist->__get(0),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE(3639)						::String _hx_switch_2 = songFormat;
            						if (  (_hx_switch_2==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE(3642)							songFormat = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN(3642)							goto _hx_goto_124;
            						}
            						if (  (_hx_switch_2==HX_("M.I.L.F",1e,4e,41,0d)) ){
HXLINE(3646)							songFormat = HX_("Milf",f6,78,35,33);
HXDLIN(3646)							goto _hx_goto_124;
            						}
            						if (  (_hx_switch_2==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE(3644)							songFormat = HX_("Philly",48,eb,f2,23);
HXDLIN(3644)							goto _hx_goto_124;
            						}
            						_hx_goto_124:;
HXLINE(3649)						::String poop = ::Highscore_obj::formatSong(songFormat,::PlayState_obj::storyDifficulty);
HXLINE(3654)						if ((::StringTools_obj::replace(::PlayState_obj::storyPlaylist->__get(0),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase() == HX_("eggnog",61,04,ba,f4))) {
HXLINE(3656)							 ::flixel::FlxSprite blackShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(-(::flixel::FlxG_obj::width)) ) * ::flixel::FlxG_obj::camera->zoom),(( (Float)(-(::flixel::FlxG_obj::height)) ) * ::flixel::FlxG_obj::camera->zoom),null());
HXDLIN(3656)							 ::flixel::FlxSprite blackShit1 = blackShit->makeGraphic((::flixel::FlxG_obj::width * 3),(::flixel::FlxG_obj::height * 3),-16777216,null(),null());
HXLINE(3658)							blackShit1->scrollFactor->set(null(),null());
HXLINE(3659)							this->add(blackShit1);
HXLINE(3660)							this->camHUD->set_visible(false);
HXLINE(3662)							 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3662)							_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Shut_off",86,a9,43,29),null()),null(),null(),null(),null(),null());
            						}
HXLINE(3665)						::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(3666)						::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE(3668)						 ::Dynamic alyisreallystupid =  ::Dynamic(new _hx_Closure_3(_gthis,poop));
HXLINE(3681)						 ::Dynamic alyisstupid =  ::Dynamic(new _hx_Closure_4(_gthis,alyisreallystupid,poop));
HXLINE(3737)						alyisstupid();
            					}
            				}
            				else {
HXLINE(3744)					this->paused = true;
HXLINE(3746)					{
HXLINE(3746)						 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3746)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(3747)					{
HXLINE(3747)						 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN(3747)						_this1->cleanup(_this1->autoDestroy,true);
            					}
HXLINE(3749)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("scoreScreen",5e,6c,c3,13),::hx::paccDynamic)) )) {
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer tmr){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3754_endSong)
HXLINE(3754)							::PlayState_obj::inResults = true;
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(3751)						this->openSubState( ::ResultsScreen_obj::__alloc( HX_CTX ,null()));
HXLINE(3752)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_5()),null());
            					}
            					else {
HXLINE(3759)						{
HXLINE(3759)							 ::flixel::FlxState nextState =  ::FreeplayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(3759)							if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3759)								::flixel::FlxG_obj::game->_requestedState = nextState;
            							}
            						}
HXLINE(3760)						this->clean();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endSong,(void))

Float PlayState_obj::getRatesScore(Float rate,Float score){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3772_getRatesScore)
HXLINE(3773)		Float rateX = ( (Float)(1) );
HXLINE(3774)		Float lastScore = score;
HXLINE(3775)		Float pr = (rate - ((Float)0.05));
HXLINE(3776)		if ((pr < ((Float)1.00))) {
HXLINE(3777)			pr = ( (Float)(1) );
            		}
HXLINE(3779)		while((rateX <= pr)){
HXLINE(3781)			if ((rateX > pr)) {
HXLINE(3782)				goto _hx_goto_134;
            			}
HXLINE(3783)			lastScore = (score + ((lastScore * rateX) * ((Float)0.022)));
HXLINE(3784)			rateX = (rateX + ((Float)0.05));
            		}
            		_hx_goto_134:;
HXLINE(3787)		int actualScore = ::Math_obj::round((score + (( (Float)(::Math_obj::floor((lastScore * pr))) ) * ((Float)0.022))));
HXLINE(3789)		return ( (Float)(actualScore) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,getRatesScore,return )

void PlayState_obj::popUpScore( ::Note daNote){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3797_popUpScore)
HXLINE(3796)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3798)		Float noteDiff;
HXLINE(3799)		if (::hx::IsNotNull( daNote )) {
HXLINE(3800)			noteDiff = -((daNote->strumTime - ::Conductor_obj::songPosition));
            		}
            		else {
HXLINE(3802)			noteDiff = ::Conductor_obj::safeZoneOffset;
            		}
HXLINE(3803)		Float wife = ::EtternaFunctions_obj::wife3(-(noteDiff),::Conductor_obj::timeScale);
HXLINE(3805)		this->vocals->set_volume(( (Float)(1) ));
HXLINE(3806)		::String placement = ::Std_obj::string(this->combo);
HXLINE(3808)		 ::flixel::text::FlxText coolText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,placement,32,null());
HXLINE(3809)		coolText->screenCenter(null());
HXLINE(3810)		coolText->set_x((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.55)));
HXLINE(3811)		{
HXLINE(3811)			 ::flixel::text::FlxText _g = coolText;
HXDLIN(3811)			_g->set_y((_g->y - ( (Float)(350) )));
            		}
HXLINE(3812)		coolText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3815)		 ::flixel::FlxSprite rating =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(3816)		Float score = ( (Float)(350) );
HXLINE(3818)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),1 )) {
HXLINE(3819)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3819)			_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + wife);
            		}
HXLINE(3821)		::String daRating = ::Ratings_obj::judgeNote(noteDiff);
HXLINE(3823)		::String _hx_switch_0 = daRating;
            		if (  (_hx_switch_0==HX_("bad",c5,b1,4a,00)) ){
HXLINE(3835)			daRating = HX_("bad",c5,b1,4a,00);
HXLINE(3836)			score = ( (Float)(0) );
HXLINE(3837)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3837)			_hx_tmp->health = (_hx_tmp->health - ((Float)0.06));
HXLINE(3838)			this->ss = false;
HXLINE(3839)			::PlayState_obj::bads++;
HXLINE(3840)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(3841)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3841)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.50));
            			}
HXLINE(3834)			goto _hx_goto_136;
            		}
            		if (  (_hx_switch_0==HX_("good",3d,95,69,44)) ){
HXLINE(3843)			daRating = HX_("good",3d,95,69,44);
HXLINE(3844)			score = ( (Float)(200) );
HXLINE(3845)			this->ss = false;
HXLINE(3846)			::PlayState_obj::goods++;
HXLINE(3847)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(3848)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3848)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.75));
            			}
HXLINE(3842)			goto _hx_goto_136;
            		}
            		if (  (_hx_switch_0==HX_("shit",c0,cf,52,4c)) ){
HXLINE(3826)			score = ( (Float)(-300) );
HXLINE(3827)			this->combo = 0;
HXLINE(3828)			::PlayState_obj::misses++;
HXLINE(3829)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3829)			_hx_tmp->health = (_hx_tmp->health - ((Float)0.1));
HXLINE(3830)			this->ss = false;
HXLINE(3831)			::PlayState_obj::shits++;
HXLINE(3832)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(3833)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3833)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit - ( (Float)(1) ));
            			}
HXLINE(3825)			goto _hx_goto_136;
            		}
            		if (  (_hx_switch_0==HX_("sick",be,8c,53,4c)) ){
HXLINE(3850)			if ((this->health < 2)) {
HXLINE(3851)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3851)				_hx_tmp->health = (_hx_tmp->health + ((Float)0.04));
            			}
HXLINE(3852)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(3853)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3853)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            			}
HXLINE(3855)			 ::NoteSplash bruhSplash = this->grpNoteSplashes->recycle(::hx::ClassOf< ::NoteSplash >(),null(),null(),null()).StaticCast<  ::NoteSplash >();
HXLINE(3856)			bruhSplash->setupNoteSplash(daNote->noteData,daNote->x,this->strumLine->y);
HXLINE(3857)			this->grpNoteSplashes->add(bruhSplash).StaticCast<  ::NoteSplash >();
HXLINE(3858)			::PlayState_obj::sicks++;
HXLINE(3849)			goto _hx_goto_136;
            		}
            		_hx_goto_136:;
HXLINE(3861)		if ((::PlayState_obj::songMultiplier >= ((Float)1.05))) {
HXLINE(3862)			score = this->getRatesScore(::PlayState_obj::songMultiplier,score);
            		}
HXLINE(3867)		bool _hx_tmp;
HXDLIN(3867)		if ((daRating == HX_("shit",c0,cf,52,4c))) {
HXLINE(3867)			_hx_tmp = (daRating != HX_("bad",c5,b1,4a,00));
            		}
            		else {
HXLINE(3867)			_hx_tmp = true;
            		}
HXDLIN(3867)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4083_popUpScore)
HXLINE(4084)				if (::hx::IsNotNull( _gthis->currentTimingShown )) {
HXLINE(4085)					 ::flixel::text::FlxText _g = _gthis->currentTimingShown;
HXDLIN(4085)					_g->set_alpha((_g->alpha - ((Float)0.02)));
            				}
HXLINE(4086)				_gthis->timeShown++;
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::flixel::text::FlxText,coolText, ::flixel::FlxSprite,comboSpr1, ::flixel::FlxSprite,rating) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4092_popUpScore)
HXLINE(4093)				coolText->destroy();
HXLINE(4094)				comboSpr1->destroy();
HXLINE(4095)				bool _hx_tmp;
HXDLIN(4095)				if (::hx::IsNotNull( _gthis->currentTimingShown )) {
HXLINE(4095)					_hx_tmp = (_gthis->timeShown >= 20);
            				}
            				else {
HXLINE(4095)					_hx_tmp = false;
            				}
HXDLIN(4095)				if (_hx_tmp) {
HXLINE(4097)					_gthis->remove(_gthis->currentTimingShown,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4098)					_gthis->currentTimingShown = null();
            				}
HXLINE(4100)				rating->destroy();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3869)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3869)			_hx_tmp->songScore = (_hx_tmp->songScore + ::Math_obj::round(score));
HXLINE(3879)			::String pixelShitPart1 = HX_("",00,00,00,00);
HXLINE(3880)			::String pixelShitPart2 = HX_("",00,00,00,00);
HXLINE(3881)			::String pixelShitPart3 = null();
HXLINE(3883)			if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(3885)				pixelShitPart1 = HX_("weeb/pixelUI/",79,62,e4,09);
HXLINE(3886)				pixelShitPart2 = HX_("-pixel",39,03,b3,c0);
HXLINE(3887)				pixelShitPart3 = HX_("week6",c2,95,be,c7);
            			}
HXLINE(3890)			 ::flixel::FlxSprite rating1 = rating;
HXDLIN(3890)			rating1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + daRating) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),pixelShitPart3),null(),null(),null(),null(),null());
HXLINE(3891)			rating->screenCenter(null());
HXLINE(3892)			{
HXLINE(3892)				 ::flixel::FlxSprite _g = rating;
HXDLIN(3892)				_g->set_y((_g->y - ( (Float)(50) )));
            			}
HXLINE(3893)			rating->set_x((coolText->x - ( (Float)(125) )));
HXLINE(3895)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHit",bf,5d,c0,31),::hx::paccDynamic)) )) {
HXLINE(3897)				rating->set_x(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHitX",b9,a9,91,56),::hx::paccDynamic)) ));
HXLINE(3898)				rating->set_y(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHitY",ba,a9,91,56),::hx::paccDynamic)) ));
            			}
HXLINE(3900)			rating->acceleration->set_y(( (Float)(550) ));
HXLINE(3901)			{
HXLINE(3901)				 ::flixel::math::FlxPoint _g1 = rating->velocity;
HXDLIN(3901)				Float _g2 = _g1->y;
HXDLIN(3901)				_g1->set_y((_g2 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,175,null())) )));
            			}
HXLINE(3902)			{
HXLINE(3902)				 ::flixel::math::FlxPoint _g3 = rating->velocity;
HXDLIN(3902)				Float _g4 = _g3->x;
HXDLIN(3902)				_g3->set_x((_g4 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(0,10,null())) )));
            			}
HXLINE(3904)			Float msTiming = ::HelperFunctions_obj::truncateFloat((noteDiff / ::PlayState_obj::songMultiplier),3);
HXLINE(3905)			bool _hx_tmp1;
HXDLIN(3905)			if (::PlayStateChangeables_obj::botPlay) {
HXLINE(3905)				_hx_tmp1 = !(::PlayState_obj::loadRep);
            			}
            			else {
HXLINE(3905)				_hx_tmp1 = false;
            			}
HXDLIN(3905)			if (_hx_tmp1) {
HXLINE(3906)				msTiming = ( (Float)(0) );
            			}
HXLINE(3908)			if (::PlayState_obj::loadRep) {
HXLINE(3909)				msTiming = ::HelperFunctions_obj::truncateFloat(( (Float)(this->findByTime(daNote->strumTime)->__get(3)) ),3);
            			}
HXLINE(3911)			if (::hx::IsNotNull( this->currentTimingShown )) {
HXLINE(3912)				this->remove(this->currentTimingShown,null());
            			}
HXLINE(3914)			this->currentTimingShown =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("0ms",96,cb,24,00),null(),null());
HXLINE(3915)			this->timeShown = 0;
HXLINE(3916)			::String _hx_switch_1 = daRating;
            			if (  (_hx_switch_1==HX_("good",3d,95,69,44)) ){
HXLINE(3921)				this->currentTimingShown->set_color(-16744448);
HXDLIN(3921)				goto _hx_goto_137;
            			}
            			if (  (_hx_switch_1==HX_("bad",c5,b1,4a,00)) ||  (_hx_switch_1==HX_("shit",c0,cf,52,4c)) ){
HXLINE(3919)				this->currentTimingShown->set_color(-65536);
HXDLIN(3919)				goto _hx_goto_137;
            			}
            			if (  (_hx_switch_1==HX_("sick",be,8c,53,4c)) ){
HXLINE(3923)				this->currentTimingShown->set_color(-16711681);
HXDLIN(3923)				goto _hx_goto_137;
            			}
            			_hx_goto_137:;
HXLINE(3925)			this->currentTimingShown->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXLINE(3926)			this->currentTimingShown->set_borderSize(( (Float)(1) ));
HXLINE(3927)			this->currentTimingShown->set_borderColor(-16777216);
HXLINE(3928)			this->currentTimingShown->set_text((msTiming + HX_("ms",66,5f,00,00)));
HXLINE(3929)			this->currentTimingShown->set_size(20);
HXLINE(3931)			bool _hx_tmp2;
HXDLIN(3931)			if ((msTiming >= ((Float)0.03))) {
HXLINE(3931)				_hx_tmp2 = ::PlayState_obj::offsetTesting;
            			}
            			else {
HXLINE(3931)				_hx_tmp2 = false;
            			}
HXDLIN(3931)			if (_hx_tmp2) {
HXLINE(3934)				this->hits->shift();
HXLINE(3935)				this->hits->shift();
HXLINE(3936)				this->hits->shift();
HXLINE(3937)				this->hits->pop();
HXLINE(3938)				this->hits->pop();
HXLINE(3939)				this->hits->pop();
HXLINE(3940)				this->hits->push(msTiming);
HXLINE(3942)				Float total = ((Float)0.0);
HXLINE(3944)				{
HXLINE(3944)					int _g = 0;
HXDLIN(3944)					::Array< Float > _g1 = this->hits;
HXDLIN(3944)					while((_g < _g1->length)){
HXLINE(3944)						Float i = _g1->__get(_g);
HXDLIN(3944)						_g = (_g + 1);
HXLINE(3945)						total = (total + i);
            					}
            				}
HXLINE(3947)				this->offsetTest = ::HelperFunctions_obj::truncateFloat((total / ( (Float)(this->hits->length) )),2);
            			}
HXLINE(3950)			if ((this->currentTimingShown->alpha != 1)) {
HXLINE(3951)				this->currentTimingShown->set_alpha(( (Float)(1) ));
            			}
HXLINE(3953)			bool _hx_tmp3;
HXDLIN(3953)			if (::PlayStateChangeables_obj::botPlay) {
HXLINE(3953)				_hx_tmp3 = ::PlayState_obj::loadRep;
            			}
            			else {
HXLINE(3953)				_hx_tmp3 = true;
            			}
HXDLIN(3953)			if (_hx_tmp3) {
HXLINE(3954)				this->add(this->currentTimingShown);
            			}
HXLINE(3956)			 ::flixel::FlxSprite comboSpr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(3956)			 ::flixel::FlxSprite comboSpr1 = comboSpr->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + HX_("combo",4e,28,5d,4a)) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),pixelShitPart3),null(),null(),null(),null(),null());
HXLINE(3957)			comboSpr1->screenCenter(null());
HXLINE(3958)			comboSpr1->set_x(rating->x);
HXLINE(3959)			comboSpr1->set_y((rating->y + 100));
HXLINE(3960)			comboSpr1->acceleration->set_y(( (Float)(600) ));
HXLINE(3961)			{
HXLINE(3961)				 ::flixel::math::FlxPoint _g5 = comboSpr1->velocity;
HXDLIN(3961)				_g5->set_y((_g5->y - ( (Float)(150) )));
            			}
HXLINE(3963)			this->currentTimingShown->screenCenter(null());
HXLINE(3964)			this->currentTimingShown->set_x((comboSpr1->x + 100));
HXLINE(3965)			this->currentTimingShown->set_y((rating->y + 100));
HXLINE(3966)			this->currentTimingShown->acceleration->set_y(( (Float)(600) ));
HXLINE(3967)			{
HXLINE(3967)				 ::flixel::math::FlxPoint _g6 = this->currentTimingShown->velocity;
HXDLIN(3967)				_g6->set_y((_g6->y - ( (Float)(150) )));
            			}
HXLINE(3969)			{
HXLINE(3969)				 ::flixel::math::FlxPoint _g7 = comboSpr1->velocity;
HXDLIN(3969)				Float _g8 = _g7->x;
HXDLIN(3969)				_g7->set_x((_g8 + ::flixel::FlxG_obj::random->_hx_int(1,10,null())));
            			}
HXLINE(3970)			{
HXLINE(3970)				 ::flixel::math::FlxPoint _g9 = this->currentTimingShown->velocity;
HXDLIN(3970)				_g9->set_x((_g9->x + comboSpr1->velocity->x));
            			}
HXLINE(3971)			bool _hx_tmp4;
HXDLIN(3971)			if (::PlayStateChangeables_obj::botPlay) {
HXLINE(3971)				_hx_tmp4 = ::PlayState_obj::loadRep;
            			}
            			else {
HXLINE(3971)				_hx_tmp4 = true;
            			}
HXDLIN(3971)			if (_hx_tmp4) {
HXLINE(3972)				this->add(rating);
            			}
HXLINE(3974)			if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(3976)				 ::flixel::FlxSprite rating1 = rating;
HXDLIN(3976)				rating1->setGraphicSize(::Std_obj::_hx_int((rating->get_width() * ((Float)0.7))),null());
HXLINE(3977)				rating->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(3978)				 ::flixel::FlxSprite comboSpr = comboSpr1;
HXDLIN(3978)				comboSpr->setGraphicSize(::Std_obj::_hx_int((comboSpr1->get_width() * ((Float)0.7))),null());
HXLINE(3979)				comboSpr1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(3983)				 ::flixel::FlxSprite rating1 = rating;
HXDLIN(3983)				Float _hx_tmp = rating->get_width();
HXDLIN(3983)				rating1->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp * ::PlayState_obj::daPixelZoom) * ((Float)0.7))),null());
HXLINE(3984)				 ::flixel::FlxSprite comboSpr = comboSpr1;
HXDLIN(3984)				Float _hx_tmp1 = comboSpr1->get_width();
HXDLIN(3984)				comboSpr->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp1 * ::PlayState_obj::daPixelZoom) * ((Float)0.7))),null());
            			}
HXLINE(3987)			this->currentTimingShown->updateHitbox();
HXLINE(3988)			comboSpr1->updateHitbox();
HXLINE(3989)			rating->updateHitbox();
HXLINE(3991)			this->currentTimingShown->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3992)			comboSpr1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3993)			rating->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3995)			::Array< int > seperatedScore = ::Array_obj< int >::__new(0);
HXLINE(3997)			::Array< ::String > comboSplit = (this->combo + HX_("",00,00,00,00)).split(HX_("",00,00,00,00));
HXLINE(3999)			if ((this->combo > ::PlayState_obj::highestCombo)) {
HXLINE(4000)				::PlayState_obj::highestCombo = this->combo;
            			}
HXLINE(4003)			if ((comboSplit->length == 1)) {
HXLINE(4005)				seperatedScore->push(0);
HXLINE(4006)				seperatedScore->push(0);
            			}
            			else {
HXLINE(4008)				if ((comboSplit->length == 2)) {
HXLINE(4009)					seperatedScore->push(0);
            				}
            			}
HXLINE(4011)			{
HXLINE(4011)				int _g10 = 0;
HXDLIN(4011)				int _g11 = comboSplit->length;
HXDLIN(4011)				while((_g10 < _g11)){
HXLINE(4011)					_g10 = (_g10 + 1);
HXDLIN(4011)					int i = (_g10 - 1);
HXLINE(4013)					::String str = comboSplit->__get(i);
HXLINE(4014)					seperatedScore->push(::Std_obj::parseInt(str));
            				}
            			}
HXLINE(4017)			int daLoop = 0;
HXLINE(4018)			{
HXLINE(4018)				int _g12 = 0;
HXDLIN(4018)				while((_g12 < seperatedScore->length)){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::flixel::FlxSprite,numScore1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4047_popUpScore)
HXLINE(4048)						_gthis->visibleCombos->remove(numScore1);
HXLINE(4049)						numScore1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::flixel::FlxSprite,numScore1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4053_popUpScore)
HXLINE(4053)						if (!(_gthis->visibleCombos->contains(numScore1))) {
HXLINE(4055)							tween->cancel();
HXLINE(4056)							numScore1->destroy();
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(4018)					int i = seperatedScore->__get(_g12);
HXDLIN(4018)					_g12 = (_g12 + 1);
HXLINE(4020)					 ::flixel::FlxSprite numScore =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(4020)					 ::flixel::FlxSprite numScore1 = numScore->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (((pixelShitPart1 + HX_("num",46,de,53,00)) + ::Std_obj::_hx_int(( (Float)(i) ))) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),pixelShitPart3),null(),null(),null(),null(),null());
HXLINE(4021)					numScore1->screenCenter(null());
HXLINE(4022)					numScore1->set_x(((rating->x + (43 * daLoop)) - ( (Float)(50) )));
HXLINE(4023)					numScore1->set_y((rating->y + 100));
HXLINE(4024)					numScore1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(4026)					if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(4028)						numScore1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(4029)						 ::flixel::FlxSprite numScore = numScore1;
HXDLIN(4029)						numScore->setGraphicSize(::Std_obj::_hx_int((numScore1->get_width() * ((Float)0.5))),null());
            					}
            					else {
HXLINE(4033)						 ::flixel::FlxSprite numScore = numScore1;
HXDLIN(4033)						Float _hx_tmp = numScore1->get_width();
HXDLIN(4033)						numScore->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(4035)					numScore1->updateHitbox();
HXLINE(4037)					 ::flixel::math::FlxPoint numScore2 = numScore1->acceleration;
HXDLIN(4037)					numScore2->set_y(( (Float)(::flixel::FlxG_obj::random->_hx_int(200,300,null())) ));
HXLINE(4038)					{
HXLINE(4038)						 ::flixel::math::FlxPoint _g = numScore1->velocity;
HXDLIN(4038)						Float _g1 = _g->y;
HXDLIN(4038)						_g->set_y((_g1 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,160,null())) )));
            					}
HXLINE(4039)					 ::flixel::math::FlxPoint numScore3 = numScore1->velocity;
HXDLIN(4039)					numScore3->set_x(::flixel::FlxG_obj::random->_hx_float(-5,5,null()));
HXLINE(4041)					this->add(numScore1);
HXLINE(4043)					this->visibleCombos->push(numScore1);
HXLINE(4045)					::flixel::tweens::FlxTween_obj::tween(numScore1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.002)))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis,numScore1)))
            						->setFixed(2,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_1(_gthis,numScore1)))));
HXLINE(4062)					if ((this->visibleCombos->length > (seperatedScore->length + 20))) {
HXLINE(4064)						int _g = 0;
HXDLIN(4064)						int _g1 = (seperatedScore->length - 1);
HXDLIN(4064)						while((_g < _g1)){
HXLINE(4064)							_g = (_g + 1);
HXDLIN(4064)							int i = (_g - 1);
HXLINE(4066)							this->visibleCombos->remove(this->visibleCombos->__get((this->visibleCombos->length - 1)).StaticCast<  ::flixel::FlxSprite >());
            						}
            					}
HXLINE(4070)					daLoop = (daLoop + 1);
            				}
            			}
HXLINE(4077)			 ::flixel::text::FlxText coolText1 = coolText;
HXDLIN(4077)			coolText1->set_text(::Std_obj::string(seperatedScore));
HXLINE(4080)			::flixel::tweens::FlxTween_obj::tween(rating, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            				->setFixed(1,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_2(_gthis)))));
HXLINE(4090)			::flixel::tweens::FlxTween_obj::tween(comboSpr1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_3(_gthis,coolText,comboSpr1,rating)))));
HXLINE(4105)			 ::PlayState _hx_tmp5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4105)			_hx_tmp5->curSection = (_hx_tmp5->curSection + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,popUpScore,(void))

bool PlayState_obj::NearlyEquals(Float value1,Float value2,::hx::Null< Float >  __o_unimportantDifference){
            		Float unimportantDifference = __o_unimportantDifference.Default(10);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4111_NearlyEquals)
HXDLIN(4111)		Float _hx_tmp = ::flixel::math::FlxMath_obj::roundDecimal(value1,1);
HXDLIN(4111)		return (::Math_obj::abs((_hx_tmp - ::flixel::math::FlxMath_obj::roundDecimal(value2,1))) < unimportantDifference);
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,NearlyEquals,return )

void PlayState_obj::keyShit(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4122_keyShit)
HXLINE(4121)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4124)		bool holdArray = ::PlayerSettings_obj::player1->controls->_left->check();
HXDLIN(4124)		bool holdArray1 = ::PlayerSettings_obj::player1->controls->_down->check();
HXDLIN(4124)		bool holdArray2 = ::PlayerSettings_obj::player1->controls->_up->check();
HXDLIN(4124)		::Array< bool > holdArray3 = ::Array_obj< bool >::__new(4)->init(0,holdArray)->init(1,holdArray1)->init(2,holdArray2)->init(3,::PlayerSettings_obj::player1->controls->_right->check());
HXLINE(4125)		bool pressArray = ::PlayerSettings_obj::player1->controls->_leftP->check();
HXDLIN(4125)		bool pressArray1 = ::PlayerSettings_obj::player1->controls->_downP->check();
HXDLIN(4125)		bool pressArray2 = ::PlayerSettings_obj::player1->controls->_upP->check();
HXDLIN(4125)		::Array< bool > pressArray3 = ::Array_obj< bool >::__new(4)->init(0,pressArray)->init(1,pressArray1)->init(2,pressArray2)->init(3,::PlayerSettings_obj::player1->controls->_rightP->check());
HXLINE(4126)		bool releaseArray = ::PlayerSettings_obj::player1->controls->_leftR->check();
HXDLIN(4126)		bool releaseArray1 = ::PlayerSettings_obj::player1->controls->_downR->check();
HXDLIN(4126)		bool releaseArray2 = ::PlayerSettings_obj::player1->controls->_upR->check();
HXDLIN(4126)		::Array< bool > releaseArray3 = ::Array_obj< bool >::__new(4)->init(0,releaseArray)->init(1,releaseArray1)->init(2,releaseArray2)->init(3,::PlayerSettings_obj::player1->controls->_rightR->check());
HXLINE(4127)		::Array< ::String > keynameArray = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_158,4);
HXLINE(4129)		if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(4131)			{
HXLINE(4131)				int _g = 0;
HXDLIN(4131)				int _g1 = pressArray3->length;
HXDLIN(4131)				while((_g < _g1)){
HXLINE(4131)					_g = (_g + 1);
HXDLIN(4131)					int i = (_g - 1);
HXLINE(4132)					if ((pressArray3->__get(i) == true)) {
HXLINE(4133)						::PlayState_obj::luaModchart->executeState(HX_("keyPressed",c3,72,6e,a8),::cpp::VirtualArray_obj::__new(1)->init(0,keynameArray->__get(i)));
            					}
            				}
            			}
HXLINE(4137)			{
HXLINE(4137)				int _g2 = 0;
HXDLIN(4137)				int _g3 = releaseArray3->length;
HXDLIN(4137)				while((_g2 < _g3)){
HXLINE(4137)					_g2 = (_g2 + 1);
HXDLIN(4137)					int i = (_g2 - 1);
HXLINE(4138)					if ((releaseArray3->__get(i) == true)) {
HXLINE(4139)						::PlayState_obj::luaModchart->executeState(HX_("keyReleased",7c,05,0c,bf),::cpp::VirtualArray_obj::__new(1)->init(0,keynameArray->__get(i)));
            					}
            				}
            			}
            		}
HXLINE(4147)		if (::PlayStateChangeables_obj::botPlay) {
HXLINE(4149)			holdArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_159,4);
HXLINE(4150)			pressArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_160,4);
HXLINE(4151)			releaseArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_161,4);
            		}
HXLINE(4154)		::Array< ::Dynamic> anas = ::Array_obj< ::Dynamic>::__new(4)->init(0,null())->init(1,null())->init(2,null())->init(3,null());
HXLINE(4156)		{
HXLINE(4156)			int _g = 0;
HXDLIN(4156)			int _g1 = pressArray3->length;
HXDLIN(4156)			while((_g < _g1)){
HXLINE(4156)				_g = (_g + 1);
HXDLIN(4156)				int i = (_g - 1);
HXLINE(4157)				if (pressArray3->__get(i)) {
HXLINE(4158)					anas[i] =  ::Ana_obj::__alloc( HX_CTX ,::Conductor_obj::songPosition,null(),false,HX_("miss",fc,52,5c,48),i);
            				}
            			}
            		}
HXLINE(4161)		bool _hx_tmp;
HXDLIN(4161)		if (holdArray3->contains(true)) {
HXLINE(4161)			_hx_tmp = this->generatedMusic;
            		}
            		else {
HXLINE(4161)			_hx_tmp = false;
            		}
HXDLIN(4161)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,::Array< bool >,holdArray3) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4165_keyShit)
HXLINE(4165)				bool _hx_tmp;
HXDLIN(4165)				bool _hx_tmp1;
HXDLIN(4165)				bool _hx_tmp2;
HXDLIN(4165)				bool _hx_tmp3;
HXDLIN(4165)				if (daNote->isSustainNote) {
HXLINE(4165)					_hx_tmp3 = daNote->canBeHit;
            				}
            				else {
HXLINE(4165)					_hx_tmp3 = false;
            				}
HXDLIN(4165)				if (_hx_tmp3) {
HXLINE(4165)					_hx_tmp2 = daNote->mustPress;
            				}
            				else {
HXLINE(4165)					_hx_tmp2 = false;
            				}
HXDLIN(4165)				if (_hx_tmp2) {
HXLINE(4165)					_hx_tmp1 = holdArray3->__get(daNote->noteData);
            				}
            				else {
HXLINE(4165)					_hx_tmp1 = false;
            				}
HXDLIN(4165)				if (_hx_tmp1) {
HXLINE(4165)					_hx_tmp = daNote->sustainActive;
            				}
            				else {
HXLINE(4165)					_hx_tmp = false;
            				}
HXDLIN(4165)				if (_hx_tmp) {
HXLINE(4167)					_gthis->goodNoteHit(daNote,null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(4163)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,holdArray3)),null());
            		}
HXLINE(4172)		bool _hx_tmp1;
HXDLIN(4172)		if (::KeyBinds_obj::gamepad) {
HXLINE(4172)			_hx_tmp1 = !(( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY());
            		}
            		else {
HXLINE(4172)			_hx_tmp1 = false;
            		}
HXDLIN(4172)		if (_hx_tmp1) {
HXLINE(4175)			bool _hx_tmp;
HXDLIN(4175)			if (pressArray3->contains(true)) {
HXLINE(4175)				_hx_tmp = this->generatedMusic;
            			}
            			else {
HXLINE(4175)				_hx_tmp = false;
            			}
HXDLIN(4175)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,possibleNotes,::Array< ::Dynamic>,dumbNotes,::Array< int >,directionList,::Array< bool >,directionsAccounted) HXARGC(1)
            				void _hx_run( ::Note daNote){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4186_keyShit)
HXLINE(4186)					bool _hx_tmp;
HXDLIN(4186)					bool _hx_tmp1;
HXDLIN(4186)					bool _hx_tmp2;
HXDLIN(4186)					if (daNote->canBeHit) {
HXLINE(4186)						_hx_tmp2 = daNote->mustPress;
            					}
            					else {
HXLINE(4186)						_hx_tmp2 = false;
            					}
HXDLIN(4186)					if (_hx_tmp2) {
HXLINE(4186)						_hx_tmp1 = !(daNote->wasGoodHit);
            					}
            					else {
HXLINE(4186)						_hx_tmp1 = false;
            					}
HXDLIN(4186)					if (_hx_tmp1) {
HXLINE(4186)						_hx_tmp = !(directionsAccounted->__get(daNote->noteData));
            					}
            					else {
HXLINE(4186)						_hx_tmp = false;
            					}
HXDLIN(4186)					if (_hx_tmp) {
HXLINE(4188)						if (directionList->contains(daNote->noteData)) {
HXLINE(4190)							directionsAccounted[daNote->noteData] = true;
HXLINE(4191)							{
HXLINE(4191)								int _g = 0;
HXDLIN(4191)								while((_g < possibleNotes->length)){
HXLINE(4191)									 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(4191)									_g = (_g + 1);
HXLINE(4193)									bool _hx_tmp;
HXDLIN(4193)									if ((coolNote->noteData == daNote->noteData)) {
HXLINE(4193)										_hx_tmp = (::Math_obj::abs((daNote->strumTime - coolNote->strumTime)) < 10);
            									}
            									else {
HXLINE(4193)										_hx_tmp = false;
            									}
HXDLIN(4193)									if (_hx_tmp) {
HXLINE(4196)										dumbNotes->push(daNote);
HXLINE(4197)										goto _hx_goto_151;
            									}
            									else {
HXLINE(4199)										bool _hx_tmp;
HXDLIN(4199)										if ((coolNote->noteData == daNote->noteData)) {
HXLINE(4199)											_hx_tmp = (daNote->strumTime < coolNote->strumTime);
            										}
            										else {
HXLINE(4199)											_hx_tmp = false;
            										}
HXDLIN(4199)										if (_hx_tmp) {
HXLINE(4201)											possibleNotes->remove(coolNote);
HXLINE(4202)											possibleNotes->push(daNote);
HXLINE(4203)											goto _hx_goto_151;
            										}
            									}
            								}
            								_hx_goto_151:;
            							}
            						}
            						else {
HXLINE(4209)							directionsAccounted[daNote->noteData] = true;
HXLINE(4210)							possibleNotes->push(daNote);
HXLINE(4211)							directionList->push(daNote->noteData);
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            				int _hx_run( ::Note a, ::Note b){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4224_keyShit)
HXLINE(4224)					return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE(4177)				::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
HXLINE(4179)				::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4180)				::Array< int > directionList = ::Array_obj< int >::__new(0);
HXLINE(4181)				::Array< ::Dynamic> dumbNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4182)				::Array< bool > directionsAccounted = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_165,4);
HXLINE(4184)				this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(possibleNotes,dumbNotes,directionList,directionsAccounted)),null());
HXLINE(4216)				{
HXLINE(4216)					int _g = 0;
HXDLIN(4216)					while((_g < dumbNotes->length)){
HXLINE(4216)						 ::Note note = dumbNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(4216)						_g = (_g + 1);
HXLINE(4219)						note->kill();
HXLINE(4220)						this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(4221)						note->destroy();
            					}
            				}
HXLINE(4224)				possibleNotes->sort( ::Dynamic(new _hx_Closure_2()));
HXLINE(4226)				::Array< bool > hit = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_166,4);
HXLINE(4228)				if (this->perfectMode) {
HXLINE(4229)					this->goodNoteHit(possibleNotes->__get(0).StaticCast<  ::Note >(),null());
            				}
            				else {
HXLINE(4230)					if ((possibleNotes->length > 0)) {
HXLINE(4232)						if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(4234)							int _g = 0;
HXDLIN(4234)							int _g1 = pressArray3->length;
HXDLIN(4234)							while((_g < _g1)){
HXLINE(4234)								_g = (_g + 1);
HXDLIN(4234)								int shit = (_g - 1);
HXLINE(4236)								bool _hx_tmp;
HXDLIN(4236)								if (pressArray3->__get(shit)) {
HXLINE(4236)									_hx_tmp = !(directionList->contains(shit));
            								}
            								else {
HXLINE(4236)									_hx_tmp = false;
            								}
HXDLIN(4236)								if (_hx_tmp) {
HXLINE(4237)									this->noteMiss(shit,null());
            								}
            							}
            						}
HXLINE(4240)						{
HXLINE(4240)							int _g = 0;
HXDLIN(4240)							while((_g < possibleNotes->length)){
HXLINE(4240)								 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(4240)								_g = (_g + 1);
HXLINE(4242)								bool _hx_tmp;
HXDLIN(4242)								if (pressArray3->__get(coolNote->noteData)) {
HXLINE(4242)									_hx_tmp = !(hit->__get(coolNote->noteData));
            								}
            								else {
HXLINE(4242)									_hx_tmp = false;
            								}
HXDLIN(4242)								if (_hx_tmp) {
HXLINE(4244)									if ((this->mashViolations != 0)) {
HXLINE(4245)										this->mashViolations--;
            									}
HXLINE(4246)									hit[coolNote->noteData] = true;
HXLINE(4247)									this->scoreTxt->set_color(-1);
HXLINE(4248)									Float noteDiff = -((coolNote->strumTime - ::Conductor_obj::songPosition));
HXLINE(4249)									anas->__get(coolNote->noteData).StaticCast<  ::Ana >()->hit = true;
HXLINE(4250)									anas->__get(coolNote->noteData).StaticCast<  ::Ana >()->hitJudge = ::Ratings_obj::judgeNote(noteDiff);
HXLINE(4251)									anas->__get(coolNote->noteData).StaticCast<  ::Ana >()->nearestNote = ::cpp::VirtualArray_obj::__new(3)->init(0,coolNote->strumTime)->init(1,coolNote->noteData)->init(2,coolNote->sustainLength);
HXLINE(4252)									this->goodNoteHit(coolNote,null());
            								}
            							}
            						}
            					}
            				}
HXLINE(4257)				bool _hx_tmp;
HXDLIN(4257)				if ((::PlayState_obj::boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE(4257)					if (holdArray3->contains(true)) {
HXLINE(4257)						_hx_tmp = ::PlayStateChangeables_obj::botPlay;
            					}
            					else {
HXLINE(4257)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE(4257)					_hx_tmp = false;
            				}
HXDLIN(4257)				if (_hx_tmp) {
HXLINE(4259)					bool _hx_tmp;
HXDLIN(4259)					if (::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE(4259)						_hx_tmp = !(::StringTools_obj::endsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            					}
            					else {
HXLINE(4259)						_hx_tmp = false;
            					}
HXDLIN(4259)					if (_hx_tmp) {
HXLINE(4260)						::PlayState_obj::boyfriend->dance(null(),null());
            					}
            				}
            				else {
HXLINE(4262)					if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(4264)						int _g = 0;
HXDLIN(4264)						int _g1 = pressArray3->length;
HXDLIN(4264)						while((_g < _g1)){
HXLINE(4264)							_g = (_g + 1);
HXDLIN(4264)							int shit = (_g - 1);
HXLINE(4265)							if (pressArray3->__get(shit)) {
HXLINE(4266)								this->noteMiss(shit,null());
            							}
            						}
            					}
            				}
            			}
HXLINE(4270)			if (!(::PlayState_obj::loadRep)) {
HXLINE(4271)				int _g = 0;
HXDLIN(4271)				while((_g < anas->length)){
HXLINE(4271)					 ::Ana i = anas->__get(_g).StaticCast<  ::Ana >();
HXDLIN(4271)					_g = (_g + 1);
HXLINE(4272)					if (::hx::IsNotNull( i )) {
HXLINE(4273)						this->replayAna->anaArray->push(i);
            					}
            				}
            			}
            		}
HXLINE(4275)		if (::PlayStateChangeables_obj::botPlay) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4277_keyShit)
HXLINE(4278)				Float diff = -((daNote->strumTime - ::Conductor_obj::songPosition));
HXLINE(4279)				daNote->rating = ::Ratings_obj::judgeNote(diff);
HXLINE(4280)				diff = (diff / ::PlayState_obj::songMultiplier);
HXLINE(4281)				bool _hx_tmp;
HXDLIN(4281)				bool _hx_tmp1;
HXDLIN(4281)				if (daNote->mustPress) {
HXLINE(4281)					_hx_tmp1 = (daNote->rating == HX_("sick",be,8c,53,4c));
            				}
            				else {
HXLINE(4281)					_hx_tmp1 = false;
            				}
HXDLIN(4281)				if (!(_hx_tmp1)) {
HXLINE(4281)					if ((diff > 0)) {
HXLINE(4281)						_hx_tmp = daNote->mustPress;
            					}
            					else {
HXLINE(4281)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(4281)					_hx_tmp = true;
            				}
HXDLIN(4281)				if (_hx_tmp) {
HXLINE(4284)					if (::PlayState_obj::loadRep) {
HXLINE(4287)						::cpp::VirtualArray n = _gthis->findByTime(daNote->strumTime);
HXLINE(4289)						if (::hx::IsNotNull( n )) {
            							HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            							void _hx_run( ::StaticArrow spr){
            								HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4296_keyShit)
HXLINE(4296)								_gthis->pressArrow(spr,spr->ID,daNote);
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(4291)							_gthis->goodNoteHit(daNote,null());
HXLINE(4292)							::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
HXLINE(4294)							::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_3(_gthis,daNote)),null());
            						}
            					}
            					else {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            						void _hx_run( ::StaticArrow spr){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4318_keyShit)
HXLINE(4318)							_gthis->pressArrow(spr,spr->ID,daNote);
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(4313)						_gthis->goodNoteHit(daNote,null());
HXLINE(4314)						::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
HXLINE(4316)						::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_4(_gthis,daNote)),null());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(4276)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_5(_gthis)),null());
            		}
HXLINE(4335)		bool _hx_tmp2;
HXDLIN(4335)		if ((::PlayState_obj::boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE(4335)			if (holdArray3->contains(true)) {
HXLINE(4335)				_hx_tmp2 = ::PlayStateChangeables_obj::botPlay;
            			}
            			else {
HXLINE(4335)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE(4335)			_hx_tmp2 = false;
            		}
HXDLIN(4335)		if (_hx_tmp2) {
HXLINE(4337)			bool _hx_tmp;
HXDLIN(4337)			bool _hx_tmp1;
HXDLIN(4337)			if (::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE(4337)				_hx_tmp1 = !(::StringTools_obj::endsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            			}
            			else {
HXLINE(4337)				_hx_tmp1 = false;
            			}
HXDLIN(4337)			if (_hx_tmp1) {
HXLINE(4337)				if ((::PlayState_obj::boyfriend->animation->_curAnim->curFrame < 10)) {
HXLINE(4337)					_hx_tmp = ::PlayState_obj::boyfriend->animation->_curAnim->finished;
            				}
            				else {
HXLINE(4337)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(4337)				_hx_tmp = false;
            			}
HXDLIN(4337)			if (_hx_tmp) {
HXLINE(4338)				::PlayState_obj::boyfriend->dance(null(),null());
            			}
            		}
HXLINE(4341)		if (!(::PlayStateChangeables_obj::botPlay)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::StaticArrow spr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4344_keyShit)
HXLINE(4345)				bool _hx_tmp;
HXDLIN(4345)				bool _hx_tmp1;
HXDLIN(4345)				bool _hx_tmp2;
HXDLIN(4345)				if (_gthis->keys->__get(spr->ID)) {
HXLINE(4345)					_hx_tmp2 = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            				}
            				else {
HXLINE(4345)					_hx_tmp2 = false;
            				}
HXDLIN(4345)				if (_hx_tmp2) {
HXLINE(4345)					_hx_tmp1 = (spr->animation->_curAnim->name != HX_("pressed",a2,d2,e6,39));
            				}
            				else {
HXLINE(4345)					_hx_tmp1 = false;
            				}
HXDLIN(4345)				if (_hx_tmp1) {
HXLINE(4345)					_hx_tmp = !(::StringTools_obj::startsWith(spr->animation->_curAnim->name,HX_("dirCon",f5,88,50,bc)));
            				}
            				else {
HXLINE(4345)					_hx_tmp = false;
            				}
HXDLIN(4345)				if (_hx_tmp) {
HXLINE(4346)					spr->playAnim(HX_("pressed",a2,d2,e6,39),false);
            				}
HXLINE(4347)				if (!(_gthis->keys->__get(spr->ID))) {
HXLINE(4348)					spr->playAnim(HX_("static",ae,dc,fb,05),false);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(4343)			::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_6(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keyShit,(void))

::cpp::VirtualArray PlayState_obj::findByTime(Float time){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4354_findByTime)
HXLINE(4355)		{
HXLINE(4355)			int _g = 0;
HXDLIN(4355)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)(::PlayState_obj::rep->replay->__Field(HX_("songNotes",2c,24,45,cf),::hx::paccDynamic)) );
HXDLIN(4355)			while((_g < _g1->get_length())){
HXLINE(4355)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(4355)				_g = (_g + 1);
HXLINE(4358)				if (::hx::IsEq( i->__GetItem(0),time )) {
HXLINE(4359)					return ( (::cpp::VirtualArray)(i) );
            				}
            			}
            		}
HXLINE(4361)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,findByTime,return )

int PlayState_obj::findByTimeIndex(Float time){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4365_findByTimeIndex)
HXLINE(4366)		{
HXLINE(4366)			int _g = 0;
HXDLIN(4366)			int _g1 = ( (::cpp::VirtualArray)(::PlayState_obj::rep->replay->__Field(HX_("songNotes",2c,24,45,cf),::hx::paccDynamic)) )->get_length();
HXDLIN(4366)			while((_g < _g1)){
HXLINE(4366)				_g = (_g + 1);
HXDLIN(4366)				int i = (_g - 1);
HXLINE(4369)				if (::hx::IsEq(  ::Dynamic(::PlayState_obj::rep->replay->__Field(HX_("songNotes",2c,24,45,cf),::hx::paccDynamic))->__GetItem(i)->__GetItem(0),time )) {
HXLINE(4370)					return i;
            				}
            			}
            		}
HXLINE(4372)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,findByTimeIndex,return )

void PlayState_obj::focusOut(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4385_focusOut)
HXLINE(4386)		if (this->paused) {
HXLINE(4387)			return;
            		}
HXLINE(4388)		this->persistentUpdate = false;
HXLINE(4389)		this->persistentDraw = true;
HXLINE(4390)		this->paused = true;
HXLINE(4392)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(4394)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(4395)			this->vocals->pause();
            		}
HXLINE(4398)		Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(4398)		this->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,focusOut,(void))

void PlayState_obj::focusIn(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4402_focusIn)
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,focusIn,(void))

void PlayState_obj::backgroundVideo(::String source){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4407_backgroundVideo)
HXLINE(4409)		this->useVideo = true;
HXLINE(4411)		::openfl::Lib_obj::get_current()->stage->window->onFocusOut->add(this->focusOut_dyn(),null(),null());
HXLINE(4412)		::openfl::Lib_obj::get_current()->stage->window->onFocusIn->add(this->focusIn_dyn(),null(),null());
HXLINE(4414)		::String ourSource = HX_("assets/videos/daWeirdVid/dontDelete.webm",08,bc,66,81);
HXLINE(4416)		::String str1 = HX_("WEBM SHIT",e7,ff,8c,40);
HXLINE(4417)		::PlayState_obj::webmHandler =  ::WebmHandler_obj::__alloc( HX_CTX );
HXLINE(4418)		::PlayState_obj::webmHandler->source(ourSource);
HXLINE(4419)		::PlayState_obj::webmHandler->makePlayer();
HXLINE(4420)		::PlayState_obj::webmHandler->webm->set_name(str1);
HXLINE(4422)		::GlobalVideo_obj::setWebm(::PlayState_obj::webmHandler);
HXLINE(4424)		::GlobalVideo_obj::get()->__Field(HX_("source",db,b0,31,32),::hx::paccDynamic)(source);
HXLINE(4425)		::GlobalVideo_obj::get()->__Field(HX_("clearPause",29,16,62,92),::hx::paccDynamic)();
HXLINE(4426)		if (::GlobalVideo_obj::isWebm) {
HXLINE(4428)			::GlobalVideo_obj::get()->__Field(HX_("updatePlayer",4a,92,7c,37),::hx::paccDynamic)();
            		}
HXLINE(4430)		::GlobalVideo_obj::get()->__Field(HX_("show",fd,d4,52,4c),::hx::paccDynamic)();
HXLINE(4432)		if (::GlobalVideo_obj::isWebm) {
HXLINE(4434)			::GlobalVideo_obj::get()->__Field(HX_("restart",cf,c7,a5,6a),::hx::paccDynamic)();
            		}
            		else {
HXLINE(4438)			::GlobalVideo_obj::get()->__Field(HX_("play",f4,2d,5a,4a),::hx::paccDynamic)();
            		}
HXLINE(4441)		 ::openfl::display::BitmapData data = ::PlayState_obj::webmHandler->webm->get_bitmapData();
HXLINE(4443)		this->videoSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-470,-30,null())->loadGraphic(data,null(),null(),null(),null(),null());
HXLINE(4445)		 ::flixel::FlxSprite _hx_tmp = this->videoSprite;
HXDLIN(4445)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->videoSprite->get_width() * ((Float)1.2))),null());
HXLINE(4447)		this->remove(::PlayState_obj::gf,null());
HXLINE(4448)		this->remove(::PlayState_obj::boyfriend,null());
HXLINE(4449)		this->remove(::PlayState_obj::dad,null());
HXLINE(4450)		this->add(this->videoSprite);
HXLINE(4451)		this->add(::PlayState_obj::gf);
HXLINE(4452)		this->add(::PlayState_obj::boyfriend);
HXLINE(4453)		this->add(::PlayState_obj::dad);
HXLINE(4457)		if (!(this->songStarted)) {
HXLINE(4458)			::PlayState_obj::webmHandler->pause();
            		}
            		else {
HXLINE(4460)			::PlayState_obj::webmHandler->resume();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,backgroundVideo,(void))

void PlayState_obj::noteMiss(::hx::Null< int >  __o_direction, ::Note daNote){
            		int direction = __o_direction.Default(1);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4466_noteMiss)
HXDLIN(4466)		if (!(::PlayState_obj::boyfriend->stunned)) {
HXLINE(4469)			bool _hx_tmp;
HXDLIN(4469)			if ((this->combo > 5)) {
HXLINE(4469)				_hx_tmp = ::PlayState_obj::gf->animOffsets->exists(HX_("sad",16,98,57,00));
            			}
            			else {
HXLINE(4469)				_hx_tmp = false;
            			}
HXDLIN(4469)			if (_hx_tmp) {
HXLINE(4471)				::PlayState_obj::gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
            			}
HXLINE(4473)			if ((this->combo != 0)) {
HXLINE(4475)				this->combo = 0;
HXLINE(4476)				this->popUpScore(null());
            			}
HXLINE(4478)			::PlayState_obj::misses++;
HXLINE(4480)			if (::hx::IsNotNull( daNote )) {
HXLINE(4482)				if (!(::PlayState_obj::loadRep)) {
HXLINE(4484)					this->saveNotes->push(::cpp::VirtualArray_obj::__new(4)->init(0,daNote->strumTime)->init(1,0)->init(2,direction)->init(3,-((( (Float)((166 * ::Math_obj::floor(((( (Float)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) ) / ( (Float)(60) )) * ( (Float)(1000) ))))) ) / ( (Float)(166) )))));
HXLINE(4490)					this->saveJudge->push(HX_("miss",fc,52,5c,48));
            				}
            			}
            			else {
HXLINE(4493)				if (!(::PlayState_obj::loadRep)) {
HXLINE(4495)					this->saveNotes->push(::cpp::VirtualArray_obj::__new(4)->init(0,::Conductor_obj::songPosition)->init(1,0)->init(2,direction)->init(3,-((( (Float)((166 * ::Math_obj::floor(((( (Float)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) ) / ( (Float)(60) )) * ( (Float)(1000) ))))) ) / ( (Float)(166) )))));
HXLINE(4501)					this->saveJudge->push(HX_("miss",fc,52,5c,48));
            				}
            			}
HXLINE(4507)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),1 )) {
HXLINE(4508)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4508)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit - ( (Float)(1) ));
            			}
HXLINE(4510)			if (::hx::IsNotNull( daNote )) {
HXLINE(4512)				if (!(daNote->isSustainNote)) {
HXLINE(4513)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4513)					_hx_tmp->songScore = (_hx_tmp->songScore - 10);
            				}
            			}
            			else {
HXLINE(4516)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4516)				_hx_tmp->songScore = (_hx_tmp->songScore - 10);
            			}
HXLINE(4518)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("missSounds",e0,d4,49,2b),::hx::paccDynamic)) )) {
HXLINE(4520)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(4520)				::String key = (HX_("missnote",ee,98,f1,e3) + this->altSuffix);
HXDLIN(4520)				::String library = null();
HXDLIN(4520)				::String _hx_tmp1 = ::Paths_obj::sound((key + ::flixel::FlxG_obj::random->_hx_int(1,3,null())),library);
HXDLIN(4520)				_hx_tmp->play(_hx_tmp1,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null()),null(),null(),null(),null());
            			}
HXLINE(4527)			::PlayState_obj::boyfriend->playAnim(((HX_("sing",4f,96,53,4c) + this->dataSuffix->__get(direction)) + HX_("miss",fc,52,5c,48)),true,null(),null());
HXLINE(4530)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(4531)				::PlayState_obj::luaModchart->executeState(HX_("playerOneMiss",21,1f,37,d5),::cpp::VirtualArray_obj::__new(2)->init(0,direction)->init(1,::Conductor_obj::songPosition));
            			}
HXLINE(4534)			this->updateAccuracy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteMiss,(void))

void PlayState_obj::updateAccuracy(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4559_updateAccuracy)
HXLINE(4560)		 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4560)		_hx_tmp->totalPlayed = (_hx_tmp->totalPlayed + 1);
HXLINE(4561)		this->accuracy = ::Math_obj::max(( (Float)(0) ),((this->totalNotesHit / ( (Float)(this->totalPlayed) )) * ( (Float)(100) )));
HXLINE(4562)		this->accuracyDefault = ::Math_obj::max(( (Float)(0) ),((this->totalNotesHitDefault / ( (Float)(this->totalPlayed) )) * ( (Float)(100) )));
HXLINE(4564)		 ::flixel::text::FlxText _hx_tmp1 = this->scoreTxt;
HXDLIN(4564)		_hx_tmp1->set_text(::Ratings_obj::CalculateRanking(this->songScore,this->songScoreDef,this->nps,this->maxNPS,this->accuracy));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateAccuracy,(void))

int PlayState_obj::getKeyPresses( ::Note note){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,possibleNotes) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4573_getKeyPresses)
HXLINE(4573)			bool _hx_tmp;
HXDLIN(4573)			if (daNote->canBeHit) {
HXLINE(4573)				_hx_tmp = daNote->mustPress;
            			}
            			else {
HXLINE(4573)				_hx_tmp = false;
            			}
HXDLIN(4573)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            				int _hx_run( ::Note a, ::Note b){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4576_getKeyPresses)
HXLINE(4576)					return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE(4575)				possibleNotes->push(daNote);
HXLINE(4576)				possibleNotes->sort( ::Dynamic(new _hx_Closure_0()));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4568_getKeyPresses)
HXLINE(4569)		::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4571)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(possibleNotes)),null());
HXLINE(4579)		if ((possibleNotes->length == 1)) {
HXLINE(4580)			return (possibleNotes->length + 1);
            		}
HXLINE(4581)		return possibleNotes->length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getKeyPresses,return )

void PlayState_obj::noteCheck(::Array< bool > controlArray, ::Note note){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4590_noteCheck)
HXLINE(4591)		Float noteDiff = -((note->strumTime - ::Conductor_obj::songPosition));
HXLINE(4593)		note->rating = ::Ratings_obj::judgeNote(noteDiff);
HXLINE(4608)		if (controlArray->__get(note->noteData)) {
HXLINE(4610)			int _hx_tmp = this->mashing;
HXDLIN(4610)			this->goodNoteHit(note,(_hx_tmp > this->getKeyPresses(note)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteCheck,(void))

void PlayState_obj::goodNoteHit( ::Note note,::hx::Null< bool >  __o_resetMashViolation){
            		bool resetMashViolation = __o_resetMashViolation.Default(true);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4636_goodNoteHit)
HXLINE(4635)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4637)		if ((this->mashing != 0)) {
HXLINE(4638)			this->mashing = 0;
            		}
HXLINE(4640)		Float noteDiff = -((note->strumTime - ::Conductor_obj::songPosition));
HXLINE(4643)		if (::PlayState_obj::loadRep) {
HXLINE(4645)			noteDiff = ( (Float)(this->findByTime(note->strumTime)->__get(3)) );
HXLINE(4646)			::Array< ::String > _hx_tmp = ( (::Array< ::String >)(::PlayState_obj::rep->replay->__Field(HX_("songJudgements",53,36,93,44),::hx::paccDynamic)) );
HXDLIN(4646)			int _hx_tmp1 = this->findByTimeIndex(note->strumTime);
HXDLIN(4646)			note->rating = _hx_tmp->__get(_hx_tmp1);
            		}
            		else {
HXLINE(4649)			note->rating = ::Ratings_obj::judgeNote(noteDiff);
            		}
HXLINE(4651)		if ((note->rating == HX_("miss",fc,52,5c,48))) {
HXLINE(4652)			return;
            		}
HXLINE(4656)		if (!(note->isSustainNote)) {
HXLINE(4657)			::Array< ::Dynamic> _hx_tmp = this->notesHitArray;
HXDLIN(4657)			_hx_tmp->unshift(::Date_obj::now());
            		}
HXLINE(4659)		bool _hx_tmp;
HXDLIN(4659)		if (!(resetMashViolation)) {
HXLINE(4659)			_hx_tmp = (this->mashViolations >= 1);
            		}
            		else {
HXLINE(4659)			_hx_tmp = false;
            		}
HXDLIN(4659)		if (_hx_tmp) {
HXLINE(4660)			this->mashViolations--;
            		}
HXLINE(4662)		if ((this->mashViolations < 0)) {
HXLINE(4663)			this->mashViolations = 0;
            		}
HXLINE(4665)		if (!(note->wasGoodHit)) {
HXLINE(4667)			if (!(note->isSustainNote)) {
HXLINE(4669)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4669)				_hx_tmp->combo = (_hx_tmp->combo + 1);
HXLINE(4670)				this->popUpScore(note);
            			}
HXLINE(4673)			::String altAnim = HX_("",00,00,00,00);
HXLINE(4674)			if (note->isAlt) {
HXLINE(4676)				altAnim = HX_("-alt",1c,93,08,1e);
            			}
HXLINE(4680)			::PlayState_obj::boyfriend->playAnim(((HX_("sing",4f,96,53,4c) + this->dataSuffix->__get(note->noteData)) + altAnim),true,null(),null());
HXLINE(4683)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(4684)				::PlayState_obj::luaModchart->executeState(HX_("playerOneSing",74,62,2e,d9),::cpp::VirtualArray_obj::__new(2)->init(0,note->noteData)->init(1,::Conductor_obj::songPosition));
            			}
HXLINE(4687)			bool _hx_tmp;
HXDLIN(4687)			if (!(::PlayState_obj::loadRep)) {
HXLINE(4687)				_hx_tmp = note->mustPress;
            			}
            			else {
HXLINE(4687)				_hx_tmp = false;
            			}
HXDLIN(4687)			if (_hx_tmp) {
HXLINE(4689)				::Array< Float > array = ::Array_obj< Float >::__new(4)->init(0,note->strumTime)->init(1,note->sustainLength)->init(2,note->noteData)->init(3,noteDiff);
HXLINE(4690)				if (note->isSustainNote) {
HXLINE(4691)					array[1] = ( (Float)(-1) );
            				}
HXLINE(4692)				this->saveNotes->push(array);
HXLINE(4693)				this->saveJudge->push(note->rating);
            			}
HXLINE(4696)			if (!(::PlayStateChangeables_obj::botPlay)) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::Note,note) HXARGC(1)
            				void _hx_run( ::StaticArrow spr){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4700_goodNoteHit)
HXLINE(4700)					_gthis->pressArrow(spr,spr->ID,note);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(4698)				::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_0(_gthis,note)),null());
            			}
HXLINE(4704)			if (!(note->isSustainNote)) {
HXLINE(4706)				note->kill();
HXLINE(4707)				this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(4708)				note->destroy();
            			}
            			else {
HXLINE(4712)				note->wasGoodHit = true;
            			}
HXLINE(4714)			if (!(note->isSustainNote)) {
HXLINE(4715)				this->updateAccuracy();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,goodNoteHit,(void))

void PlayState_obj::pressArrow( ::StaticArrow spr,int idCheck, ::Note daNote){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4721_pressArrow)
HXDLIN(4721)		if ((::Math_obj::abs(( (Float)(daNote->noteData) )) == idCheck)) {
HXLINE(4723)			if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("stepMania",06,56,8a,73),::hx::paccDynamic)) ))) {
HXLINE(4725)				spr->playAnim(HX_("confirm",00,9d,39,10),true);
            			}
            			else {
HXLINE(4729)				spr->playAnim((HX_("dirCon",f5,88,50,bc) + daNote->originColor),true);
HXLINE(4730)				spr->localAngle = daNote->originAngle;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,pressArrow,(void))

void PlayState_obj::resetFastCar(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4738_resetFastCar)
HXDLIN(4738)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(4740)			 ::Dynamic fastCar = ::PlayState_obj::Stage->swagBacks->get(HX_("fastCar",d8,f2,1f,de));
HXLINE(4741)			fastCar->__SetField(HX_("x",78,00,00,00),-12600,::hx::paccDynamic);
HXLINE(4742)			fastCar->__SetField(HX_("y",79,00,00,00),::flixel::FlxG_obj::random->_hx_int(140,250,null()),::hx::paccDynamic);
HXLINE(4743)			 ::Dynamic(fastCar->__Field(HX_("velocity",1d,02,fe,1e),::hx::paccDynamic))->__SetField(HX_("x",78,00,00,00),0,::hx::paccDynamic);
HXLINE(4744)			this->fastCarCanDrive = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resetFastCar,(void))

void PlayState_obj::fastCarDrive(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4749_fastCarDrive)
HXLINE(4748)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4750)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4758_fastCarDrive)
HXLINE(4758)				_gthis->resetFastCar();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(4752)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(4752)			::String library = null();
HXDLIN(4752)			_hx_tmp->play(::Paths_obj::sound((HX_("carPass",05,1f,44,b6) + ::flixel::FlxG_obj::random->_hx_int(0,1,null())),library),((Float)0.7),null(),null(),null(),null());
HXLINE(4754)			 ::Dynamic _hx_tmp1 = ::PlayState_obj::Stage->swagBacks->get(HX_("fastCar",d8,f2,1f,de));
HXDLIN(4754)			int _hx_tmp2 = ::flixel::FlxG_obj::random->_hx_int(170,220,null());
HXDLIN(4754)			 ::Dynamic(_hx_tmp1->__Field(HX_("velocity",1d,02,fe,1e),::hx::paccDynamic))->__SetField(HX_("x",78,00,00,00),((( (Float)(_hx_tmp2) ) / ::flixel::FlxG_obj::elapsed) * ( (Float)(3) )),::hx::paccDynamic);
HXLINE(4755)			this->fastCarCanDrive = false;
HXLINE(4756)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,fastCarDrive,(void))

void PlayState_obj::trainStart(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4772_trainStart)
HXDLIN(4772)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(4774)			this->trainMoving = true;
HXLINE(4775)			::PlayState_obj::trainSound->play(true,null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,trainStart,(void))

void PlayState_obj::updateTrainPos(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4783_updateTrainPos)
HXDLIN(4783)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(4785)			if ((::PlayState_obj::trainSound->_time >= 4700)) {
HXLINE(4787)				this->startedMoving = true;
HXLINE(4788)				::PlayState_obj::gf->playAnim(HX_("hairBlow",b4,c9,39,c9),null(),null(),null());
            			}
HXLINE(4791)			if (this->startedMoving) {
HXLINE(4793)				 ::Dynamic phillyTrain = ::PlayState_obj::Stage->swagBacks->get(HX_("phillyTrain",80,9b,65,bb));
HXLINE(4794)				 ::Dynamic phillyTrain1 = phillyTrain;
HXDLIN(4794)				phillyTrain1->__SetField(HX_("x",78,00,00,00),( ::Dynamic(phillyTrain1->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) - 400),::hx::paccDynamic);
HXLINE(4796)				bool _hx_tmp;
HXDLIN(4796)				if (::hx::IsLess( phillyTrain->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),-2000 )) {
HXLINE(4796)					_hx_tmp = !(this->trainFinishing);
            				}
            				else {
HXLINE(4796)					_hx_tmp = false;
            				}
HXDLIN(4796)				if (_hx_tmp) {
HXLINE(4798)					phillyTrain->__SetField(HX_("x",78,00,00,00),-1150,::hx::paccDynamic);
HXLINE(4799)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4799)					_hx_tmp->trainCars = (_hx_tmp->trainCars - 1);
HXLINE(4801)					if ((this->trainCars <= 0)) {
HXLINE(4802)						this->trainFinishing = true;
            					}
            				}
HXLINE(4805)				bool _hx_tmp1;
HXDLIN(4805)				if (::hx::IsLess( phillyTrain->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),-4000 )) {
HXLINE(4805)					_hx_tmp1 = this->trainFinishing;
            				}
            				else {
HXLINE(4805)					_hx_tmp1 = false;
            				}
HXDLIN(4805)				if (_hx_tmp1) {
HXLINE(4806)					this->trainReset();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateTrainPos,(void))

void PlayState_obj::trainReset(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4813_trainReset)
HXDLIN(4813)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(4815)			::PlayState_obj::gf->playAnim(HX_("hairFall",bd,48,d6,cb),null(),null(),null());
HXLINE(4816)			::PlayState_obj::Stage->swagBacks->get(HX_("phillyTrain",80,9b,65,bb))->__SetField(HX_("x",78,00,00,00),(::flixel::FlxG_obj::width + 200),::hx::paccDynamic);
HXLINE(4817)			this->trainMoving = false;
HXLINE(4820)			this->trainCars = 8;
HXLINE(4821)			this->trainFinishing = false;
HXLINE(4822)			this->startedMoving = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,trainReset,(void))

void PlayState_obj::lightningStrikeShit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4827_lightningStrikeShit)
HXLINE(4828)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(4828)		::String library = null();
HXDLIN(4828)		_hx_tmp->play(::Paths_obj::sound((HX_("thunder_",bb,58,cf,2f) + ::flixel::FlxG_obj::random->_hx_int(1,2,null())),library),null(),null(),null(),null(),null());
HXLINE(4829)		 ::Dynamic(::PlayState_obj::Stage->swagBacks->get(HX_("halloweenBG",92,b2,88,5c))->__Field(HX_("animation",04,ef,34,4b),::hx::paccDynamic))->__Field(HX_("play",f4,2d,5a,4a),::hx::paccDynamic)(HX_("lightning",0a,39,4a,d7));
HXLINE(4831)		this->lightningStrikeBeat = this->curBeat;
HXLINE(4832)		this->lightningOffset = ::flixel::FlxG_obj::random->_hx_int(8,24,null());
HXLINE(4834)		::PlayState_obj::boyfriend->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
HXLINE(4835)		::PlayState_obj::gf->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,lightningStrikeShit,(void))

void PlayState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4841_stepHit)
HXLINE(4842)		this->super::stepHit();
HXLINE(4843)		bool _hx_tmp;
HXDLIN(4843)		if (!((::flixel::FlxG_obj::sound->music->_time > (::Conductor_obj::songPosition + 20)))) {
HXLINE(4843)			_hx_tmp = (::flixel::FlxG_obj::sound->music->_time < (::Conductor_obj::songPosition - ( (Float)(20) )));
            		}
            		else {
HXLINE(4843)			_hx_tmp = true;
            		}
HXDLIN(4843)		if (_hx_tmp) {
HXLINE(4845)			this->resyncVocals();
            		}
HXLINE(4848)		if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(4850)			::Array< ::Dynamic> array = ( (::Array< ::Dynamic>)(::PlayState_obj::Stage->slowBacks->get(this->curStep)) );
HXLINE(4851)			bool _hx_tmp;
HXDLIN(4851)			if (::hx::IsNotNull( array )) {
HXLINE(4851)				_hx_tmp = (array->length > 0);
            			}
            			else {
HXLINE(4851)				_hx_tmp = false;
            			}
HXDLIN(4851)			if (_hx_tmp) {
HXLINE(4853)				if (::PlayState_obj::Stage->hideLastBG) {
HXLINE(4855)					{
HXLINE(4855)						 ::Dynamic bg = ::PlayState_obj::Stage->swagBacks->iterator();
HXDLIN(4855)						while(( (bool)(bg->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(4855)							 ::flixel::FlxSprite bg1 = ( ( ::flixel::FlxSprite)(bg->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(4857)							if (!(array->contains(bg1))) {
            								HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,bg1) HXARGC(1)
            								void _hx_run( ::flixel::tweens::FlxTween tween){
            									HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4861_stepHit)
HXLINE(4861)									bg1->set_visible(false);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(4859)								 ::flixel::tweens::misc::VarTween tween = ::flixel::tweens::FlxTween_obj::tween(bg1, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("alpha",5e,a7,96,21),0)),::PlayState_obj::Stage->tweenDuration, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(bg1)))));
            							}
            						}
            					}
HXLINE(4865)					{
HXLINE(4865)						int _g = 0;
HXDLIN(4865)						while((_g < array->length)){
HXLINE(4865)							 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(4865)							_g = (_g + 1);
HXLINE(4867)							bg->set_visible(true);
HXLINE(4868)							::flixel::tweens::FlxTween_obj::tween(bg, ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("alpha",5e,a7,96,21),1)),::PlayState_obj::Stage->tweenDuration,null());
            						}
            					}
            				}
            				else {
HXLINE(4873)					int _g = 0;
HXDLIN(4873)					while((_g < array->length)){
HXLINE(4873)						 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(4873)						_g = (_g + 1);
HXLINE(4874)						bg->set_visible(!(bg->visible));
            					}
            				}
            			}
            		}
HXLINE(4880)		bool _hx_tmp1;
HXDLIN(4880)		if (this->executeModchart) {
HXLINE(4880)			_hx_tmp1 = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(4880)			_hx_tmp1 = false;
            		}
HXDLIN(4880)		if (_hx_tmp1) {
HXLINE(4882)			::PlayState_obj::luaModchart->setVar(HX_("curStep",ec,58,71,b7),this->curStep);
HXLINE(4883)			::PlayState_obj::luaModchart->executeState(HX_("stepHit",67,ae,41,81),::cpp::VirtualArray_obj::__new(1)->init(0,this->curStep));
            		}
            	}


void PlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4896_beatHit)
HXLINE(4897)		this->super::beatHit();
HXLINE(4899)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::Note a2, ::Note a3){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4901_beatHit)
HXLINE(4901)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(4901)			int Order;
HXDLIN(4901)			if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(4901)				Order = -1;
            			}
            			else {
HXLINE(4901)				Order = 1;
            			}
HXDLIN(4901)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN(4901)			int a1 = Order;
HXDLIN(4901)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN(4901)			this->notes->members->sort(_hx_tmp);
            		}
HXLINE(4905)		bool _hx_tmp;
HXDLIN(4905)		if (this->executeModchart) {
HXLINE(4905)			_hx_tmp = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(4905)			_hx_tmp = false;
            		}
HXDLIN(4905)		if (_hx_tmp) {
HXLINE(4907)			::PlayState_obj::luaModchart->executeState(HX_("beatHit",7d,ea,04,74),::cpp::VirtualArray_obj::__new(1)->init(0,this->curBeat));
            		}
HXLINE(4911)		if (::hx::IsNotNull( this->currentSection )) {
HXLINE(4913)			if ((::hx::Mod(this->curBeat,this->idleBeat) == 0)) {
HXLINE(4915)				bool _hx_tmp;
HXDLIN(4915)				if (this->idleToBeat) {
HXLINE(4915)					_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::dad->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            				}
            				else {
HXLINE(4915)					_hx_tmp = false;
            				}
HXDLIN(4915)				if (_hx_tmp) {
HXLINE(4916)					::PlayState_obj::dad->dance(this->forcedToIdle,this->currentSection->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic));
            				}
HXLINE(4917)				bool _hx_tmp1;
HXDLIN(4917)				if (this->idleToBeat) {
HXLINE(4917)					_hx_tmp1 = !(::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            				}
            				else {
HXLINE(4917)					_hx_tmp1 = false;
            				}
HXDLIN(4917)				if (_hx_tmp1) {
HXLINE(4918)					::PlayState_obj::boyfriend->dance(this->forcedToIdle,null());
            				}
            			}
            			else {
HXLINE(4920)				bool _hx_tmp;
HXDLIN(4920)				if ((::PlayState_obj::dad->curCharacter != HX_("spooky",eb,bd,9e,c1))) {
HXLINE(4920)					_hx_tmp = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            				}
            				else {
HXLINE(4920)					_hx_tmp = true;
            				}
HXDLIN(4920)				if (_hx_tmp) {
HXLINE(4921)					::PlayState_obj::dad->dance(this->forcedToIdle,this->currentSection->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic));
            				}
            			}
            		}
HXLINE(4924)		this->wiggleShit->update(::Conductor_obj::crochet);
HXLINE(4926)		::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXLINE(4927)		::String _hx_switch_0 = songLowercase;
            		if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(4930)			songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(4930)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(4934)			songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(4934)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(4932)			songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(4932)			goto _hx_goto_199;
            		}
            		_hx_goto_199:;
HXLINE(4937)		bool _hx_tmp1;
HXDLIN(4937)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("camzoom",a2,ca,10,f1),::hx::paccDynamic)) )) {
HXLINE(4937)			_hx_tmp1 = (::Conductor_obj::bpm < 340);
            		}
            		else {
HXLINE(4937)			_hx_tmp1 = false;
            		}
HXDLIN(4937)		if (_hx_tmp1) {
HXLINE(4940)			bool _hx_tmp;
HXDLIN(4940)			bool _hx_tmp1;
HXDLIN(4940)			bool _hx_tmp2;
HXDLIN(4940)			bool _hx_tmp3;
HXDLIN(4940)			if ((songLowercase == HX_("milf",d6,4c,5c,48))) {
HXLINE(4940)				_hx_tmp3 = (this->curBeat >= 168);
            			}
            			else {
HXLINE(4940)				_hx_tmp3 = false;
            			}
HXDLIN(4940)			if (_hx_tmp3) {
HXLINE(4940)				_hx_tmp2 = (this->curBeat < 200);
            			}
            			else {
HXLINE(4940)				_hx_tmp2 = false;
            			}
HXDLIN(4940)			if (_hx_tmp2) {
HXLINE(4940)				_hx_tmp1 = this->camZooming;
            			}
            			else {
HXLINE(4940)				_hx_tmp1 = false;
            			}
HXDLIN(4940)			if (_hx_tmp1) {
HXLINE(4940)				_hx_tmp = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            			}
            			else {
HXLINE(4940)				_hx_tmp = false;
            			}
HXDLIN(4940)			if (_hx_tmp) {
HXLINE(4942)				{
HXLINE(4942)					 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(4942)					_g->set_zoom((_g->zoom + (((Float)0.015) / ::PlayState_obj::songMultiplier)));
            				}
HXLINE(4943)				{
HXLINE(4943)					 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(4943)					_g1->set_zoom((_g1->zoom + (((Float)0.03) / ::PlayState_obj::songMultiplier)));
            				}
            			}
HXLINE(4946)			bool _hx_tmp4;
HXDLIN(4946)			bool _hx_tmp5;
HXDLIN(4946)			if (this->camZooming) {
HXLINE(4946)				_hx_tmp5 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            			}
            			else {
HXLINE(4946)				_hx_tmp5 = false;
            			}
HXDLIN(4946)			if (_hx_tmp5) {
HXLINE(4946)				_hx_tmp4 = (::hx::Mod(this->curBeat,4) == 0);
            			}
            			else {
HXLINE(4946)				_hx_tmp4 = false;
            			}
HXDLIN(4946)			if (_hx_tmp4) {
HXLINE(4948)				{
HXLINE(4948)					 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(4948)					_g->set_zoom((_g->zoom + (((Float)0.015) / ::PlayState_obj::songMultiplier)));
            				}
HXLINE(4949)				{
HXLINE(4949)					 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(4949)					_g1->set_zoom((_g1->zoom + (((Float)0.03) / ::PlayState_obj::songMultiplier)));
            				}
            			}
            		}
HXLINE(4952)		if ((::Conductor_obj::bpm < 340)) {
HXLINE(4954)			 ::HealthIcon _hx_tmp = this->iconP1;
HXDLIN(4954)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->iconP1->get_width() + 30)),null());
HXLINE(4955)			 ::HealthIcon _hx_tmp1 = this->iconP2;
HXDLIN(4955)			_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->iconP2->get_width() + 30)),null());
HXLINE(4957)			this->iconP1->updateHitbox();
HXLINE(4958)			this->iconP2->updateHitbox();
            		}
            		else {
HXLINE(4963)			 ::HealthIcon _hx_tmp = this->iconP1;
HXDLIN(4963)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->iconP1->get_width() + 4)),null());
HXLINE(4964)			 ::HealthIcon _hx_tmp1 = this->iconP2;
HXDLIN(4964)			_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->iconP2->get_width() + 4)),null());
HXLINE(4966)			this->iconP1->updateHitbox();
HXLINE(4967)			this->iconP2->updateHitbox();
            		}
HXLINE(4970)		bool _hx_tmp2;
HXDLIN(4970)		if (!(this->endingSong)) {
HXLINE(4970)			_hx_tmp2 = ::hx::IsNotNull( this->currentSection );
            		}
            		else {
HXLINE(4970)			_hx_tmp2 = false;
            		}
HXDLIN(4970)		if (_hx_tmp2) {
HXLINE(4972)			bool _hx_tmp;
HXDLIN(4972)			if (this->allowedToHeadbang) {
HXLINE(4972)				_hx_tmp = (::hx::Mod(this->curBeat,this->gfSpeed) == 0);
            			}
            			else {
HXLINE(4972)				_hx_tmp = false;
            			}
HXDLIN(4972)			if (_hx_tmp) {
HXLINE(4974)				::PlayState_obj::gf->dance(null(),null());
            			}
HXLINE(4977)			bool _hx_tmp1;
HXDLIN(4977)			if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(4977)				_hx_tmp1 = (this->curSong == HX_("Bopeebo",90,29,16,da));
            			}
            			else {
HXLINE(4977)				_hx_tmp1 = false;
            			}
HXDLIN(4977)			if (_hx_tmp1) {
HXLINE(4979)				::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
            			}
HXLINE(4982)			bool _hx_tmp2;
HXDLIN(4982)			bool _hx_tmp3;
HXDLIN(4982)			bool _hx_tmp4;
HXDLIN(4982)			bool _hx_tmp5;
HXDLIN(4982)			if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(4982)				_hx_tmp5 = ::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic),HX_("Tutorial",be,4b,67,5c) );
            			}
            			else {
HXLINE(4982)				_hx_tmp5 = false;
            			}
HXDLIN(4982)			if (_hx_tmp5) {
HXLINE(4982)				_hx_tmp4 = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            			}
            			else {
HXLINE(4982)				_hx_tmp4 = false;
            			}
HXDLIN(4982)			if (_hx_tmp4) {
HXLINE(4982)				_hx_tmp3 = (this->curBeat > 16);
            			}
            			else {
HXLINE(4982)				_hx_tmp3 = false;
            			}
HXDLIN(4982)			if (_hx_tmp3) {
HXLINE(4982)				_hx_tmp2 = (this->curBeat < 48);
            			}
            			else {
HXLINE(4982)				_hx_tmp2 = false;
            			}
HXDLIN(4982)			if (_hx_tmp2) {
HXLINE(4984)				::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(4985)				::PlayState_obj::dad->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
            			}
HXLINE(4988)			if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(4989)				::String _hx_switch_1 = ::PlayState_obj::Stage->curStage;
            				if (  (_hx_switch_1==HX_("limo",1f,17,b3,47)) ){
HXLINE(5008)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            						void _hx_run( ::BackgroundDancer dancer){
            							HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5012_beatHit)
HXLINE(5012)							dancer->dance();
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(5010)						( ( ::flixel::group::FlxTypedGroup)(::PlayState_obj::Stage->swagGroup->get(HX_("grpLimoDancers",70,18,93,51))) )->forEach( ::Dynamic(new _hx_Closure_1()),null());
HXLINE(5015)						bool _hx_tmp;
HXDLIN(5015)						if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 10)) {
HXLINE(5015)							_hx_tmp = this->fastCarCanDrive;
            						}
            						else {
HXLINE(5015)							_hx_tmp = false;
            						}
HXDLIN(5015)						if (_hx_tmp) {
HXLINE(5016)							this->fastCarDrive();
            						}
            					}
HXLINE(5008)					goto _hx_goto_200;
            				}
            				if (  (_hx_switch_1==HX_("mall",d4,3a,56,48)) ){
HXLINE(4998)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(5000)						int _g = 0;
HXDLIN(5000)						::Array< ::Dynamic> _g1 = ::PlayState_obj::Stage->animatedBacks;
HXDLIN(5000)						while((_g < _g1->length)){
HXLINE(5000)							 ::flixel::FlxSprite bg = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(5000)							_g = (_g + 1);
HXLINE(5001)							bg->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            						}
            					}
HXLINE(4998)					goto _hx_goto_200;
            				}
            				if (  (_hx_switch_1==HX_("outside",25,8d,5e,e6)) ){
HXLINE(5004)					int _g = 0;
HXDLIN(5004)					::Array< ::Dynamic> _g1 = ::PlayState_obj::Stage->animatedBacks;
HXDLIN(5004)					while((_g < _g1->length)){
HXLINE(5004)						 ::flixel::FlxSprite bg = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(5004)						_g = (_g + 1);
HXLINE(5005)						bg->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            					}
HXLINE(5004)					goto _hx_goto_200;
            				}
            				if (  (_hx_switch_1==HX_("philly",28,77,5e,ef)) ){
HXLINE(5019)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(5021)						if (!(this->trainMoving)) {
HXLINE(5022)							 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(5022)							_hx_tmp->trainCooldown = (_hx_tmp->trainCooldown + 1);
            						}
HXLINE(5024)						if ((::hx::Mod(this->curBeat,4) == 0)) {
            							HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            							void _hx_run( ::flixel::FlxSprite light){
            								HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5029_beatHit)
HXLINE(5029)								light->set_visible(false);
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(5026)							 ::flixel::group::FlxTypedGroup phillyCityLights = ( ( ::flixel::group::FlxTypedGroup)(::PlayState_obj::Stage->swagGroup->get(HX_("phillyCityLights",30,e0,12,1f))) );
HXLINE(5027)							phillyCityLights->forEach( ::Dynamic(new _hx_Closure_2()),null());
HXLINE(5032)							this->curLight = ::flixel::FlxG_obj::random->_hx_int(0,(phillyCityLights->length - 1),null());
HXLINE(5034)							phillyCityLights->members->__get(this->curLight)->__SetField(HX_("visible",72,78,24,a3),true,::hx::paccDynamic);
            						}
            					}
HXLINE(5039)					bool _hx_tmp;
HXDLIN(5039)					bool _hx_tmp1;
HXDLIN(5039)					bool _hx_tmp2;
HXDLIN(5039)					if ((::hx::Mod(this->curBeat,8) == 4)) {
HXLINE(5039)						Float Chance;
HXDLIN(5039)						if ((::Conductor_obj::bpm > 320)) {
HXLINE(5039)							Chance = ( (Float)(150) );
            						}
            						else {
HXLINE(5039)							Chance = ( (Float)(30) );
            						}
HXDLIN(5039)						_hx_tmp2 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < Chance);
            					}
            					else {
HXLINE(5039)						_hx_tmp2 = false;
            					}
HXDLIN(5039)					if (_hx_tmp2) {
HXLINE(5039)						_hx_tmp1 = !(this->trainMoving);
            					}
            					else {
HXLINE(5039)						_hx_tmp1 = false;
            					}
HXDLIN(5039)					if (_hx_tmp1) {
HXLINE(5039)						_hx_tmp = (this->trainCooldown > 8);
            					}
            					else {
HXLINE(5039)						_hx_tmp = false;
            					}
HXDLIN(5039)					if (_hx_tmp) {
HXLINE(5041)						if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(5043)							this->trainCooldown = ::flixel::FlxG_obj::random->_hx_int(-4,0,null());
HXLINE(5044)							this->trainStart();
            						}
            					}
HXLINE(5018)					goto _hx_goto_200;
            				}
            				if (  (_hx_switch_1==HX_("school",74,b8,c8,40)) ){
HXLINE(4992)					bool _hx_tmp;
HXDLIN(4992)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(4992)						_hx_tmp = ::hx::IsNotNull( ::PlayState_obj::Stage->swagBacks->get(HX_("bgGirls",92,16,2b,41)) );
            					}
            					else {
HXLINE(4992)						_hx_tmp = false;
            					}
HXDLIN(4992)					if (_hx_tmp) {
HXLINE(4994)						::PlayState_obj::Stage->swagBacks->get(HX_("bgGirls",92,16,2b,41))->__Field(HX_("dance",33,83,83,d4),::hx::paccDynamic)();
            					}
HXLINE(4992)					goto _hx_goto_200;
            				}
            				_hx_goto_200:;
            			}
HXLINE(5049)			bool _hx_tmp6;
HXDLIN(5049)			bool _hx_tmp7;
HXDLIN(5049)			if (::PlayState_obj::Stage->halloweenLevel) {
HXLINE(5049)				Float Chance;
HXDLIN(5049)				if ((::Conductor_obj::bpm > 320)) {
HXLINE(5049)					Chance = ( (Float)(100) );
            				}
            				else {
HXLINE(5049)					Chance = ( (Float)(10) );
            				}
HXDLIN(5049)				_hx_tmp7 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < Chance);
            			}
            			else {
HXLINE(5049)				_hx_tmp7 = false;
            			}
HXDLIN(5049)			if (_hx_tmp7) {
HXLINE(5049)				_hx_tmp6 = (this->curBeat > (this->lightningStrikeBeat + this->lightningOffset));
            			}
            			else {
HXLINE(5049)				_hx_tmp6 = false;
            			}
HXDLIN(5049)			if (_hx_tmp6) {
HXLINE(5051)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(5053)					this->lightningStrikeShit();
            				}
            			}
HXLINE(5057)			if (::PlayStateChangeables_obj::Optimize) {
HXLINE(5058)				bool _hx_tmp;
HXDLIN(5058)				if ((this->vocals->_volume == 0)) {
HXLINE(5058)					_hx_tmp = !(( (bool)(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            				}
            				else {
HXLINE(5058)					_hx_tmp = false;
            				}
HXDLIN(5058)				if (_hx_tmp) {
HXLINE(5059)					this->vocals->set_volume(( (Float)(1) ));
            				}
            			}
            		}
            	}


void PlayState_obj::poggers( ::Dynamic __o_cleanTheSong){
            		 ::Dynamic cleanTheSong = __o_cleanTheSong;
            		if (::hx::IsNull(__o_cleanTheSong)) cleanTheSong = false;
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5066_poggers)
HXLINE(5067)		::Array< ::Dynamic> notes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5069)		if (( (bool)(cleanTheSong) )) {
HXLINE(5071)			this->cleanedSong = ::PlayState_obj::SONG;
HXLINE(5073)			{
HXLINE(5073)				int _g = 0;
HXDLIN(5073)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->cleanedSong->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(5073)				while((_g < _g1->length)){
HXLINE(5073)					 ::Dynamic section = _g1->__get(_g);
HXDLIN(5073)					_g = (_g + 1);
HXLINE(5076)					::Array< ::Dynamic> removed = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5078)					{
HXLINE(5078)						int _g2 = 0;
HXDLIN(5078)						::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(5078)						while((_g2 < _g3->length)){
HXLINE(5078)							::cpp::VirtualArray note = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(5078)							_g2 = (_g2 + 1);
HXLINE(5081)							 ::Dynamic old = note->__get(0);
HXLINE(5082)							if (::hx::IsLess( note->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(5084)								notes->push(note);
HXLINE(5085)								removed->push(note);
            							}
HXLINE(5087)							if (::hx::IsGreater( note->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) )) {
HXLINE(5089)								notes->push(note);
HXLINE(5090)								removed->push(note);
            							}
            						}
            					}
HXLINE(5094)					{
HXLINE(5094)						int _g4 = 0;
HXDLIN(5094)						while((_g4 < removed->length)){
HXLINE(5094)							::cpp::VirtualArray i = ::cpp::VirtualArray( removed->__get(_g4));
HXDLIN(5094)							_g4 = (_g4 + 1);
HXLINE(5096)							( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
            						}
            					}
            				}
            			}
HXLINE(5100)			{
HXLINE(5100)				int _g2 = 0;
HXDLIN(5100)				::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(this->cleanedSong->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(5100)				while((_g2 < _g3->length)){
HXLINE(5100)					 ::Dynamic section = _g3->__get(_g2);
HXDLIN(5100)					_g2 = (_g2 + 1);
HXLINE(5103)					::Array< ::Dynamic> saveRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5105)					{
HXLINE(5105)						int _g = 0;
HXDLIN(5105)						while((_g < notes->length)){
HXLINE(5105)							::cpp::VirtualArray i = ::cpp::VirtualArray( notes->__get(_g));
HXDLIN(5105)							_g = (_g + 1);
HXLINE(5107)							bool _hx_tmp;
HXDLIN(5107)							if (::hx::IsGreaterEq( i->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(5107)								_hx_tmp = ::hx::IsLess( i->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            							}
            							else {
HXLINE(5107)								_hx_tmp = false;
            							}
HXDLIN(5107)							if (_hx_tmp) {
HXLINE(5109)								saveRemove->push(i);
HXLINE(5110)								( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(i);
            							}
            						}
            					}
HXLINE(5114)					{
HXLINE(5114)						int _g1 = 0;
HXDLIN(5114)						while((_g1 < saveRemove->length)){
HXLINE(5114)							::cpp::VirtualArray i = ::cpp::VirtualArray( saveRemove->__get(_g1));
HXDLIN(5114)							_g1 = (_g1 + 1);
HXLINE(5115)							notes->remove(i);
            						}
            					}
            				}
            			}
HXLINE(5123)			::PlayState_obj::SONG = this->cleanedSong;
            		}
            		else {
HXLINE(5128)			{
HXLINE(5128)				int _g = 0;
HXDLIN(5128)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(5128)				while((_g < _g1->length)){
HXLINE(5128)					 ::Dynamic section = _g1->__get(_g);
HXDLIN(5128)					_g = (_g + 1);
HXLINE(5131)					::Array< ::Dynamic> removed = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5133)					{
HXLINE(5133)						int _g2 = 0;
HXDLIN(5133)						::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(5133)						while((_g2 < _g3->length)){
HXLINE(5133)							::cpp::VirtualArray note = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(5133)							_g2 = (_g2 + 1);
HXLINE(5136)							 ::Dynamic old = note->__get(0);
HXLINE(5137)							if (::hx::IsLess( note->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(5139)								notes->push(note);
HXLINE(5140)								removed->push(note);
            							}
HXLINE(5142)							if (::hx::IsGreater( note->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) )) {
HXLINE(5144)								notes->push(note);
HXLINE(5145)								removed->push(note);
            							}
            						}
            					}
HXLINE(5149)					{
HXLINE(5149)						int _g4 = 0;
HXDLIN(5149)						while((_g4 < removed->length)){
HXLINE(5149)							::cpp::VirtualArray i = ::cpp::VirtualArray( removed->__get(_g4));
HXDLIN(5149)							_g4 = (_g4 + 1);
HXLINE(5151)							( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
            						}
            					}
            				}
            			}
HXLINE(5155)			{
HXLINE(5155)				int _g2 = 0;
HXDLIN(5155)				::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(5155)				while((_g2 < _g3->length)){
HXLINE(5155)					 ::Dynamic section = _g3->__get(_g2);
HXDLIN(5155)					_g2 = (_g2 + 1);
HXLINE(5158)					::Array< ::Dynamic> saveRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5160)					{
HXLINE(5160)						int _g = 0;
HXDLIN(5160)						while((_g < notes->length)){
HXLINE(5160)							::cpp::VirtualArray i = ::cpp::VirtualArray( notes->__get(_g));
HXDLIN(5160)							_g = (_g + 1);
HXLINE(5162)							bool _hx_tmp;
HXDLIN(5162)							if (::hx::IsGreaterEq( i->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(5162)								_hx_tmp = ::hx::IsLess( i->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            							}
            							else {
HXLINE(5162)								_hx_tmp = false;
            							}
HXDLIN(5162)							if (_hx_tmp) {
HXLINE(5164)								saveRemove->push(i);
HXLINE(5165)								( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(i);
            							}
            						}
            					}
HXLINE(5169)					{
HXLINE(5169)						int _g1 = 0;
HXDLIN(5169)						while((_g1 < saveRemove->length)){
HXLINE(5169)							::cpp::VirtualArray i = ::cpp::VirtualArray( saveRemove->__get(_g1));
HXDLIN(5169)							_g1 = (_g1 + 1);
HXLINE(5170)							notes->remove(i);
            						}
            					}
            				}
            			}
HXLINE(5178)			::PlayState_obj::SONG = this->cleanedSong;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,poggers,(void))

 ::PlayState PlayState_obj::instance;

 ::Dynamic PlayState_obj::SONG;

bool PlayState_obj::isStoryMode;

int PlayState_obj::storyWeek;

::Array< ::String > PlayState_obj::storyPlaylist;

int PlayState_obj::storyDifficulty;

int PlayState_obj::weekSong;

int PlayState_obj::weekScore;

int PlayState_obj::shits;

int PlayState_obj::bads;

int PlayState_obj::goods;

int PlayState_obj::sicks;

 ::flixel::FlxSprite PlayState_obj::songPosBG;

 ::flixel::ui::FlxBar PlayState_obj::songPosBar;

 ::Replay PlayState_obj::rep;

bool PlayState_obj::loadRep;

bool PlayState_obj::inResults;

::Array< bool > PlayState_obj::noteBools;

bool PlayState_obj::isSM;

 ::smTools::SMFile PlayState_obj::sm;

::String PlayState_obj::pathToSm;

 ::Character PlayState_obj::dad;

 ::Character PlayState_obj::gf;

 ::Boyfriend PlayState_obj::boyfriend;

 ::flixel::FlxObject PlayState_obj::prevCamFollow;

 ::flixel::group::FlxTypedGroup PlayState_obj::strumLineNotes;

 ::flixel::group::FlxTypedGroup PlayState_obj::playerStrums;

 ::flixel::group::FlxTypedGroup PlayState_obj::cpuStrums;

int PlayState_obj::misses;

int PlayState_obj::campaignMisses;

int PlayState_obj::campaignSicks;

int PlayState_obj::campaignGoods;

int PlayState_obj::campaignBads;

int PlayState_obj::campaignShits;

bool PlayState_obj::offsetTesting;

 ::flixel::_hx_system::FlxSound PlayState_obj::trainSound;

int PlayState_obj::campaignScore;

Float PlayState_obj::daPixelZoom;

bool PlayState_obj::theFunne;

bool PlayState_obj::stageTesting;

 ::Stage PlayState_obj::Stage;

int PlayState_obj::repPresses;

int PlayState_obj::repReleases;

Float PlayState_obj::timeCurrently;

Float PlayState_obj::timeCurrentlyR;

Float PlayState_obj::songOffset;

int PlayState_obj::highestCombo;

Float PlayState_obj::startTime;

 ::ModchartState PlayState_obj::luaModchart;

Float PlayState_obj::songMultiplier;

Float PlayState_obj::songRate;

 ::WebmHandler PlayState_obj::webmHandler;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(visibleCombos,"visibleCombos");
	HX_MARK_MEMBER_NAME(visibleNotes,"visibleNotes");
	HX_MARK_MEMBER_NAME(songLength,"songLength");
	HX_MARK_MEMBER_NAME(kadeEngineWatermark,"kadeEngineWatermark");
	HX_MARK_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_MARK_MEMBER_NAME(iconRPC,"iconRPC");
	HX_MARK_MEMBER_NAME(detailsText,"detailsText");
	HX_MARK_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(originalX,"originalX");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(camZooming,"camZooming");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(accuracy,"accuracy");
	HX_MARK_MEMBER_NAME(accuracyDefault,"accuracyDefault");
	HX_MARK_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_MARK_MEMBER_NAME(totalNotesHitDefault,"totalNotesHitDefault");
	HX_MARK_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_MARK_MEMBER_NAME(ss,"ss");
	HX_MARK_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_MARK_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(iconP1,"iconP1");
	HX_MARK_MEMBER_NAME(iconP2,"iconP2");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camSustains,"camSustains");
	HX_MARK_MEMBER_NAME(camNotes,"camNotes");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(cannotDie,"cannotDie");
	HX_MARK_MEMBER_NAME(isSMFile,"isSMFile");
	HX_MARK_MEMBER_NAME(notesHitArray,"notesHitArray");
	HX_MARK_MEMBER_NAME(currentFrames,"currentFrames");
	HX_MARK_MEMBER_NAME(idleToBeat,"idleToBeat");
	HX_MARK_MEMBER_NAME(idleBeat,"idleBeat");
	HX_MARK_MEMBER_NAME(forcedToIdle,"forcedToIdle");
	HX_MARK_MEMBER_NAME(allowedToHeadbang,"allowedToHeadbang");
	HX_MARK_MEMBER_NAME(allowedToCheer,"allowedToCheer");
	HX_MARK_MEMBER_NAME(dialogue,"dialogue");
	HX_MARK_MEMBER_NAME(songName,"songName");
	HX_MARK_MEMBER_NAME(altSuffix,"altSuffix");
	HX_MARK_MEMBER_NAME(currentSection,"currentSection");
	HX_MARK_MEMBER_NAME(fc,"fc");
	HX_MARK_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_MARK_MEMBER_NAME(talking,"talking");
	HX_MARK_MEMBER_NAME(songScore,"songScore");
	HX_MARK_MEMBER_NAME(songScoreDef,"songScoreDef");
	HX_MARK_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_MARK_MEMBER_NAME(replayTxt,"replayTxt");
	HX_MARK_MEMBER_NAME(needSkip,"needSkip");
	HX_MARK_MEMBER_NAME(skipActive,"skipActive");
	HX_MARK_MEMBER_NAME(skipText,"skipText");
	HX_MARK_MEMBER_NAME(skipTo,"skipTo");
	HX_MARK_MEMBER_NAME(funneEffect,"funneEffect");
	HX_MARK_MEMBER_NAME(inCutscene,"inCutscene");
	HX_MARK_MEMBER_NAME(usedTimeTravel,"usedTimeTravel");
	HX_MARK_MEMBER_NAME(camPos,"camPos");
	HX_MARK_MEMBER_NAME(randomVar,"randomVar");
	HX_MARK_MEMBER_NAME(triggeredAlready,"triggeredAlready");
	HX_MARK_MEMBER_NAME(grpNoteSplashes,"grpNoteSplashes");
	HX_MARK_MEMBER_NAME(botPlayState,"botPlayState");
	HX_MARK_MEMBER_NAME(saveNotes,"saveNotes");
	HX_MARK_MEMBER_NAME(saveJudge,"saveJudge");
	HX_MARK_MEMBER_NAME(replayAna,"replayAna");
	HX_MARK_MEMBER_NAME(executeModchart,"executeModchart");
	HX_MARK_MEMBER_NAME(dataSuffix,"dataSuffix");
	HX_MARK_MEMBER_NAME(dataColor,"dataColor");
	HX_MARK_MEMBER_NAME(startTimer,"startTimer");
	HX_MARK_MEMBER_NAME(perfectMode,"perfectMode");
	HX_MARK_MEMBER_NAME(luaWiggles,"luaWiggles");
	HX_MARK_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_MARK_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_MARK_MEMBER_NAME(songTime,"songTime");
	HX_MARK_MEMBER_NAME(keys,"keys");
	HX_MARK_MEMBER_NAME(closestNotes,"closestNotes");
	HX_MARK_MEMBER_NAME(songStarted,"songStarted");
	HX_MARK_MEMBER_NAME(doAnything,"doAnything");
	HX_MARK_MEMBER_NAME(previousRate,"previousRate");
	HX_MARK_MEMBER_NAME(debugNum,"debugNum");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_MARK_MEMBER_NAME(canPause,"canPause");
	HX_MARK_MEMBER_NAME(nps,"nps");
	HX_MARK_MEMBER_NAME(maxNPS,"maxNPS");
	HX_MARK_MEMBER_NAME(stopUpdate,"stopUpdate");
	HX_MARK_MEMBER_NAME(removedVideo,"removedVideo");
	HX_MARK_MEMBER_NAME(currentBPM,"currentBPM");
	HX_MARK_MEMBER_NAME(updateFrame,"updateFrame");
	HX_MARK_MEMBER_NAME(pastScrollChanges,"pastScrollChanges");
	HX_MARK_MEMBER_NAME(currentLuaIndex,"currentLuaIndex");
	HX_MARK_MEMBER_NAME(endingSong,"endingSong");
	HX_MARK_MEMBER_NAME(hits,"hits");
	HX_MARK_MEMBER_NAME(offsetTest,"offsetTest");
	HX_MARK_MEMBER_NAME(timeShown,"timeShown");
	HX_MARK_MEMBER_NAME(currentTimingShown,"currentTimingShown");
	HX_MARK_MEMBER_NAME(upHold,"upHold");
	HX_MARK_MEMBER_NAME(downHold,"downHold");
	HX_MARK_MEMBER_NAME(rightHold,"rightHold");
	HX_MARK_MEMBER_NAME(leftHold,"leftHold");
	HX_MARK_MEMBER_NAME(fuckingVolume,"fuckingVolume");
	HX_MARK_MEMBER_NAME(useVideo,"useVideo");
	HX_MARK_MEMBER_NAME(playingDathing,"playingDathing");
	HX_MARK_MEMBER_NAME(videoSprite,"videoSprite");
	HX_MARK_MEMBER_NAME(mashing,"mashing");
	HX_MARK_MEMBER_NAME(mashViolations,"mashViolations");
	HX_MARK_MEMBER_NAME(etternaModeScore,"etternaModeScore");
	HX_MARK_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	HX_MARK_MEMBER_NAME(trainMoving,"trainMoving");
	HX_MARK_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_MARK_MEMBER_NAME(trainCars,"trainCars");
	HX_MARK_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_MARK_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_MARK_MEMBER_NAME(startedMoving,"startedMoving");
	HX_MARK_MEMBER_NAME(danced,"danced");
	HX_MARK_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_MARK_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_MARK_MEMBER_NAME(cleanedSong,"cleanedSong");
	HX_MARK_MEMBER_NAME(curLight,"curLight");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(visibleCombos,"visibleCombos");
	HX_VISIT_MEMBER_NAME(visibleNotes,"visibleNotes");
	HX_VISIT_MEMBER_NAME(songLength,"songLength");
	HX_VISIT_MEMBER_NAME(kadeEngineWatermark,"kadeEngineWatermark");
	HX_VISIT_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_VISIT_MEMBER_NAME(iconRPC,"iconRPC");
	HX_VISIT_MEMBER_NAME(detailsText,"detailsText");
	HX_VISIT_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(originalX,"originalX");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(camZooming,"camZooming");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(accuracy,"accuracy");
	HX_VISIT_MEMBER_NAME(accuracyDefault,"accuracyDefault");
	HX_VISIT_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_VISIT_MEMBER_NAME(totalNotesHitDefault,"totalNotesHitDefault");
	HX_VISIT_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_VISIT_MEMBER_NAME(ss,"ss");
	HX_VISIT_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_VISIT_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(iconP1,"iconP1");
	HX_VISIT_MEMBER_NAME(iconP2,"iconP2");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camSustains,"camSustains");
	HX_VISIT_MEMBER_NAME(camNotes,"camNotes");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(cannotDie,"cannotDie");
	HX_VISIT_MEMBER_NAME(isSMFile,"isSMFile");
	HX_VISIT_MEMBER_NAME(notesHitArray,"notesHitArray");
	HX_VISIT_MEMBER_NAME(currentFrames,"currentFrames");
	HX_VISIT_MEMBER_NAME(idleToBeat,"idleToBeat");
	HX_VISIT_MEMBER_NAME(idleBeat,"idleBeat");
	HX_VISIT_MEMBER_NAME(forcedToIdle,"forcedToIdle");
	HX_VISIT_MEMBER_NAME(allowedToHeadbang,"allowedToHeadbang");
	HX_VISIT_MEMBER_NAME(allowedToCheer,"allowedToCheer");
	HX_VISIT_MEMBER_NAME(dialogue,"dialogue");
	HX_VISIT_MEMBER_NAME(songName,"songName");
	HX_VISIT_MEMBER_NAME(altSuffix,"altSuffix");
	HX_VISIT_MEMBER_NAME(currentSection,"currentSection");
	HX_VISIT_MEMBER_NAME(fc,"fc");
	HX_VISIT_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_VISIT_MEMBER_NAME(talking,"talking");
	HX_VISIT_MEMBER_NAME(songScore,"songScore");
	HX_VISIT_MEMBER_NAME(songScoreDef,"songScoreDef");
	HX_VISIT_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_VISIT_MEMBER_NAME(replayTxt,"replayTxt");
	HX_VISIT_MEMBER_NAME(needSkip,"needSkip");
	HX_VISIT_MEMBER_NAME(skipActive,"skipActive");
	HX_VISIT_MEMBER_NAME(skipText,"skipText");
	HX_VISIT_MEMBER_NAME(skipTo,"skipTo");
	HX_VISIT_MEMBER_NAME(funneEffect,"funneEffect");
	HX_VISIT_MEMBER_NAME(inCutscene,"inCutscene");
	HX_VISIT_MEMBER_NAME(usedTimeTravel,"usedTimeTravel");
	HX_VISIT_MEMBER_NAME(camPos,"camPos");
	HX_VISIT_MEMBER_NAME(randomVar,"randomVar");
	HX_VISIT_MEMBER_NAME(triggeredAlready,"triggeredAlready");
	HX_VISIT_MEMBER_NAME(grpNoteSplashes,"grpNoteSplashes");
	HX_VISIT_MEMBER_NAME(botPlayState,"botPlayState");
	HX_VISIT_MEMBER_NAME(saveNotes,"saveNotes");
	HX_VISIT_MEMBER_NAME(saveJudge,"saveJudge");
	HX_VISIT_MEMBER_NAME(replayAna,"replayAna");
	HX_VISIT_MEMBER_NAME(executeModchart,"executeModchart");
	HX_VISIT_MEMBER_NAME(dataSuffix,"dataSuffix");
	HX_VISIT_MEMBER_NAME(dataColor,"dataColor");
	HX_VISIT_MEMBER_NAME(startTimer,"startTimer");
	HX_VISIT_MEMBER_NAME(perfectMode,"perfectMode");
	HX_VISIT_MEMBER_NAME(luaWiggles,"luaWiggles");
	HX_VISIT_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_VISIT_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_VISIT_MEMBER_NAME(songTime,"songTime");
	HX_VISIT_MEMBER_NAME(keys,"keys");
	HX_VISIT_MEMBER_NAME(closestNotes,"closestNotes");
	HX_VISIT_MEMBER_NAME(songStarted,"songStarted");
	HX_VISIT_MEMBER_NAME(doAnything,"doAnything");
	HX_VISIT_MEMBER_NAME(previousRate,"previousRate");
	HX_VISIT_MEMBER_NAME(debugNum,"debugNum");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_VISIT_MEMBER_NAME(canPause,"canPause");
	HX_VISIT_MEMBER_NAME(nps,"nps");
	HX_VISIT_MEMBER_NAME(maxNPS,"maxNPS");
	HX_VISIT_MEMBER_NAME(stopUpdate,"stopUpdate");
	HX_VISIT_MEMBER_NAME(removedVideo,"removedVideo");
	HX_VISIT_MEMBER_NAME(currentBPM,"currentBPM");
	HX_VISIT_MEMBER_NAME(updateFrame,"updateFrame");
	HX_VISIT_MEMBER_NAME(pastScrollChanges,"pastScrollChanges");
	HX_VISIT_MEMBER_NAME(currentLuaIndex,"currentLuaIndex");
	HX_VISIT_MEMBER_NAME(endingSong,"endingSong");
	HX_VISIT_MEMBER_NAME(hits,"hits");
	HX_VISIT_MEMBER_NAME(offsetTest,"offsetTest");
	HX_VISIT_MEMBER_NAME(timeShown,"timeShown");
	HX_VISIT_MEMBER_NAME(currentTimingShown,"currentTimingShown");
	HX_VISIT_MEMBER_NAME(upHold,"upHold");
	HX_VISIT_MEMBER_NAME(downHold,"downHold");
	HX_VISIT_MEMBER_NAME(rightHold,"rightHold");
	HX_VISIT_MEMBER_NAME(leftHold,"leftHold");
	HX_VISIT_MEMBER_NAME(fuckingVolume,"fuckingVolume");
	HX_VISIT_MEMBER_NAME(useVideo,"useVideo");
	HX_VISIT_MEMBER_NAME(playingDathing,"playingDathing");
	HX_VISIT_MEMBER_NAME(videoSprite,"videoSprite");
	HX_VISIT_MEMBER_NAME(mashing,"mashing");
	HX_VISIT_MEMBER_NAME(mashViolations,"mashViolations");
	HX_VISIT_MEMBER_NAME(etternaModeScore,"etternaModeScore");
	HX_VISIT_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	HX_VISIT_MEMBER_NAME(trainMoving,"trainMoving");
	HX_VISIT_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_VISIT_MEMBER_NAME(trainCars,"trainCars");
	HX_VISIT_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_VISIT_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_VISIT_MEMBER_NAME(startedMoving,"startedMoving");
	HX_VISIT_MEMBER_NAME(danced,"danced");
	HX_VISIT_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_VISIT_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_VISIT_MEMBER_NAME(cleanedSong,"cleanedSong");
	HX_VISIT_MEMBER_NAME(curLight,"curLight");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ss") ) { return ::hx::Val( ss ); }
		if (HX_FIELD_EQ(inName,"fc") ) { return ::hx::Val( fc ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"nps") ) { return ::hx::Val( nps ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { return ::hx::Val( keys ); }
		if (HX_FIELD_EQ(inName,"hits") ) { return ::hx::Val( hits ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"iconP1") ) { return ::hx::Val( iconP1 ); }
		if (HX_FIELD_EQ(inName,"iconP2") ) { return ::hx::Val( iconP2 ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"skipTo") ) { return ::hx::Val( skipTo ); }
		if (HX_FIELD_EQ(inName,"camPos") ) { return ::hx::Val( camPos ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"getKey") ) { return ::hx::Val( getKey_dyn() ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"maxNPS") ) { return ::hx::Val( maxNPS ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"upHold") ) { return ::hx::Val( upHold ); }
		if (HX_FIELD_EQ(inName,"danced") ) { return ::hx::Val( danced ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iconRPC") ) { return ::hx::Val( iconRPC ); }
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { return ::hx::Val( gfSpeed ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"talking") ) { return ::hx::Val( talking ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyShit") ) { return ::hx::Val( keyShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"focusIn") ) { return ::hx::Val( focusIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"mashing") ) { return ::hx::Val( mashing ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"poggers") ) { return ::hx::Val( poggers_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"accuracy") ) { return ::hx::Val( accuracy ); }
		if (HX_FIELD_EQ(inName,"camNotes") ) { return ::hx::Val( camNotes ); }
		if (HX_FIELD_EQ(inName,"isSMFile") ) { return ::hx::Val( isSMFile ); }
		if (HX_FIELD_EQ(inName,"idleBeat") ) { return ::hx::Val( idleBeat ); }
		if (HX_FIELD_EQ(inName,"dialogue") ) { return ::hx::Val( dialogue ); }
		if (HX_FIELD_EQ(inName,"songName") ) { return ::hx::Val( songName ); }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { return ::hx::Val( scoreTxt ); }
		if (HX_FIELD_EQ(inName,"needSkip") ) { return ::hx::Val( needSkip ); }
		if (HX_FIELD_EQ(inName,"skipText") ) { return ::hx::Val( skipText ); }
		if (HX_FIELD_EQ(inName,"songTime") ) { return ::hx::Val( songTime ); }
		if (HX_FIELD_EQ(inName,"debugNum") ) { return ::hx::Val( debugNum ); }
		if (HX_FIELD_EQ(inName,"canPause") ) { return ::hx::Val( canPause ); }
		if (HX_FIELD_EQ(inName,"downHold") ) { return ::hx::Val( downHold ); }
		if (HX_FIELD_EQ(inName,"leftHold") ) { return ::hx::Val( leftHold ); }
		if (HX_FIELD_EQ(inName,"useVideo") ) { return ::hx::Val( useVideo ); }
		if (HX_FIELD_EQ(inName,"focusOut") ) { return ::hx::Val( focusOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		if (HX_FIELD_EQ(inName,"curLight") ) { return ::hx::Val( curLight ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"originalX") ) { return ::hx::Val( originalX ); }
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		if (HX_FIELD_EQ(inName,"cannotDie") ) { return ::hx::Val( cannotDie ); }
		if (HX_FIELD_EQ(inName,"altSuffix") ) { return ::hx::Val( altSuffix ); }
		if (HX_FIELD_EQ(inName,"songScore") ) { return ::hx::Val( songScore ); }
		if (HX_FIELD_EQ(inName,"replayTxt") ) { return ::hx::Val( replayTxt ); }
		if (HX_FIELD_EQ(inName,"randomVar") ) { return ::hx::Val( randomVar ); }
		if (HX_FIELD_EQ(inName,"saveNotes") ) { return ::hx::Val( saveNotes ); }
		if (HX_FIELD_EQ(inName,"saveJudge") ) { return ::hx::Val( saveJudge ); }
		if (HX_FIELD_EQ(inName,"replayAna") ) { return ::hx::Val( replayAna ); }
		if (HX_FIELD_EQ(inName,"dataColor") ) { return ::hx::Val( dataColor ); }
		if (HX_FIELD_EQ(inName,"addObject") ) { return ::hx::Val( addObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"timeShown") ) { return ::hx::Val( timeShown ); }
		if (HX_FIELD_EQ(inName,"rightHold") ) { return ::hx::Val( rightHold ); }
		if (HX_FIELD_EQ(inName,"noteCheck") ) { return ::hx::Val( noteCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainCars") ) { return ::hx::Val( trainCars ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songLength") ) { return ::hx::Val( songLength ); }
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"camZooming") ) { return ::hx::Val( camZooming ); }
		if (HX_FIELD_EQ(inName,"idleToBeat") ) { return ::hx::Val( idleToBeat ); }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { return ::hx::Val( wiggleShit ); }
		if (HX_FIELD_EQ(inName,"skipActive") ) { return ::hx::Val( skipActive ); }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { return ::hx::Val( inCutscene ); }
		if (HX_FIELD_EQ(inName,"dataSuffix") ) { return ::hx::Val( dataSuffix ); }
		if (HX_FIELD_EQ(inName,"startTimer") ) { return ::hx::Val( startTimer ); }
		if (HX_FIELD_EQ(inName,"luaWiggles") ) { return ::hx::Val( luaWiggles ); }
		if (HX_FIELD_EQ(inName,"doAnything") ) { return ::hx::Val( doAnything ); }
		if (HX_FIELD_EQ(inName,"sortByShit") ) { return ::hx::Val( sortByShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"tweenCamIn") ) { return ::hx::Val( tweenCamIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopUpdate") ) { return ::hx::Val( stopUpdate ); }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { return ::hx::Val( currentBPM ); }
		if (HX_FIELD_EQ(inName,"endingSong") ) { return ::hx::Val( endingSong ); }
		if (HX_FIELD_EQ(inName,"offsetTest") ) { return ::hx::Val( offsetTest ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"findByTime") ) { return ::hx::Val( findByTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"pressArrow") ) { return ::hx::Val( pressArrow_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainStart") ) { return ::hx::Val( trainStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainReset") ) { return ::hx::Val( trainReset_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"detailsText") ) { return ::hx::Val( detailsText ); }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { return ::hx::Val( totalPlayed ); }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { return ::hx::Val( healthBarBG ); }
		if (HX_FIELD_EQ(inName,"camSustains") ) { return ::hx::Val( camSustains ); }
		if (HX_FIELD_EQ(inName,"funneEffect") ) { return ::hx::Val( funneEffect ); }
		if (HX_FIELD_EQ(inName,"schoolIntro") ) { return ::hx::Val( schoolIntro_dyn() ); }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { return ::hx::Val( perfectMode ); }
		if (HX_FIELD_EQ(inName,"handleInput") ) { return ::hx::Val( handleInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"songStarted") ) { return ::hx::Val( songStarted ); }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { return ::hx::Val( updateFrame ); }
		if (HX_FIELD_EQ(inName,"videoSprite") ) { return ::hx::Val( videoSprite ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainMoving") ) { return ::hx::Val( trainMoving ); }
		if (HX_FIELD_EQ(inName,"cleanedSong") ) { return ::hx::Val( cleanedSong ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visibleNotes") ) { return ::hx::Val( visibleNotes ); }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"forcedToIdle") ) { return ::hx::Val( forcedToIdle ); }
		if (HX_FIELD_EQ(inName,"songScoreDef") ) { return ::hx::Val( songScoreDef ); }
		if (HX_FIELD_EQ(inName,"botPlayState") ) { return ::hx::Val( botPlayState ); }
		if (HX_FIELD_EQ(inName,"removeObject") ) { return ::hx::Val( removeObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"CarlDialogue") ) { return ::hx::Val( CarlDialogue_dyn() ); }
		if (HX_FIELD_EQ(inName,"releaseInput") ) { return ::hx::Val( releaseInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"closestNotes") ) { return ::hx::Val( closestNotes ); }
		if (HX_FIELD_EQ(inName,"previousRate") ) { return ::hx::Val( previousRate ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"removedVideo") ) { return ::hx::Val( removedVideo ); }
		if (HX_FIELD_EQ(inName,"NearlyEquals") ) { return ::hx::Val( NearlyEquals_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetFastCar") ) { return ::hx::Val( resetFastCar_dyn() ); }
		if (HX_FIELD_EQ(inName,"fastCarDrive") ) { return ::hx::Val( fastCarDrive_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleCombos") ) { return ::hx::Val( visibleCombos ); }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { return ::hx::Val( totalNotesHit ); }
		if (HX_FIELD_EQ(inName,"notesHitArray") ) { return ::hx::Val( notesHitArray ); }
		if (HX_FIELD_EQ(inName,"currentFrames") ) { return ::hx::Val( currentFrames ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRatesScore") ) { return ::hx::Val( getRatesScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"fuckingVolume") ) { return ::hx::Val( fuckingVolume ); }
		if (HX_FIELD_EQ(inName,"getKeyPresses") ) { return ::hx::Val( getKeyPresses_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { return ::hx::Val( trainCooldown ); }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { return ::hx::Val( startedMoving ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { return ::hx::Val( generatedMusic ); }
		if (HX_FIELD_EQ(inName,"allowedToCheer") ) { return ::hx::Val( allowedToCheer ); }
		if (HX_FIELD_EQ(inName,"currentSection") ) { return ::hx::Val( currentSection ); }
		if (HX_FIELD_EQ(inName,"usedTimeTravel") ) { return ::hx::Val( usedTimeTravel ); }
		if (HX_FIELD_EQ(inName,"startCountdown") ) { return ::hx::Val( startCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"playingDathing") ) { return ::hx::Val( playingDathing ); }
		if (HX_FIELD_EQ(inName,"updateAccuracy") ) { return ::hx::Val( updateAccuracy_dyn() ); }
		if (HX_FIELD_EQ(inName,"mashViolations") ) { return ::hx::Val( mashViolations ); }
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { return ::hx::Val( trainFinishing ); }
		if (HX_FIELD_EQ(inName,"updateTrainPos") ) { return ::hx::Val( updateTrainPos_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"accuracyDefault") ) { return ::hx::Val( accuracyDefault ); }
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { return ::hx::Val( songPositionBar ); }
		if (HX_FIELD_EQ(inName,"grpNoteSplashes") ) { return ::hx::Val( grpNoteSplashes ); }
		if (HX_FIELD_EQ(inName,"executeModchart") ) { return ::hx::Val( executeModchart ); }
		if (HX_FIELD_EQ(inName,"currentLuaIndex") ) { return ::hx::Val( currentLuaIndex ); }
		if (HX_FIELD_EQ(inName,"findByTimeIndex") ) { return ::hx::Val( findByTimeIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"backgroundVideo") ) { return ::hx::Val( backgroundVideo_dyn() ); }
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { return ::hx::Val( fastCarCanDrive ); }
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { return ::hx::Val( lightningOffset ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"triggeredAlready") ) { return ::hx::Val( triggeredAlready ); }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { return ::hx::Val( startedCountdown ); }
		if (HX_FIELD_EQ(inName,"getSectionByTime") ) { return ::hx::Val( getSectionByTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"etternaModeScore") ) { return ::hx::Val( etternaModeScore ); }
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { return ::hx::Val( trainFrameTiming ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { return ::hx::Val( detailsPausedText ); }
		if (HX_FIELD_EQ(inName,"allowedToHeadbang") ) { return ::hx::Val( allowedToHeadbang ); }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { return ::hx::Val( previousFrameTime ); }
		if (HX_FIELD_EQ(inName,"pastScrollChanges") ) { return ::hx::Val( pastScrollChanges ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"appearStaticArrows") ) { return ::hx::Val( appearStaticArrows_dyn() ); }
		if (HX_FIELD_EQ(inName,"currentTimingShown") ) { return ::hx::Val( currentTimingShown ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"kadeEngineWatermark") ) { return ::hx::Val( kadeEngineWatermark ); }
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { return ::hx::Val( storyDifficultyText ); }
		if (HX_FIELD_EQ(inName,"lightningStrikeShit") ) { return ::hx::Val( lightningStrikeShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { return ::hx::Val( lightningStrikeBeat ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"totalNotesHitDefault") ) { return ::hx::Val( totalNotesHitDefault ); }
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"recalculateAllSectionTimes") ) { return ::hx::Val( recalculateAllSectionTimes_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { return ::hx::Val( lastReportedPlayheadPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"sm") ) { outValue = ( sm ); return true; }
		if (HX_FIELD_EQ(inName,"gf") ) { outValue = ( gf ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"rep") ) { outValue = ( rep ); return true; }
		if (HX_FIELD_EQ(inName,"dad") ) { outValue = ( dad ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { outValue = ( SONG ); return true; }
		if (HX_FIELD_EQ(inName,"bads") ) { outValue = ( bads ); return true; }
		if (HX_FIELD_EQ(inName,"isSM") ) { outValue = ( isSM ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shits") ) { outValue = ( shits ); return true; }
		if (HX_FIELD_EQ(inName,"goods") ) { outValue = ( goods ); return true; }
		if (HX_FIELD_EQ(inName,"sicks") ) { outValue = ( sicks ); return true; }
		if (HX_FIELD_EQ(inName,"Stage") ) { outValue = ( Stage ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"misses") ) { outValue = ( misses ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadRep") ) { outValue = ( loadRep ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		if (HX_FIELD_EQ(inName,"weekSong") ) { outValue = ( weekSong ); return true; }
		if (HX_FIELD_EQ(inName,"pathToSm") ) { outValue = ( pathToSm ); return true; }
		if (HX_FIELD_EQ(inName,"theFunne") ) { outValue = ( theFunne ); return true; }
		if (HX_FIELD_EQ(inName,"songRate") ) { outValue = ( songRate ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { outValue = ( storyWeek ); return true; }
		if (HX_FIELD_EQ(inName,"weekScore") ) { outValue = ( weekScore ); return true; }
		if (HX_FIELD_EQ(inName,"songPosBG") ) { outValue = ( songPosBG ); return true; }
		if (HX_FIELD_EQ(inName,"inResults") ) { outValue = ( inResults ); return true; }
		if (HX_FIELD_EQ(inName,"noteBools") ) { outValue = ( noteBools ); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { outValue = ( boyfriend ); return true; }
		if (HX_FIELD_EQ(inName,"cpuStrums") ) { outValue = ( cpuStrums ); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { outValue = ( startTime ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songPosBar") ) { outValue = ( songPosBar ); return true; }
		if (HX_FIELD_EQ(inName,"trainSound") ) { outValue = ( trainSound ); return true; }
		if (HX_FIELD_EQ(inName,"repPresses") ) { outValue = ( repPresses ); return true; }
		if (HX_FIELD_EQ(inName,"songOffset") ) { outValue = ( songOffset ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { outValue = ( isStoryMode ); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { outValue = ( daPixelZoom ); return true; }
		if (HX_FIELD_EQ(inName,"repReleases") ) { outValue = ( repReleases ); return true; }
		if (HX_FIELD_EQ(inName,"luaModchart") ) { outValue = ( luaModchart ); return true; }
		if (HX_FIELD_EQ(inName,"webmHandler") ) { outValue = ( webmHandler ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerStrums") ) { outValue = ( playerStrums ); return true; }
		if (HX_FIELD_EQ(inName,"campaignBads") ) { outValue = ( campaignBads ); return true; }
		if (HX_FIELD_EQ(inName,"stageTesting") ) { outValue = ( stageTesting ); return true; }
		if (HX_FIELD_EQ(inName,"highestCombo") ) { outValue = ( highestCombo ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { outValue = ( storyPlaylist ); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { outValue = ( prevCamFollow ); return true; }
		if (HX_FIELD_EQ(inName,"campaignSicks") ) { outValue = ( campaignSicks ); return true; }
		if (HX_FIELD_EQ(inName,"campaignGoods") ) { outValue = ( campaignGoods ); return true; }
		if (HX_FIELD_EQ(inName,"campaignShits") ) { outValue = ( campaignShits ); return true; }
		if (HX_FIELD_EQ(inName,"offsetTesting") ) { outValue = ( offsetTesting ); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { outValue = ( campaignScore ); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrently") ) { outValue = ( timeCurrently ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { outValue = ( strumLineNotes ); return true; }
		if (HX_FIELD_EQ(inName,"campaignMisses") ) { outValue = ( campaignMisses ); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrentlyR") ) { outValue = ( timeCurrentlyR ); return true; }
		if (HX_FIELD_EQ(inName,"songMultiplier") ) { outValue = ( songMultiplier ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { outValue = ( storyDifficulty ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ss") ) { ss=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fc") ) { fc=inValue.Cast< bool >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"nps") ) { nps=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { keys=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hits") ) { hits=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP1") ) { iconP1=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP2") ) { iconP2=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipTo") ) { skipTo=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camPos") ) { camPos=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxNPS") ) { maxNPS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upHold") ) { upHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"danced") ) { danced=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iconRPC") ) { iconRPC=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { gfSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"talking") ) { talking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mashing") ) { mashing=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"accuracy") ) { accuracy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camNotes") ) { camNotes=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isSMFile") ) { isSMFile=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"idleBeat") ) { idleBeat=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogue") ) { dialogue=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songName") ) { songName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { scoreTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"needSkip") ) { needSkip=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipText") ) { skipText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTime") ) { songTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugNum") ) { debugNum=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canPause") ) { canPause=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"downHold") ) { downHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftHold") ) { leftHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useVideo") ) { useVideo=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curLight") ) { curLight=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"originalX") ) { originalX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cannotDie") ) { cannotDie=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"altSuffix") ) { altSuffix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScore") ) { songScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"replayTxt") ) { replayTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"randomVar") ) { randomVar=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"saveNotes") ) { saveNotes=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"saveJudge") ) { saveJudge=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"replayAna") ) { replayAna=inValue.Cast<  ::Analysis >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dataColor") ) { dataColor=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeShown") ) { timeShown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightHold") ) { rightHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCars") ) { trainCars=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZooming") ) { camZooming=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"idleToBeat") ) { idleToBeat=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { wiggleShit=inValue.Cast<  ::WiggleEffect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipActive") ) { skipActive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { inCutscene=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dataSuffix") ) { dataSuffix=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTimer") ) { startTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"luaWiggles") ) { luaWiggles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"doAnything") ) { doAnything=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stopUpdate") ) { stopUpdate=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { currentBPM=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endingSong") ) { endingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetTest") ) { offsetTest=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"detailsText") ) { detailsText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { totalPlayed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { healthBarBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camSustains") ) { camSustains=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"funneEffect") ) { funneEffect=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { perfectMode=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songStarted") ) { songStarted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { updateFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"videoSprite") ) { videoSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainMoving") ) { trainMoving=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cleanedSong") ) { cleanedSong=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visibleNotes") ) { visibleNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"forcedToIdle") ) { forcedToIdle=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScoreDef") ) { songScoreDef=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botPlayState") ) { botPlayState=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"closestNotes") ) { closestNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousRate") ) { previousRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"removedVideo") ) { removedVideo=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleCombos") ) { visibleCombos=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { totalNotesHit=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notesHitArray") ) { notesHitArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentFrames") ) { currentFrames=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fuckingVolume") ) { fuckingVolume=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { trainCooldown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { startedMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { generatedMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowedToCheer") ) { allowedToCheer=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentSection") ) { currentSection=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"usedTimeTravel") ) { usedTimeTravel=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playingDathing") ) { playingDathing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mashViolations") ) { mashViolations=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { trainFinishing=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"accuracyDefault") ) { accuracyDefault=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { songPositionBar=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpNoteSplashes") ) { grpNoteSplashes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"executeModchart") ) { executeModchart=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentLuaIndex") ) { currentLuaIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { fastCarCanDrive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { lightningOffset=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"triggeredAlready") ) { triggeredAlready=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { startedCountdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"etternaModeScore") ) { etternaModeScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { trainFrameTiming=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { detailsPausedText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowedToHeadbang") ) { allowedToHeadbang=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { previousFrameTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pastScrollChanges") ) { pastScrollChanges=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentTimingShown") ) { currentTimingShown=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"kadeEngineWatermark") ) { kadeEngineWatermark=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { storyDifficultyText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { lightningStrikeBeat=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"totalNotesHitDefault") ) { totalNotesHitDefault=inValue.Cast< Float >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { lastReportedPlayheadPosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"sm") ) { sm=ioValue.Cast<  ::smTools::SMFile >(); return true; }
		if (HX_FIELD_EQ(inName,"gf") ) { gf=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"rep") ) { rep=ioValue.Cast<  ::Replay >(); return true; }
		if (HX_FIELD_EQ(inName,"dad") ) { dad=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"bads") ) { bads=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"isSM") ) { isSM=ioValue.Cast< bool >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shits") ) { shits=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"goods") ) { goods=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"sicks") ) { sicks=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"Stage") ) { Stage=ioValue.Cast<  ::Stage >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"misses") ) { misses=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadRep") ) { loadRep=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::PlayState >(); return true; }
		if (HX_FIELD_EQ(inName,"weekSong") ) { weekSong=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"pathToSm") ) { pathToSm=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"theFunne") ) { theFunne=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"songRate") ) { songRate=ioValue.Cast< Float >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { storyWeek=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"weekScore") ) { weekScore=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songPosBG") ) { songPosBG=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		if (HX_FIELD_EQ(inName,"inResults") ) { inResults=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"noteBools") ) { noteBools=ioValue.Cast< ::Array< bool > >(); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=ioValue.Cast<  ::Boyfriend >(); return true; }
		if (HX_FIELD_EQ(inName,"cpuStrums") ) { cpuStrums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songPosBar") ) { songPosBar=ioValue.Cast<  ::flixel::ui::FlxBar >(); return true; }
		if (HX_FIELD_EQ(inName,"trainSound") ) { trainSound=ioValue.Cast<  ::flixel::_hx_system::FlxSound >(); return true; }
		if (HX_FIELD_EQ(inName,"repPresses") ) { repPresses=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songOffset") ) { songOffset=ioValue.Cast< Float >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { isStoryMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { daPixelZoom=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"repReleases") ) { repReleases=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"luaModchart") ) { luaModchart=ioValue.Cast<  ::ModchartState >(); return true; }
		if (HX_FIELD_EQ(inName,"webmHandler") ) { webmHandler=ioValue.Cast<  ::WebmHandler >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignBads") ) { campaignBads=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"stageTesting") ) { stageTesting=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"highestCombo") ) { highestCombo=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { storyPlaylist=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { prevCamFollow=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignSicks") ) { campaignSicks=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignGoods") ) { campaignGoods=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignShits") ) { campaignShits=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"offsetTesting") ) { offsetTesting=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { campaignScore=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrently") ) { timeCurrently=ioValue.Cast< Float >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignMisses") ) { campaignMisses=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrentlyR") ) { timeCurrentlyR=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"songMultiplier") ) { songMultiplier=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { storyDifficulty=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("visibleCombos",77,ea,17,26));
	outFields->push(HX_("visibleNotes",6f,f6,4f,15));
	outFields->push(HX_("songLength",9b,3a,8c,fa));
	outFields->push(HX_("kadeEngineWatermark",ab,82,ba,66));
	outFields->push(HX_("storyDifficultyText",5d,4b,db,c2));
	outFields->push(HX_("iconRPC",ec,c8,10,d6));
	outFields->push(HX_("detailsText",8f,5e,84,21));
	outFields->push(HX_("detailsPausedText",dd,4f,70,44));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("originalX",e7,92,45,ea));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("camZooming",60,3b,bf,d6));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("gfSpeed",e8,9c,20,98));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("accuracy",39,06,c5,ff));
	outFields->push(HX_("accuracyDefault",88,23,d8,06));
	outFields->push(HX_("totalNotesHit",76,f4,57,a6));
	outFields->push(HX_("totalNotesHitDefault",eb,26,a4,bd));
	outFields->push(HX_("totalPlayed",37,de,ee,fd));
	outFields->push(HX_("ss",a0,64,00,00));
	outFields->push(HX_("healthBarBG",1c,d8,3b,f4));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("songPositionBar",d5,62,6e,a6));
	outFields->push(HX_("generatedMusic",96,8a,5d,71));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("iconP1",9a,bd,d6,45));
	outFields->push(HX_("iconP2",9b,bd,d6,45));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camSustains",9f,69,a2,15));
	outFields->push(HX_("camNotes",b2,c1,02,a8));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("cannotDie",fd,a9,4e,4f));
	outFields->push(HX_("isSMFile",a0,bf,e3,d7));
	outFields->push(HX_("notesHitArray",a7,0b,f3,bd));
	outFields->push(HX_("currentFrames",bf,30,e2,8f));
	outFields->push(HX_("idleToBeat",c5,ee,79,79));
	outFields->push(HX_("idleBeat",aa,ce,03,36));
	outFields->push(HX_("forcedToIdle",28,1b,86,c6));
	outFields->push(HX_("allowedToHeadbang",bb,a8,e9,48));
	outFields->push(HX_("allowedToCheer",ca,12,31,a1));
	outFields->push(HX_("dialogue",18,2d,94,a7));
	outFields->push(HX_("songName",c0,d0,d7,36));
	outFields->push(HX_("altSuffix",da,14,b5,b7));
	outFields->push(HX_("currentSection",ac,7a,6c,6b));
	outFields->push(HX_("fc",3d,59,00,00));
	outFields->push(HX_("wiggleShit",0b,07,40,33));
	outFields->push(HX_("talking",36,57,a8,16));
	outFields->push(HX_("songScore",3d,bb,53,a8));
	outFields->push(HX_("songScoreDef",88,1a,f9,d0));
	outFields->push(HX_("scoreTxt",3e,12,c4,0e));
	outFields->push(HX_("replayTxt",89,f1,6f,0a));
	outFields->push(HX_("needSkip",f5,99,f0,28));
	outFields->push(HX_("skipActive",a5,35,4a,7e));
	outFields->push(HX_("skipText",cc,ba,4e,c3));
	outFields->push(HX_("skipTo",da,3d,a7,dc));
	outFields->push(HX_("funneEffect",67,55,3f,6f));
	outFields->push(HX_("inCutscene",8f,21,01,56));
	outFields->push(HX_("usedTimeTravel",a4,7d,1d,70));
	outFields->push(HX_("camPos",c5,54,7c,b7));
	outFields->push(HX_("randomVar",a4,58,4f,a7));
	outFields->push(HX_("triggeredAlready",c1,04,84,a5));
	outFields->push(HX_("grpNoteSplashes",2c,f3,de,7b));
	outFields->push(HX_("botPlayState",76,4c,39,74));
	outFields->push(HX_("saveNotes",c4,e3,77,2e));
	outFields->push(HX_("saveJudge",1a,b7,c8,e4));
	outFields->push(HX_("replayAna",ed,7d,61,0a));
	outFields->push(HX_("executeModchart",31,4a,80,b8));
	outFields->push(HX_("dataSuffix",9b,a8,47,88));
	outFields->push(HX_("dataColor",d9,f2,4b,90));
	outFields->push(HX_("startTimer",03,98,4c,2c));
	outFields->push(HX_("perfectMode",10,4f,4c,f3));
	outFields->push(HX_("luaWiggles",90,11,ce,e3));
	outFields->push(HX_("previousFrameTime",a3,ef,a7,c2));
	outFields->push(HX_("lastReportedPlayheadPosition",86,66,7f,37));
	outFields->push(HX_("songTime",82,2a,d5,3a));
	outFields->push(HX_("keys",f4,e1,06,47));
	outFields->push(HX_("closestNotes",28,4f,02,c1));
	outFields->push(HX_("songStarted",ec,81,a7,ed));
	outFields->push(HX_("doAnything",2d,8c,83,68));
	outFields->push(HX_("previousRate",b7,22,46,f2));
	outFields->push(HX_("debugNum",b3,39,d8,90));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("startedCountdown",30,57,28,9b));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("nps",f1,d9,53,00));
	outFields->push(HX_("maxNPS",ad,a9,51,be));
	outFields->push(HX_("stopUpdate",ab,d7,b4,b0));
	outFields->push(HX_("removedVideo",bb,c0,72,00));
	outFields->push(HX_("currentBPM",26,68,25,c7));
	outFields->push(HX_("updateFrame",64,e1,1b,ec));
	outFields->push(HX_("pastScrollChanges",44,1c,82,6e));
	outFields->push(HX_("currentLuaIndex",93,2f,c9,10));
	outFields->push(HX_("endingSong",5c,73,d7,67));
	outFields->push(HX_("hits",c0,42,0e,45));
	outFields->push(HX_("offsetTest",85,51,11,49));
	outFields->push(HX_("timeShown",84,5d,18,31));
	outFields->push(HX_("currentTimingShown",2e,56,ba,1d));
	outFields->push(HX_("upHold",3a,25,8e,74));
	outFields->push(HX_("downHold",c1,c6,fa,79));
	outFields->push(HX_("rightHold",3b,1f,d9,af));
	outFields->push(HX_("leftHold",e6,0c,0e,4c));
	outFields->push(HX_("fuckingVolume",c5,2f,0e,74));
	outFields->push(HX_("useVideo",b4,76,67,fe));
	outFields->push(HX_("playingDathing",83,ed,1f,d5));
	outFields->push(HX_("videoSprite",e0,72,3d,3c));
	outFields->push(HX_("mashing",99,83,64,f9));
	outFields->push(HX_("mashViolations",77,15,e1,83));
	outFields->push(HX_("etternaModeScore",aa,02,79,42));
	outFields->push(HX_("fastCarCanDrive",d2,f1,13,ee));
	outFields->push(HX_("trainMoving",76,00,99,48));
	outFields->push(HX_("trainFrameTiming",af,67,10,1b));
	outFields->push(HX_("trainCars",c7,61,9c,4d));
	outFields->push(HX_("trainFinishing",87,15,8c,24));
	outFields->push(HX_("trainCooldown",93,a3,58,0c));
	outFields->push(HX_("startedMoving",af,76,97,fb));
	outFields->push(HX_("danced",d1,49,8f,1e));
	outFields->push(HX_("lightningStrikeBeat",72,e2,3d,b6));
	outFields->push(HX_("lightningOffset",3d,a8,e5,e6));
	outFields->push(HX_("cleanedSong",1d,82,51,e6));
	outFields->push(HX_("curLight",36,8b,aa,bc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,visibleCombos),HX_("visibleCombos",77,ea,17,26)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,visibleNotes),HX_("visibleNotes",6f,f6,4f,15)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songLength),HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,kadeEngineWatermark),HX_("kadeEngineWatermark",ab,82,ba,66)},
	{::hx::fsString,(int)offsetof(PlayState_obj,storyDifficultyText),HX_("storyDifficultyText",5d,4b,db,c2)},
	{::hx::fsString,(int)offsetof(PlayState_obj,iconRPC),HX_("iconRPC",ec,c8,10,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsText),HX_("detailsText",8f,5e,84,21)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsPausedText),HX_("detailsPausedText",dd,4f,70,44)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,originalX),HX_("originalX",e7,92,45,ea)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlayState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,camZooming),HX_("camZooming",60,3b,bf,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,gfSpeed),HX_("gfSpeed",e8,9c,20,98)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,accuracy),HX_("accuracy",39,06,c5,ff)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,accuracyDefault),HX_("accuracyDefault",88,23,d8,06)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHit),HX_("totalNotesHit",76,f4,57,a6)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHitDefault),HX_("totalNotesHitDefault",eb,26,a4,bd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,totalPlayed),HX_("totalPlayed",37,de,ee,fd)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,ss),HX_("ss",a0,64,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,healthBarBG),HX_("healthBarBG",1c,d8,3b,f4)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(PlayState_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songPositionBar),HX_("songPositionBar",d5,62,6e,a6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,generatedMusic),HX_("generatedMusic",96,8a,5d,71)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP1),HX_("iconP1",9a,bd,d6,45)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP2),HX_("iconP2",9b,bd,d6,45)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camSustains),HX_("camSustains",9f,69,a2,15)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camNotes),HX_("camNotes",b2,c1,02,a8)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,cannotDie),HX_("cannotDie",fd,a9,4e,4f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,isSMFile),HX_("isSMFile",a0,bf,e3,d7)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,notesHitArray),HX_("notesHitArray",a7,0b,f3,bd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentFrames),HX_("currentFrames",bf,30,e2,8f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,idleToBeat),HX_("idleToBeat",c5,ee,79,79)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,idleBeat),HX_("idleBeat",aa,ce,03,36)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,forcedToIdle),HX_("forcedToIdle",28,1b,86,c6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,allowedToHeadbang),HX_("allowedToHeadbang",bb,a8,e9,48)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,allowedToCheer),HX_("allowedToCheer",ca,12,31,a1)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dialogue),HX_("dialogue",18,2d,94,a7)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,songName),HX_("songName",c0,d0,d7,36)},
	{::hx::fsString,(int)offsetof(PlayState_obj,altSuffix),HX_("altSuffix",da,14,b5,b7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,currentSection),HX_("currentSection",ac,7a,6c,6b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,fc),HX_("fc",3d,59,00,00)},
	{::hx::fsObject /*  ::WiggleEffect */ ,(int)offsetof(PlayState_obj,wiggleShit),HX_("wiggleShit",0b,07,40,33)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,talking),HX_("talking",36,57,a8,16)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScore),HX_("songScore",3d,bb,53,a8)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScoreDef),HX_("songScoreDef",88,1a,f9,d0)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,scoreTxt),HX_("scoreTxt",3e,12,c4,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,replayTxt),HX_("replayTxt",89,f1,6f,0a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,needSkip),HX_("needSkip",f5,99,f0,28)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,skipActive),HX_("skipActive",a5,35,4a,7e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,skipText),HX_("skipText",cc,ba,4e,c3)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,skipTo),HX_("skipTo",da,3d,a7,dc)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,funneEffect),HX_("funneEffect",67,55,3f,6f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCutscene),HX_("inCutscene",8f,21,01,56)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,usedTimeTravel),HX_("usedTimeTravel",a4,7d,1d,70)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(PlayState_obj,camPos),HX_("camPos",c5,54,7c,b7)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,randomVar),HX_("randomVar",a4,58,4f,a7)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,triggeredAlready),HX_("triggeredAlready",c1,04,84,a5)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,grpNoteSplashes),HX_("grpNoteSplashes",2c,f3,de,7b)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,botPlayState),HX_("botPlayState",76,4c,39,74)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(PlayState_obj,saveNotes),HX_("saveNotes",c4,e3,77,2e)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,saveJudge),HX_("saveJudge",1a,b7,c8,e4)},
	{::hx::fsObject /*  ::Analysis */ ,(int)offsetof(PlayState_obj,replayAna),HX_("replayAna",ed,7d,61,0a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,executeModchart),HX_("executeModchart",31,4a,80,b8)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dataSuffix),HX_("dataSuffix",9b,a8,47,88)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dataColor),HX_("dataColor",d9,f2,4b,90)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,startTimer),HX_("startTimer",03,98,4c,2c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,perfectMode),HX_("perfectMode",10,4f,4c,f3)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,luaWiggles),HX_("luaWiggles",90,11,ce,e3)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,previousFrameTime),HX_("previousFrameTime",a3,ef,a7,c2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastReportedPlayheadPosition),HX_("lastReportedPlayheadPosition",86,66,7f,37)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songTime),HX_("songTime",82,2a,d5,3a)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(PlayState_obj,keys),HX_("keys",f4,e1,06,47)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,closestNotes),HX_("closestNotes",28,4f,02,c1)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,songStarted),HX_("songStarted",ec,81,a7,ed)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,doAnything),HX_("doAnything",2d,8c,83,68)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,previousRate),HX_("previousRate",b7,22,46,f2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,debugNum),HX_("debugNum",b3,39,d8,90)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedCountdown),HX_("startedCountdown",30,57,28,9b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canPause),HX_("canPause",c6,18,eb,2b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,nps),HX_("nps",f1,d9,53,00)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,maxNPS),HX_("maxNPS",ad,a9,51,be)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,stopUpdate),HX_("stopUpdate",ab,d7,b4,b0)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,removedVideo),HX_("removedVideo",bb,c0,72,00)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentBPM),HX_("currentBPM",26,68,25,c7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,updateFrame),HX_("updateFrame",64,e1,1b,ec)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,pastScrollChanges),HX_("pastScrollChanges",44,1c,82,6e)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentLuaIndex),HX_("currentLuaIndex",93,2f,c9,10)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,endingSong),HX_("endingSong",5c,73,d7,67)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,hits),HX_("hits",c0,42,0e,45)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,offsetTest),HX_("offsetTest",85,51,11,49)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,timeShown),HX_("timeShown",84,5d,18,31)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,currentTimingShown),HX_("currentTimingShown",2e,56,ba,1d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,upHold),HX_("upHold",3a,25,8e,74)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,downHold),HX_("downHold",c1,c6,fa,79)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,rightHold),HX_("rightHold",3b,1f,d9,af)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,leftHold),HX_("leftHold",e6,0c,0e,4c)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,fuckingVolume),HX_("fuckingVolume",c5,2f,0e,74)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,useVideo),HX_("useVideo",b4,76,67,fe)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,playingDathing),HX_("playingDathing",83,ed,1f,d5)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,videoSprite),HX_("videoSprite",e0,72,3d,3c)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,mashing),HX_("mashing",99,83,64,f9)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,mashViolations),HX_("mashViolations",77,15,e1,83)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,etternaModeScore),HX_("etternaModeScore",aa,02,79,42)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,fastCarCanDrive),HX_("fastCarCanDrive",d2,f1,13,ee)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,trainMoving),HX_("trainMoving",76,00,99,48)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,trainFrameTiming),HX_("trainFrameTiming",af,67,10,1b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,trainCars),HX_("trainCars",c7,61,9c,4d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,trainFinishing),HX_("trainFinishing",87,15,8c,24)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,trainCooldown),HX_("trainCooldown",93,a3,58,0c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedMoving),HX_("startedMoving",af,76,97,fb)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,danced),HX_("danced",d1,49,8f,1e)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lightningStrikeBeat),HX_("lightningStrikeBeat",72,e2,3d,b6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lightningOffset),HX_("lightningOffset",3d,a8,e5,e6)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,cleanedSong),HX_("cleanedSong",1d,82,51,e6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curLight),HX_("curLight",36,8b,aa,bc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::PlayState */ ,(void *) &PlayState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &PlayState_obj::SONG,HX_("SONG",d5,eb,18,37)},
	{::hx::fsBool,(void *) &PlayState_obj::isStoryMode,HX_("isStoryMode",ae,68,02,07)},
	{::hx::fsInt,(void *) &PlayState_obj::storyWeek,HX_("storyWeek",89,3e,16,2f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::storyPlaylist,HX_("storyPlaylist",67,a1,89,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::storyDifficulty,HX_("storyDifficulty",90,ca,a7,d0)},
	{::hx::fsInt,(void *) &PlayState_obj::weekSong,HX_("weekSong",e9,b9,87,33)},
	{::hx::fsInt,(void *) &PlayState_obj::weekScore,HX_("weekScore",be,2e,4d,db)},
	{::hx::fsInt,(void *) &PlayState_obj::shits,HX_("shits",b3,f8,22,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::bads,HX_("bads",0e,db,10,41)},
	{::hx::fsInt,(void *) &PlayState_obj::goods,HX_("goods",96,00,f9,97)},
	{::hx::fsInt,(void *) &PlayState_obj::sicks,HX_("sicks",f5,99,c7,7c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &PlayState_obj::songPosBG,HX_("songPosBG",44,6c,11,f6)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(void *) &PlayState_obj::songPosBar,HX_("songPosBar",54,66,2d,59)},
	{::hx::fsObject /*  ::Replay */ ,(void *) &PlayState_obj::rep,HX_("rep",5d,d9,56,00)},
	{::hx::fsBool,(void *) &PlayState_obj::loadRep,HX_("loadRep",d7,52,e1,08)},
	{::hx::fsBool,(void *) &PlayState_obj::inResults,HX_("inResults",91,9b,59,51)},
	{::hx::fsObject /* ::Array< bool > */ ,(void *) &PlayState_obj::noteBools,HX_("noteBools",b7,6b,85,f4)},
	{::hx::fsBool,(void *) &PlayState_obj::isSM,HX_("isSM",04,f3,be,45)},
	{::hx::fsObject /*  ::smTools::SMFile */ ,(void *) &PlayState_obj::sm,HX_("sm",9a,64,00,00)},
	{::hx::fsString,(void *) &PlayState_obj::pathToSm,HX_("pathToSm",3a,8b,a0,42)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::dad,HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::gf,HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::Boyfriend */ ,(void *) &PlayState_obj::boyfriend,HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &PlayState_obj::prevCamFollow,HX_("prevCamFollow",6d,99,a3,09)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::strumLineNotes,HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::playerStrums,HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::cpuStrums,HX_("cpuStrums",52,86,8a,e0)},
	{::hx::fsInt,(void *) &PlayState_obj::misses,HX_("misses",6a,62,54,56)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignMisses,HX_("campaignMisses",9a,a9,70,e4)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignSicks,HX_("campaignSicks",c5,48,c4,0b)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignGoods,HX_("campaignGoods",66,af,f5,26)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignBads,HX_("campaignBads",3e,f6,cb,d5)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignShits,HX_("campaignShits",83,a7,1f,0b)},
	{::hx::fsBool,(void *) &PlayState_obj::offsetTesting,HX_("offsetTesting",7d,bc,10,da)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(void *) &PlayState_obj::trainSound,HX_("trainSound",e7,b3,e5,da)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignScore,HX_("campaignScore",22,22,d6,07)},
	{::hx::fsFloat,(void *) &PlayState_obj::daPixelZoom,HX_("daPixelZoom",7c,81,6e,df)},
	{::hx::fsBool,(void *) &PlayState_obj::theFunne,HX_("theFunne",05,d0,55,cd)},
	{::hx::fsBool,(void *) &PlayState_obj::stageTesting,HX_("stageTesting",b2,74,2e,c5)},
	{::hx::fsObject /*  ::Stage */ ,(void *) &PlayState_obj::Stage,HX_("Stage",9e,da,38,17)},
	{::hx::fsInt,(void *) &PlayState_obj::repPresses,HX_("repPresses",d4,b6,b1,e7)},
	{::hx::fsInt,(void *) &PlayState_obj::repReleases,HX_("repReleases",49,43,a4,da)},
	{::hx::fsFloat,(void *) &PlayState_obj::timeCurrently,HX_("timeCurrently",39,e5,d2,31)},
	{::hx::fsFloat,(void *) &PlayState_obj::timeCurrentlyR,HX_("timeCurrentlyR",f9,ac,b5,66)},
	{::hx::fsFloat,(void *) &PlayState_obj::songOffset,HX_("songOffset",48,3d,c4,bb)},
	{::hx::fsInt,(void *) &PlayState_obj::highestCombo,HX_("highestCombo",8a,3b,03,1f)},
	{::hx::fsFloat,(void *) &PlayState_obj::startTime,HX_("startTime",8f,45,f0,05)},
	{::hx::fsObject /*  ::ModchartState */ ,(void *) &PlayState_obj::luaModchart,HX_("luaModchart",b4,54,b5,aa)},
	{::hx::fsFloat,(void *) &PlayState_obj::songMultiplier,HX_("songMultiplier",b6,0b,db,c3)},
	{::hx::fsFloat,(void *) &PlayState_obj::songRate,HX_("songRate",55,b1,7c,39)},
	{::hx::fsObject /*  ::WebmHandler */ ,(void *) &PlayState_obj::webmHandler,HX_("webmHandler",71,c7,d0,f2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("visibleCombos",77,ea,17,26),
	HX_("visibleNotes",6f,f6,4f,15),
	HX_("songLength",9b,3a,8c,fa),
	HX_("kadeEngineWatermark",ab,82,ba,66),
	HX_("storyDifficultyText",5d,4b,db,c2),
	HX_("iconRPC",ec,c8,10,d6),
	HX_("detailsText",8f,5e,84,21),
	HX_("detailsPausedText",dd,4f,70,44),
	HX_("vocals",5e,10,51,59),
	HX_("originalX",e7,92,45,ea),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSection",45,58,c1,68),
	HX_("camFollow",e0,6e,47,22),
	HX_("camZooming",60,3b,bf,d6),
	HX_("curSong",75,95,6d,b7),
	HX_("gfSpeed",e8,9c,20,98),
	HX_("health",9c,28,06,fd),
	HX_("combo",4e,28,5d,4a),
	HX_("accuracy",39,06,c5,ff),
	HX_("accuracyDefault",88,23,d8,06),
	HX_("totalNotesHit",76,f4,57,a6),
	HX_("totalNotesHitDefault",eb,26,a4,bd),
	HX_("totalPlayed",37,de,ee,fd),
	HX_("ss",a0,64,00,00),
	HX_("healthBarBG",1c,d8,3b,f4),
	HX_("healthBar",97,8a,92,42),
	HX_("songPositionBar",d5,62,6e,a6),
	HX_("generatedMusic",96,8a,5d,71),
	HX_("startingSong",b5,31,61,33),
	HX_("iconP1",9a,bd,d6,45),
	HX_("iconP2",9b,bd,d6,45),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camSustains",9f,69,a2,15),
	HX_("camNotes",b2,c1,02,a8),
	HX_("camGame",a1,47,50,cf),
	HX_("cannotDie",fd,a9,4e,4f),
	HX_("isSMFile",a0,bf,e3,d7),
	HX_("notesHitArray",a7,0b,f3,bd),
	HX_("currentFrames",bf,30,e2,8f),
	HX_("idleToBeat",c5,ee,79,79),
	HX_("idleBeat",aa,ce,03,36),
	HX_("forcedToIdle",28,1b,86,c6),
	HX_("allowedToHeadbang",bb,a8,e9,48),
	HX_("allowedToCheer",ca,12,31,a1),
	HX_("dialogue",18,2d,94,a7),
	HX_("songName",c0,d0,d7,36),
	HX_("altSuffix",da,14,b5,b7),
	HX_("currentSection",ac,7a,6c,6b),
	HX_("fc",3d,59,00,00),
	HX_("wiggleShit",0b,07,40,33),
	HX_("talking",36,57,a8,16),
	HX_("songScore",3d,bb,53,a8),
	HX_("songScoreDef",88,1a,f9,d0),
	HX_("scoreTxt",3e,12,c4,0e),
	HX_("replayTxt",89,f1,6f,0a),
	HX_("needSkip",f5,99,f0,28),
	HX_("skipActive",a5,35,4a,7e),
	HX_("skipText",cc,ba,4e,c3),
	HX_("skipTo",da,3d,a7,dc),
	HX_("funneEffect",67,55,3f,6f),
	HX_("inCutscene",8f,21,01,56),
	HX_("usedTimeTravel",a4,7d,1d,70),
	HX_("camPos",c5,54,7c,b7),
	HX_("randomVar",a4,58,4f,a7),
	HX_("triggeredAlready",c1,04,84,a5),
	HX_("grpNoteSplashes",2c,f3,de,7b),
	HX_("botPlayState",76,4c,39,74),
	HX_("saveNotes",c4,e3,77,2e),
	HX_("saveJudge",1a,b7,c8,e4),
	HX_("replayAna",ed,7d,61,0a),
	HX_("executeModchart",31,4a,80,b8),
	HX_("dataSuffix",9b,a8,47,88),
	HX_("dataColor",d9,f2,4b,90),
	HX_("addObject",c0,b3,63,cd),
	HX_("removeObject",23,1a,6d,84),
	HX_("create",fc,66,0f,7c),
	HX_("schoolIntro",58,5d,50,47),
	HX_("CarlDialogue",30,eb,a7,29),
	HX_("startTimer",03,98,4c,2c),
	HX_("perfectMode",10,4f,4c,f3),
	HX_("luaWiggles",90,11,ce,e3),
	HX_("startCountdown",ef,1f,f0,88),
	HX_("previousFrameTime",a3,ef,a7,c2),
	HX_("lastReportedPlayheadPosition",86,66,7f,37),
	HX_("songTime",82,2a,d5,3a),
	HX_("getKey",a9,c2,20,a3),
	HX_("keys",f4,e1,06,47),
	HX_("releaseInput",c3,5c,40,85),
	HX_("closestNotes",28,4f,02,c1),
	HX_("handleInput",42,6f,67,70),
	HX_("songStarted",ec,81,a7,ed),
	HX_("doAnything",2d,8c,83,68),
	HX_("previousRate",b7,22,46,f2),
	HX_("startSong",57,9d,4b,05),
	HX_("debugNum",b3,39,d8,90),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("sortByShit",35,ff,86,6e),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("appearStaticArrows",0d,4c,c7,a0),
	HX_("tweenCamIn",69,37,60,f8),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("paused",ae,40,84,ef),
	HX_("startedCountdown",30,57,28,9b),
	HX_("canPause",c6,18,eb,2b),
	HX_("nps",f1,d9,53,00),
	HX_("maxNPS",ad,a9,51,be),
	HX_("stopUpdate",ab,d7,b4,b0),
	HX_("removedVideo",bb,c0,72,00),
	HX_("currentBPM",26,68,25,c7),
	HX_("updateFrame",64,e1,1b,ec),
	HX_("pastScrollChanges",44,1c,82,6e),
	HX_("currentLuaIndex",93,2f,c9,10),
	HX_("update",09,86,05,87),
	HX_("getSectionByTime",d3,a2,dd,1e),
	HX_("recalculateAllSectionTimes",4f,b8,31,bc),
	HX_("endSong",50,dd,7c,2e),
	HX_("endingSong",5c,73,d7,67),
	HX_("hits",c0,42,0e,45),
	HX_("offsetTest",85,51,11,49),
	HX_("getRatesScore",f5,78,f9,44),
	HX_("timeShown",84,5d,18,31),
	HX_("currentTimingShown",2e,56,ba,1d),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("NearlyEquals",b4,8d,40,69),
	HX_("upHold",3a,25,8e,74),
	HX_("downHold",c1,c6,fa,79),
	HX_("rightHold",3b,1f,d9,af),
	HX_("leftHold",e6,0c,0e,4c),
	HX_("keyShit",ff,40,2c,a6),
	HX_("findByTime",9d,3a,9f,3b),
	HX_("findByTimeIndex",35,37,38,0e),
	HX_("fuckingVolume",c5,2f,0e,74),
	HX_("useVideo",b4,76,67,fe),
	HX_("playingDathing",83,ed,1f,d5),
	HX_("videoSprite",e0,72,3d,3c),
	HX_("focusOut",96,6f,5e,11),
	HX_("focusIn",dd,45,83,41),
	HX_("backgroundVideo",ad,f1,e6,f9),
	HX_("noteMiss",0e,78,8f,57),
	HX_("updateAccuracy",62,f9,ee,34),
	HX_("getKeyPresses",08,cf,e0,04),
	HX_("mashing",99,83,64,f9),
	HX_("mashViolations",77,15,e1,83),
	HX_("etternaModeScore",aa,02,79,42),
	HX_("noteCheck",76,e3,43,83),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("pressArrow",46,fb,e7,02),
	HX_("fastCarCanDrive",d2,f1,13,ee),
	HX_("resetFastCar",c9,38,fe,4f),
	HX_("fastCarDrive",12,97,d2,be),
	HX_("trainMoving",76,00,99,48),
	HX_("trainFrameTiming",af,67,10,1b),
	HX_("trainCars",c7,61,9c,4d),
	HX_("trainFinishing",87,15,8c,24),
	HX_("trainCooldown",93,a3,58,0c),
	HX_("trainStart",7a,9b,24,de),
	HX_("startedMoving",af,76,97,fb),
	HX_("updateTrainPos",d5,01,38,2b),
	HX_("trainReset",e7,70,e1,40),
	HX_("lightningStrikeShit",bc,d0,7c,c1),
	HX_("danced",d1,49,8f,1e),
	HX_("stepHit",67,ae,41,81),
	HX_("lightningStrikeBeat",72,e2,3d,b6),
	HX_("lightningOffset",3d,a8,e5,e6),
	HX_("beatHit",7d,ea,04,74),
	HX_("cleanedSong",1d,82,51,e6),
	HX_("poggers",e7,c2,a8,25),
	HX_("curLight",36,8b,aa,bc),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_MARK_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::weekSong,"weekSong");
	HX_MARK_MEMBER_NAME(PlayState_obj::weekScore,"weekScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::shits,"shits");
	HX_MARK_MEMBER_NAME(PlayState_obj::bads,"bads");
	HX_MARK_MEMBER_NAME(PlayState_obj::goods,"goods");
	HX_MARK_MEMBER_NAME(PlayState_obj::sicks,"sicks");
	HX_MARK_MEMBER_NAME(PlayState_obj::songPosBG,"songPosBG");
	HX_MARK_MEMBER_NAME(PlayState_obj::songPosBar,"songPosBar");
	HX_MARK_MEMBER_NAME(PlayState_obj::rep,"rep");
	HX_MARK_MEMBER_NAME(PlayState_obj::loadRep,"loadRep");
	HX_MARK_MEMBER_NAME(PlayState_obj::inResults,"inResults");
	HX_MARK_MEMBER_NAME(PlayState_obj::noteBools,"noteBools");
	HX_MARK_MEMBER_NAME(PlayState_obj::isSM,"isSM");
	HX_MARK_MEMBER_NAME(PlayState_obj::sm,"sm");
	HX_MARK_MEMBER_NAME(PlayState_obj::pathToSm,"pathToSm");
	HX_MARK_MEMBER_NAME(PlayState_obj::dad,"dad");
	HX_MARK_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_MARK_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_MARK_MEMBER_NAME(PlayState_obj::strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(PlayState_obj::playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(PlayState_obj::cpuStrums,"cpuStrums");
	HX_MARK_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignMisses,"campaignMisses");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignSicks,"campaignSicks");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignGoods,"campaignGoods");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignBads,"campaignBads");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignShits,"campaignShits");
	HX_MARK_MEMBER_NAME(PlayState_obj::offsetTesting,"offsetTesting");
	HX_MARK_MEMBER_NAME(PlayState_obj::trainSound,"trainSound");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_MARK_MEMBER_NAME(PlayState_obj::theFunne,"theFunne");
	HX_MARK_MEMBER_NAME(PlayState_obj::stageTesting,"stageTesting");
	HX_MARK_MEMBER_NAME(PlayState_obj::Stage,"Stage");
	HX_MARK_MEMBER_NAME(PlayState_obj::repPresses,"repPresses");
	HX_MARK_MEMBER_NAME(PlayState_obj::repReleases,"repReleases");
	HX_MARK_MEMBER_NAME(PlayState_obj::timeCurrently,"timeCurrently");
	HX_MARK_MEMBER_NAME(PlayState_obj::timeCurrentlyR,"timeCurrentlyR");
	HX_MARK_MEMBER_NAME(PlayState_obj::songOffset,"songOffset");
	HX_MARK_MEMBER_NAME(PlayState_obj::highestCombo,"highestCombo");
	HX_MARK_MEMBER_NAME(PlayState_obj::startTime,"startTime");
	HX_MARK_MEMBER_NAME(PlayState_obj::luaModchart,"luaModchart");
	HX_MARK_MEMBER_NAME(PlayState_obj::songMultiplier,"songMultiplier");
	HX_MARK_MEMBER_NAME(PlayState_obj::songRate,"songRate");
	HX_MARK_MEMBER_NAME(PlayState_obj::webmHandler,"webmHandler");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::weekSong,"weekSong");
	HX_VISIT_MEMBER_NAME(PlayState_obj::weekScore,"weekScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::shits,"shits");
	HX_VISIT_MEMBER_NAME(PlayState_obj::bads,"bads");
	HX_VISIT_MEMBER_NAME(PlayState_obj::goods,"goods");
	HX_VISIT_MEMBER_NAME(PlayState_obj::sicks,"sicks");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songPosBG,"songPosBG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songPosBar,"songPosBar");
	HX_VISIT_MEMBER_NAME(PlayState_obj::rep,"rep");
	HX_VISIT_MEMBER_NAME(PlayState_obj::loadRep,"loadRep");
	HX_VISIT_MEMBER_NAME(PlayState_obj::inResults,"inResults");
	HX_VISIT_MEMBER_NAME(PlayState_obj::noteBools,"noteBools");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isSM,"isSM");
	HX_VISIT_MEMBER_NAME(PlayState_obj::sm,"sm");
	HX_VISIT_MEMBER_NAME(PlayState_obj::pathToSm,"pathToSm");
	HX_VISIT_MEMBER_NAME(PlayState_obj::dad,"dad");
	HX_VISIT_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_VISIT_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(PlayState_obj::playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(PlayState_obj::cpuStrums,"cpuStrums");
	HX_VISIT_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignMisses,"campaignMisses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignSicks,"campaignSicks");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignGoods,"campaignGoods");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignBads,"campaignBads");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignShits,"campaignShits");
	HX_VISIT_MEMBER_NAME(PlayState_obj::offsetTesting,"offsetTesting");
	HX_VISIT_MEMBER_NAME(PlayState_obj::trainSound,"trainSound");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_VISIT_MEMBER_NAME(PlayState_obj::theFunne,"theFunne");
	HX_VISIT_MEMBER_NAME(PlayState_obj::stageTesting,"stageTesting");
	HX_VISIT_MEMBER_NAME(PlayState_obj::Stage,"Stage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::repPresses,"repPresses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::repReleases,"repReleases");
	HX_VISIT_MEMBER_NAME(PlayState_obj::timeCurrently,"timeCurrently");
	HX_VISIT_MEMBER_NAME(PlayState_obj::timeCurrentlyR,"timeCurrentlyR");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songOffset,"songOffset");
	HX_VISIT_MEMBER_NAME(PlayState_obj::highestCombo,"highestCombo");
	HX_VISIT_MEMBER_NAME(PlayState_obj::startTime,"startTime");
	HX_VISIT_MEMBER_NAME(PlayState_obj::luaModchart,"luaModchart");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songMultiplier,"songMultiplier");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songRate,"songRate");
	HX_VISIT_MEMBER_NAME(PlayState_obj::webmHandler,"webmHandler");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("SONG",d5,eb,18,37),
	HX_("isStoryMode",ae,68,02,07),
	HX_("storyWeek",89,3e,16,2f),
	HX_("storyPlaylist",67,a1,89,7c),
	HX_("storyDifficulty",90,ca,a7,d0),
	HX_("weekSong",e9,b9,87,33),
	HX_("weekScore",be,2e,4d,db),
	HX_("shits",b3,f8,22,7c),
	HX_("bads",0e,db,10,41),
	HX_("goods",96,00,f9,97),
	HX_("sicks",f5,99,c7,7c),
	HX_("songPosBG",44,6c,11,f6),
	HX_("songPosBar",54,66,2d,59),
	HX_("rep",5d,d9,56,00),
	HX_("loadRep",d7,52,e1,08),
	HX_("inResults",91,9b,59,51),
	HX_("noteBools",b7,6b,85,f4),
	HX_("isSM",04,f3,be,45),
	HX_("sm",9a,64,00,00),
	HX_("pathToSm",3a,8b,a0,42),
	HX_("dad",47,36,4c,00),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("prevCamFollow",6d,99,a3,09),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("cpuStrums",52,86,8a,e0),
	HX_("misses",6a,62,54,56),
	HX_("campaignMisses",9a,a9,70,e4),
	HX_("campaignSicks",c5,48,c4,0b),
	HX_("campaignGoods",66,af,f5,26),
	HX_("campaignBads",3e,f6,cb,d5),
	HX_("campaignShits",83,a7,1f,0b),
	HX_("offsetTesting",7d,bc,10,da),
	HX_("trainSound",e7,b3,e5,da),
	HX_("campaignScore",22,22,d6,07),
	HX_("daPixelZoom",7c,81,6e,df),
	HX_("theFunne",05,d0,55,cd),
	HX_("stageTesting",b2,74,2e,c5),
	HX_("Stage",9e,da,38,17),
	HX_("repPresses",d4,b6,b1,e7),
	HX_("repReleases",49,43,a4,da),
	HX_("timeCurrently",39,e5,d2,31),
	HX_("timeCurrentlyR",f9,ac,b5,66),
	HX_("songOffset",48,3d,c4,bb),
	HX_("highestCombo",8a,3b,03,1f),
	HX_("startTime",8f,45,f0,05),
	HX_("luaModchart",b4,54,b5,aa),
	HX_("songMultiplier",b6,0b,db,c3),
	HX_("songRate",55,b1,7c,39),
	HX_("webmHandler",71,c7,d0,f2),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_89_boot)
HXDLIN(  89)		instance = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_92_boot)
HXDLIN(  92)		isStoryMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_93_boot)
HXDLIN(  93)		storyWeek = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_94_boot)
HXDLIN(  94)		storyPlaylist = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_95_boot)
HXDLIN(  95)		storyDifficulty = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_96_boot)
HXDLIN(  96)		weekSong = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_97_boot)
HXDLIN(  97)		weekScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_98_boot)
HXDLIN(  98)		shits = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_99_boot)
HXDLIN(  99)		bads = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_100_boot)
HXDLIN( 100)		goods = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_101_boot)
HXDLIN( 101)		sicks = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_112_boot)
HXDLIN( 112)		loadRep = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_113_boot)
HXDLIN( 113)		inResults = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_115_boot)
HXDLIN( 115)		noteBools = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_234,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_130_boot)
HXDLIN( 130)		isSM = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_154_boot)
HXDLIN( 154)		strumLineNotes = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_155_boot)
HXDLIN( 155)		playerStrums = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_156_boot)
HXDLIN( 156)		cpuStrums = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_167_boot)
HXDLIN( 167)		misses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_168_boot)
HXDLIN( 168)		campaignMisses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_169_boot)
HXDLIN( 169)		campaignSicks = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_170_boot)
HXDLIN( 170)		campaignGoods = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_171_boot)
HXDLIN( 171)		campaignBads = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_172_boot)
HXDLIN( 172)		campaignShits = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_198_boot)
HXDLIN( 198)		offsetTesting = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_237_boot)
HXDLIN( 237)		campaignScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_239_boot)
HXDLIN( 239)		daPixelZoom = ((Float)6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_241_boot)
HXDLIN( 241)		theFunne = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_247_boot)
HXDLIN( 247)		stageTesting = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_254_boot)
HXDLIN( 254)		repPresses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_255_boot)
HXDLIN( 255)		repReleases = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_257_boot)
HXDLIN( 257)		timeCurrently = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_258_boot)
HXDLIN( 258)		timeCurrentlyR = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_264_boot)
HXDLIN( 264)		songOffset = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_276_boot)
HXDLIN( 276)		highestCombo = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_284_boot)
HXDLIN( 284)		startTime = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1279_boot)
HXDLIN(1279)		luaModchart = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1573_boot)
HXDLIN(1573)		songMultiplier = ((Float)1.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2159_boot)
HXDLIN(2159)		songRate = ((Float)1.5);
            	}
}

