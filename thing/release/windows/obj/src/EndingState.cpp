// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_EndingState
#include <EndingState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_ResultsScreen
#include <ResultsScreen.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_219ec88be50ebb27_8_new,"EndingState","new",0x7ae6027c,"EndingState.new","EndingState.hx",8,0xb3a2e074)
HX_LOCAL_STACK_FRAME(_hx_pos_219ec88be50ebb27_12_create,"EndingState","create",0x87ea6e60,"EndingState.create","EndingState.hx",12,0xb3a2e074)
HX_LOCAL_STACK_FRAME(_hx_pos_219ec88be50ebb27_21_update,"EndingState","update",0x92e08d6d,"EndingState.update","EndingState.hx",21,0xb3a2e074)
HX_LOCAL_STACK_FRAME(_hx_pos_219ec88be50ebb27_32_endIt,"EndingState","endIt",0x599221c2,"EndingState.endIt","EndingState.hx",32,0xb3a2e074)

void EndingState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_219ec88be50ebb27_8_new)
HXDLIN(   8)		super::__construct(MaxSize);
            	}

Dynamic EndingState_obj::__CreateEmpty() { return new EndingState_obj; }

void *EndingState_obj::_hx_vtable = 0;

Dynamic EndingState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EndingState_obj > _hx_result = new EndingState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool EndingState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x0f1f99ca) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0f1f99ca;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void EndingState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_219ec88be50ebb27_12_create)
HXLINE(  13)		this->super::create();
HXLINE(  14)		 ::flixel::FlxSprite end =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(  15)		end->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("congrats",53,63,7c,bb)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("carl",d8,1d,ba,41)),null(),null(),null(),null(),null());
HXLINE(  16)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.8),true,null(),null());
HXLINE(  17)		this->add(end);
            	}


void EndingState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_219ec88be50ebb27_21_update)
HXLINE(  22)		this->super::update(elapsed);
HXLINE(  24)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  24)		if (_this->keyManager->checkStatus(13,_this->status)) {
HXLINE(  26)			this->endIt(null());
            		}
            	}


void EndingState_obj::endIt( ::flixel::util::FlxTimer e){
            	HX_GC_STACKFRAME(&_hx_pos_219ec88be50ebb27_32_endIt)
HXDLIN(  32)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("scoreScreen",5e,6c,c3,13),::hx::paccDynamic)) )) {
HXLINE(  34)			this->openSubState( ::ResultsScreen_obj::__alloc( HX_CTX ,null()));
            		}
            		else {
HXLINE(  39)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  39)			::String library = null();
HXDLIN(  39)			_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE(  40)			::Conductor_obj::changeBPM(( (Float)(102) ),null());
HXLINE(  41)			{
HXLINE(  41)				 ::flixel::FlxState nextState =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  41)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  41)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EndingState_obj,endIt,(void))


::hx::ObjectPtr< EndingState_obj > EndingState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< EndingState_obj > __this = new EndingState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< EndingState_obj > EndingState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	EndingState_obj *__this = (EndingState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EndingState_obj), true, "EndingState"));
	*(void **)__this = EndingState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

EndingState_obj::EndingState_obj()
{
}

::hx::Val EndingState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"endIt") ) { return ::hx::Val( endIt_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *EndingState_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *EndingState_obj_sStaticStorageInfo = 0;
#endif

static ::String EndingState_obj_sMemberFields[] = {
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("endIt",a6,30,7a,70),
	::String(null()) };

::hx::Class EndingState_obj::__mClass;

void EndingState_obj::__register()
{
	EndingState_obj _hx_dummy;
	EndingState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("EndingState",8a,54,24,5c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EndingState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EndingState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EndingState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EndingState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

