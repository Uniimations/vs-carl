// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_DiffCalc
#include <DiffCalc.h>
#endif
#ifndef INCLUDED_DiffOverview
#include <DiffOverview.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_SongMetadata
#include <SongMetadata.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeAudioSource
#include <lime/_internal/backend/native/NativeAudioSource.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_media_openal_AL
#include <lime/media/openal/AL.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_smTools_SMFile
#include <smTools/SMFile.h>
#endif
#ifndef INCLUDED_smTools_SMHeader
#include <smTools/SMHeader.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_86166a84e8de7ace_30_new,"FreeplayState","new",0xc894eea3,"FreeplayState.new","FreeplayState.hx",30,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_72_create,"FreeplayState","create",0x931e5499,"FreeplayState.create","FreeplayState.hx",72,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_286_addSong,"FreeplayState","addSong",0x9e966259,"FreeplayState.addSong","FreeplayState.hx",286,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_290_addWeek,"FreeplayState","addWeek",0xa1339e78,"FreeplayState.addWeek","FreeplayState.hx",290,0x0d86f62d)
static const ::String _hx_array_data_b3f26131_10[] = {
	HX_("dad",47,36,4c,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_305_update,"FreeplayState","update",0x9e1473a6,"FreeplayState.update","FreeplayState.hx",305,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_424_loadSong,"FreeplayState","loadSong",0xe7d343f8,"FreeplayState.loadSong","FreeplayState.hx",424,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_475_changeDiff,"FreeplayState","changeDiff",0x302511b2,"FreeplayState.changeDiff","FreeplayState.hx",475,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_504_changeSelection,"FreeplayState","changeSelection",0xbe8c8f7f,"FreeplayState.changeSelection","FreeplayState.hx",504,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_61_loadDiff,"FreeplayState","loadDiff",0xdde47c28,"FreeplayState.loadDiff","FreeplayState.hx",61,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_32_boot,"FreeplayState","boot",0xb1d4e08f,"FreeplayState.boot","FreeplayState.hx",32,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_36_boot,"FreeplayState","boot",0xb1d4e08f,"FreeplayState.boot","FreeplayState.hx",36,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_38_boot,"FreeplayState","boot",0xb1d4e08f,"FreeplayState.boot","FreeplayState.hx",38,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_39_boot,"FreeplayState","boot",0xb1d4e08f,"FreeplayState.boot","FreeplayState.hx",39,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_55_boot,"FreeplayState","boot",0xb1d4e08f,"FreeplayState.boot","FreeplayState.hx",55,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_57_boot,"FreeplayState","boot",0xb1d4e08f,"FreeplayState.boot","FreeplayState.hx",57,0x0d86f62d)

void FreeplayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_30_new)
HXLINE(  53)		this->iconArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  51)		this->curPlaying = false;
HXLINE(  48)		this->combo = HX_("",00,00,00,00);
HXLINE(  47)		this->intendedScore = 0;
HXLINE(  46)		this->lerpScore = 0;
HXLINE(  30)		super::__construct(TransIn,TransOut);
            	}

Dynamic FreeplayState_obj::__CreateEmpty() { return new FreeplayState_obj; }

void *FreeplayState_obj::_hx_vtable = 0;

Dynamic FreeplayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FreeplayState_obj > _hx_result = new FreeplayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FreeplayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5f09868d) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x5f09868d;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void FreeplayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_86166a84e8de7ace_72_create)
HXLINE(  73)		this->clean();
HXLINE(  74)		::String library = null();
HXDLIN(  74)		::Array< ::String > initSonglist = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/freeplaySonglist",38,e4,80,5e) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  78)		::FreeplayState_obj::songData =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  79)		::FreeplayState_obj::songs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  81)		{
HXLINE(  81)			int _g = 0;
HXDLIN(  81)			int _g1 = initSonglist->length;
HXDLIN(  81)			while((_g < _g1)){
HXLINE(  81)				_g = (_g + 1);
HXDLIN(  81)				int i = (_g - 1);
HXLINE(  83)				::Array< ::String > data = initSonglist->__get(i).split(HX_(":",3a,00,00,00));
HXLINE(  84)				::String data1 = data->__get(0);
HXDLIN(  84)				 ::Dynamic meta = ::Std_obj::parseInt(data->__get(2));
HXDLIN(  84)				 ::SongMetadata meta1 =  ::SongMetadata_obj::__alloc( HX_CTX ,data1,( (int)(meta) ),data->__get(1),null(),null());
HXLINE(  85)				::String format = ::StringTools_obj::replace(meta1->songName,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE(  86)				::String _hx_switch_0 = format;
            				if (  (_hx_switch_0==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE(  87)					format = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN(  87)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("M.I.L.F",1e,4e,41,0d)) ){
HXLINE(  89)					format = HX_("Milf",f6,78,35,33);
HXDLIN(  89)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE(  88)					format = HX_("Philly",48,eb,f2,23);
HXDLIN(  88)					goto _hx_goto_2;
            				}
            				_hx_goto_2:;
HXLINE(  92)				::Array< ::Dynamic> diffs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  93)				::Array< ::String > diffsThatExist = ::Array_obj< ::String >::__new(0);
HXLINE(  97)				if (::sys::FileSystem_obj::exists(((((HX_("assets/data/",f9,10,73,a0) + format) + HX_("/",2f,00,00,00)) + format) + HX_("-hard.json",be,e0,5c,6e)))) {
HXLINE(  98)					diffsThatExist->push(HX_("Hard",0b,5b,e1,2f));
            				}
HXLINE(  99)				if (::sys::FileSystem_obj::exists(((((HX_("assets/data/",f9,10,73,a0) + format) + HX_("/",2f,00,00,00)) + format) + HX_("-easy.json",47,b0,9c,84)))) {
HXLINE( 100)					diffsThatExist->push(HX_("Easy",22,b8,e5,2d));
            				}
HXLINE( 101)				if (::sys::FileSystem_obj::exists(((((HX_("assets/data/",f9,10,73,a0) + format) + HX_("/",2f,00,00,00)) + format) + HX_(".json",56,f1,d6,c2)))) {
HXLINE( 102)					diffsThatExist->push(HX_("Normal",47,e6,fd,64));
            				}
HXLINE( 104)				if ((diffsThatExist->length == 0)) {
HXLINE( 106)					::lime::app::Application_obj::current->_hx___window->alert(HX_("No difficulties found for chart, skipping.",c8,d7,62,53),(meta1->songName + HX_(" Chart",9e,98,4c,a4)));
HXLINE( 107)					continue;
            				}
HXLINE( 112)				if (diffsThatExist->contains(HX_("Easy",22,b8,e5,2d))) {
HXLINE( 113)					::FreeplayState_obj::loadDiff(0,format,meta1->songName,diffs);
            				}
HXLINE( 114)				if (diffsThatExist->contains(HX_("Normal",47,e6,fd,64))) {
HXLINE( 115)					::FreeplayState_obj::loadDiff(1,format,meta1->songName,diffs);
            				}
HXLINE( 116)				if (diffsThatExist->contains(HX_("Hard",0b,5b,e1,2f))) {
HXLINE( 117)					::FreeplayState_obj::loadDiff(2,format,meta1->songName,diffs);
            				}
HXLINE( 119)				meta1->diffs = diffsThatExist;
HXLINE( 121)				bool _hx_tmp = (diffsThatExist->length != 3);
HXLINE( 124)				::FreeplayState_obj::songData->set(meta1->songName,diffs);
HXLINE( 126)				::FreeplayState_obj::songs->push(meta1);
            			}
            		}
HXLINE( 133)		{
HXLINE( 133)			int _g2 = 0;
HXDLIN( 133)			::Array< ::String > _g3 = ::sys::FileSystem_obj::readDirectory(HX_("assets/sm/",89,ef,2d,70));
HXDLIN( 133)			while((_g2 < _g3->length)){
HXLINE( 133)				::String i = _g3->__get(_g2);
HXDLIN( 133)				_g2 = (_g2 + 1);
HXLINE( 136)				if (::sys::FileSystem_obj::isDirectory((HX_("assets/sm/",89,ef,2d,70) + i))) {
HXLINE( 139)					int _g = 0;
HXDLIN( 139)					::Array< ::String > _g1 = ::sys::FileSystem_obj::readDirectory((HX_("assets/sm/",89,ef,2d,70) + i));
HXDLIN( 139)					while((_g < _g1->length)){
HXLINE( 139)						::String file = _g1->__get(_g);
HXDLIN( 139)						_g = (_g + 1);
HXLINE( 141)						if ((file.indexOf(HX_(" ",20,00,00,00),null()) != -1)) {
HXLINE( 142)							::sys::FileSystem_obj::rename((((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/",2f,00,00,00)) + file),(((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/",2f,00,00,00)) + ::StringTools_obj::replace(file,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00))));
            						}
HXLINE( 143)						bool _hx_tmp;
HXDLIN( 143)						if (::StringTools_obj::endsWith(file,HX_(".sm",48,4c,23,00))) {
HXLINE( 143)							_hx_tmp = !(::sys::FileSystem_obj::exists(((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/converted.json",73,2b,b3,66))));
            						}
            						else {
HXLINE( 143)							_hx_tmp = false;
            						}
HXDLIN( 143)						if (_hx_tmp) {
HXLINE( 146)							 ::smTools::SMFile file1 = ::smTools::SMFile_obj::loadFile((((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/",2f,00,00,00)) + ::StringTools_obj::replace(file,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00))));
HXLINE( 148)							::String data = file1->convertToFNF(((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/converted.json",73,2b,b3,66)));
HXLINE( 149)							 ::SongMetadata meta =  ::SongMetadata_obj::__alloc( HX_CTX ,file1->header->TITLE,0,HX_("sm",9a,64,00,00),file1,(HX_("assets/sm/",89,ef,2d,70) + i));
HXLINE( 150)							::FreeplayState_obj::songs->push(meta);
HXLINE( 151)							 ::Dynamic song = ::Song_obj::loadFromJsonRAW(data);
HXLINE( 152)							::FreeplayState_obj::songData->set(file1->header->TITLE,::Array_obj< ::Dynamic>::__new(3)->init(0,song)->init(1,song)->init(2,song));
            						}
            						else {
HXLINE( 154)							bool _hx_tmp;
HXDLIN( 154)							if (::sys::FileSystem_obj::exists(((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/converted.json",73,2b,b3,66)))) {
HXLINE( 154)								_hx_tmp = ::StringTools_obj::endsWith(file,HX_(".sm",48,4c,23,00));
            							}
            							else {
HXLINE( 154)								_hx_tmp = false;
            							}
HXDLIN( 154)							if (_hx_tmp) {
HXLINE( 157)								 ::smTools::SMFile file1 = ::smTools::SMFile_obj::loadFile((((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/",2f,00,00,00)) + ::StringTools_obj::replace(file,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00))));
HXLINE( 159)								::String data = file1->convertToFNF(((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/converted.json",73,2b,b3,66)));
HXLINE( 160)								 ::SongMetadata meta =  ::SongMetadata_obj::__alloc( HX_CTX ,file1->header->TITLE,0,HX_("sm",9a,64,00,00),file1,(HX_("assets/sm/",89,ef,2d,70) + i));
HXLINE( 161)								::FreeplayState_obj::songs->push(meta);
HXLINE( 162)								 ::Dynamic song = ::Song_obj::loadFromJsonRAW(::sys::io::File_obj::getContent(((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/converted.json",73,2b,b3,66))));
HXLINE( 164)								::FreeplayState_obj::songData->set(file1->header->TITLE,::Array_obj< ::Dynamic>::__new(3)->init(0,song)->init(1,song)->init(2,song));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 183)		::DiscordClient_obj::changePresence(HX_("In the Freeplay Menu",55,4e,8a,46),null(),null(),null(),null());
HXLINE( 186)		bool isDebug = false;
HXLINE( 192)		this->persistentUpdate = true;
HXLINE( 198)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 198)		::String library1 = null();
HXDLIN( 198)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menuBGBlue",de,35,e3,1e)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE( 199)		bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 200)		this->add(bg1);
HXLINE( 202)		this->grpSongs =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 203)		this->add(this->grpSongs);
HXLINE( 205)		{
HXLINE( 205)			int _g4 = 0;
HXDLIN( 205)			int _g5 = ::FreeplayState_obj::songs->length;
HXDLIN( 205)			while((_g4 < _g5)){
HXLINE( 205)				_g4 = (_g4 + 1);
HXDLIN( 205)				int i = (_g4 - 1);
HXLINE( 207)				 ::Alphabet songText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),::FreeplayState_obj::songs->__get(i).StaticCast<  ::SongMetadata >()->songName,true,false,true,null(),null());
HXLINE( 208)				songText->isMenuItem = true;
HXLINE( 209)				songText->targetY = ( (Float)(i) );
HXLINE( 210)				this->grpSongs->add(songText).StaticCast<  ::Alphabet >();
HXLINE( 212)				 ::HealthIcon icon =  ::HealthIcon_obj::__alloc( HX_CTX ,::FreeplayState_obj::songs->__get(i).StaticCast<  ::SongMetadata >()->songCharacter,null());
HXLINE( 213)				icon->sprTracker = songText;
HXLINE( 216)				this->iconArray->push(icon);
HXLINE( 217)				this->add(icon);
            			}
            		}
HXLINE( 224)		this->scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),5,0,HX_("",00,00,00,00),32,null());
HXLINE( 226)		this->scoreText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 229)		 ::flixel::FlxSprite scoreBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->scoreText->x - ( (Float)(6) )),0,null());
HXDLIN( 229)		 ::flixel::FlxSprite scoreBG1 = scoreBG->makeGraphic(::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.35))),135,-16777216,null(),null());
HXLINE( 230)		scoreBG1->set_alpha(((Float)0.6));
HXLINE( 231)		this->add(scoreBG1);
HXLINE( 233)		this->diffText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->scoreText->x,(this->scoreText->y + 36),0,HX_("",00,00,00,00),24,null());
HXLINE( 234)		this->diffText->set_font(this->scoreText->_font);
HXLINE( 235)		this->add(this->diffText);
HXLINE( 237)		this->diffCalcText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->scoreText->x,(this->scoreText->y + 66),0,HX_("",00,00,00,00),24,null());
HXLINE( 238)		this->diffCalcText->set_font(this->scoreText->_font);
HXLINE( 239)		this->add(this->diffCalcText);
HXLINE( 241)		Float _hx_tmp = this->scoreText->x;
HXDLIN( 241)		Float _hx_tmp1 = (this->scoreText->y + 94);
HXDLIN( 241)		this->previewtext =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,0,((HX_("Rate: ",a6,71,1b,f0) + ::flixel::math::FlxMath_obj::roundDecimal(::FreeplayState_obj::rate,2)) + HX_("x",78,00,00,00)),24,null());
HXLINE( 242)		this->previewtext->set_font(this->scoreText->_font);
HXLINE( 243)		this->add(this->previewtext);
HXLINE( 245)		this->comboText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->diffText->x + 100),this->diffText->y,0,HX_("",00,00,00,00),24,null());
HXLINE( 246)		this->comboText->set_font(this->diffText->_font);
HXLINE( 247)		this->add(this->comboText);
HXLINE( 249)		this->add(this->scoreText);
HXLINE( 251)		this->changeSelection(null());
HXLINE( 252)		this->changeDiff(null());
HXLINE( 256)		this->selector =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 258)		this->selector->set_size(40);
HXLINE( 259)		this->selector->set_text(HX_(">",3e,00,00,00));
HXLINE( 262)		 ::Alphabet swag =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(1) ),( (Float)(0) ),HX_("swag",8a,2a,5e,4c),null(),null(),null(),null(),null());
HXLINE( 281)		this->super::create();
            	}


void FreeplayState_obj::addSong(::String songName,int weekNum,::String songCharacter){
            	HX_GC_STACKFRAME(&_hx_pos_86166a84e8de7ace_286_addSong)
HXDLIN( 286)		::Array< ::Dynamic> _hx_tmp = ::FreeplayState_obj::songs;
HXDLIN( 286)		_hx_tmp->push( ::SongMetadata_obj::__alloc( HX_CTX ,songName,weekNum,songCharacter,null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FreeplayState_obj,addSong,(void))

void FreeplayState_obj::addWeek(::Array< ::String > songs,int weekNum,::Array< ::String > songCharacters){
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_290_addWeek)
HXLINE( 291)		if (::hx::IsNull( songCharacters )) {
HXLINE( 292)			songCharacters = ::Array_obj< ::String >::fromData( _hx_array_data_b3f26131_10,1);
            		}
HXLINE( 294)		int num = 0;
HXLINE( 295)		{
HXLINE( 295)			int _g = 0;
HXDLIN( 295)			while((_g < songs->length)){
HXLINE( 295)				::String song = songs->__get(_g);
HXDLIN( 295)				_g = (_g + 1);
HXLINE( 297)				this->addSong(song,weekNum,songCharacters->__get(num));
HXLINE( 299)				if ((songCharacters->length != 1)) {
HXLINE( 300)					num = (num + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FreeplayState_obj,addWeek,(void))

void FreeplayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_86166a84e8de7ace_305_update)
HXLINE( 306)		this->super::update(elapsed);
HXLINE( 308)		if ((::flixel::FlxG_obj::sound->music->_volume < ((Float)0.7))) {
HXLINE( 310)			 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 310)			_g->set_volume((_g->_volume + (((Float)0.5) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 313)		Float a = ( (Float)(this->lerpScore) );
HXDLIN( 313)		this->lerpScore = ::Math_obj::floor((a + (((Float)0.4) * (( (Float)(this->intendedScore) ) - a))));
HXLINE( 315)		if ((::Math_obj::abs(( (Float)((this->lerpScore - this->intendedScore)) )) <= 10)) {
HXLINE( 316)			this->lerpScore = this->intendedScore;
            		}
HXLINE( 318)		this->scoreText->set_text((HX_("PERSONAL BEST:",36,ce,e9,ee) + this->lerpScore));
HXLINE( 319)		this->comboText->set_text((this->combo + HX_("\n",0a,00,00,00)));
HXLINE( 321)		if ((::flixel::FlxG_obj::sound->music->_volume > ((Float)0.8))) {
HXLINE( 323)			 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 323)			_g->set_volume((_g->_volume - (((Float)0.5) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 326)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 326)		bool upP = _this->keyManager->checkStatus(38,_this->status);
HXLINE( 327)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 327)		bool downP = _this1->keyManager->checkStatus(40,_this1->status);
HXLINE( 328)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 328)		bool accepted = _this2->keyManager->checkStatus(13,_this2->status);
HXLINE( 329)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 329)		bool charting = _this3->keyManager->checkStatus(55,_this3->status);
HXLINE( 331)		 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
HXLINE( 333)		if (::hx::IsNotNull( gamepad )) {
HXLINE( 336)			 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this = gamepad->justPressed;
HXDLIN( 336)			int id = 11;
HXDLIN( 336)			 ::flixel::input::gamepad::FlxGamepad _this1 = _this->gamepad;
HXDLIN( 336)			int Status = _this->status;
HXDLIN( 336)			bool _hx_tmp;
HXDLIN( 336)			switch((int)(id)){
            				case (int)-2: {
HXLINE( 336)					_hx_tmp = _this1->anyButton(Status);
            				}
            				break;
            				case (int)-1: {
HXLINE( 336)					_hx_tmp = !(_this1->anyButton(Status));
            				}
            				break;
            				default:{
HXLINE( 336)					int RawID = _this1->mapping->getRawID(id);
HXDLIN( 336)					 ::flixel::input::gamepad::FlxGamepadButton button = _this1->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 336)					if (::hx::IsNotNull( button )) {
HXLINE( 336)						_hx_tmp = button->hasState(Status);
            					}
            					else {
HXLINE( 336)						_hx_tmp = false;
            					}
            				}
            			}
HXDLIN( 336)			if (_hx_tmp) {
HXLINE( 338)				this->changeSelection(-1);
            			}
HXLINE( 340)			 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this2 = gamepad->justPressed;
HXDLIN( 340)			int id1 = 12;
HXDLIN( 340)			 ::flixel::input::gamepad::FlxGamepad _this3 = _this2->gamepad;
HXDLIN( 340)			int Status1 = _this2->status;
HXDLIN( 340)			bool _hx_tmp1;
HXDLIN( 340)			switch((int)(id1)){
            				case (int)-2: {
HXLINE( 340)					_hx_tmp1 = _this3->anyButton(Status1);
            				}
            				break;
            				case (int)-1: {
HXLINE( 340)					_hx_tmp1 = !(_this3->anyButton(Status1));
            				}
            				break;
            				default:{
HXLINE( 340)					int RawID = _this3->mapping->getRawID(id1);
HXDLIN( 340)					 ::flixel::input::gamepad::FlxGamepadButton button = _this3->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 340)					if (::hx::IsNotNull( button )) {
HXLINE( 340)						_hx_tmp1 = button->hasState(Status1);
            					}
            					else {
HXLINE( 340)						_hx_tmp1 = false;
            					}
            				}
            			}
HXDLIN( 340)			if (_hx_tmp1) {
HXLINE( 342)				this->changeSelection(1);
            			}
HXLINE( 344)			 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this4 = gamepad->justPressed;
HXDLIN( 344)			int id2 = 13;
HXDLIN( 344)			 ::flixel::input::gamepad::FlxGamepad _this5 = _this4->gamepad;
HXDLIN( 344)			int Status2 = _this4->status;
HXDLIN( 344)			bool _hx_tmp2;
HXDLIN( 344)			switch((int)(id2)){
            				case (int)-2: {
HXLINE( 344)					_hx_tmp2 = _this5->anyButton(Status2);
            				}
            				break;
            				case (int)-1: {
HXLINE( 344)					_hx_tmp2 = !(_this5->anyButton(Status2));
            				}
            				break;
            				default:{
HXLINE( 344)					int RawID = _this5->mapping->getRawID(id2);
HXDLIN( 344)					 ::flixel::input::gamepad::FlxGamepadButton button = _this5->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 344)					if (::hx::IsNotNull( button )) {
HXLINE( 344)						_hx_tmp2 = button->hasState(Status2);
            					}
            					else {
HXLINE( 344)						_hx_tmp2 = false;
            					}
            				}
            			}
HXDLIN( 344)			if (_hx_tmp2) {
HXLINE( 346)				this->changeDiff(-1);
            			}
HXLINE( 348)			 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this6 = gamepad->justPressed;
HXDLIN( 348)			int id3 = 14;
HXDLIN( 348)			 ::flixel::input::gamepad::FlxGamepad _this7 = _this6->gamepad;
HXDLIN( 348)			int Status3 = _this6->status;
HXDLIN( 348)			bool _hx_tmp3;
HXDLIN( 348)			switch((int)(id3)){
            				case (int)-2: {
HXLINE( 348)					_hx_tmp3 = _this7->anyButton(Status3);
            				}
            				break;
            				case (int)-1: {
HXLINE( 348)					_hx_tmp3 = !(_this7->anyButton(Status3));
            				}
            				break;
            				default:{
HXLINE( 348)					int RawID = _this7->mapping->getRawID(id3);
HXDLIN( 348)					 ::flixel::input::gamepad::FlxGamepadButton button = _this7->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 348)					if (::hx::IsNotNull( button )) {
HXLINE( 348)						_hx_tmp3 = button->hasState(Status3);
            					}
            					else {
HXLINE( 348)						_hx_tmp3 = false;
            					}
            				}
            			}
HXDLIN( 348)			if (_hx_tmp3) {
HXLINE( 350)				this->changeDiff(1);
            			}
            		}
HXLINE( 357)		if (upP) {
HXLINE( 359)			this->changeSelection(-1);
            		}
HXLINE( 361)		if (downP) {
HXLINE( 363)			this->changeSelection(1);
            		}
HXLINE( 369)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 369)		if (_this4->keyManager->checkStatus(16,_this4->status)) {
HXLINE( 371)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 371)			if (_this->keyManager->checkStatus(37,_this->status)) {
HXLINE( 373)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::FreeplayState >();
HXDLIN( 373)				::FreeplayState_obj::rate = (::FreeplayState_obj::rate - ((Float)0.05));
HXLINE( 374)				 ::flixel::text::FlxText _hx_tmp1 = this->diffCalcText;
HXDLIN( 374)				_hx_tmp1->set_text((HX_("RATING: ",03,14,1b,b3) + ::DiffCalc_obj::CalculateDiff(::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty),null())));
            			}
HXLINE( 376)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 376)			if (_this1->keyManager->checkStatus(39,_this1->status)) {
HXLINE( 378)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::FreeplayState >();
HXDLIN( 378)				::FreeplayState_obj::rate = (::FreeplayState_obj::rate + ((Float)0.05));
HXLINE( 379)				 ::flixel::text::FlxText _hx_tmp1 = this->diffCalcText;
HXDLIN( 379)				_hx_tmp1->set_text((HX_("RATING: ",03,14,1b,b3) + ::DiffCalc_obj::CalculateDiff(::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty),null())));
            			}
HXLINE( 382)			if ((::FreeplayState_obj::rate > 3)) {
HXLINE( 384)				::FreeplayState_obj::rate = ( (Float)(3) );
HXLINE( 385)				 ::flixel::text::FlxText _hx_tmp = this->diffCalcText;
HXDLIN( 385)				_hx_tmp->set_text((HX_("RATING: ",03,14,1b,b3) + ::DiffCalc_obj::CalculateDiff(::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty),null())));
            			}
            			else {
HXLINE( 387)				if ((::FreeplayState_obj::rate < ((Float)0.5))) {
HXLINE( 389)					::FreeplayState_obj::rate = ((Float)0.5);
HXLINE( 390)					 ::flixel::text::FlxText _hx_tmp = this->diffCalcText;
HXDLIN( 390)					_hx_tmp->set_text((HX_("RATING: ",03,14,1b,b3) + ::DiffCalc_obj::CalculateDiff(::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty),null())));
            				}
            			}
HXLINE( 393)			 ::flixel::text::FlxText _hx_tmp = this->previewtext;
HXDLIN( 393)			_hx_tmp->set_text(((HX_("Rate: ",a6,71,1b,f0) + ::flixel::math::FlxMath_obj::roundDecimal(::FreeplayState_obj::rate,2)) + HX_("x",78,00,00,00)));
            		}
            		else {
HXLINE( 397)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 397)			if (_this->keyManager->checkStatus(37,_this->status)) {
HXLINE( 398)				this->changeDiff(-1);
            			}
HXLINE( 399)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 399)			if (_this1->keyManager->checkStatus(39,_this1->status)) {
HXLINE( 400)				this->changeDiff(1);
            			}
            		}
HXLINE( 407)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE( 408)			::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,::FreeplayState_obj::rate);
            		}
HXLINE( 412)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 414)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 414)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 414)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 417)		if (accepted) {
HXLINE( 418)			this->loadSong(null());
            		}
            		else {
HXLINE( 419)			if (charting) {
HXLINE( 420)				this->loadSong(true);
            			}
            		}
            	}


void FreeplayState_obj::loadSong(::hx::Null< bool >  __o_isCharting){
            		bool isCharting = __o_isCharting.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_86166a84e8de7ace_424_loadSong)
HXLINE( 426)		::String songFormat = ::StringTools_obj::replace(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songName,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE( 427)		::String _hx_switch_0 = songFormat;
            		if (  (_hx_switch_0==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE( 428)			songFormat = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN( 428)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==HX_("M.I.L.F",1e,4e,41,0d)) ){
HXLINE( 430)			songFormat = HX_("Milf",f6,78,35,33);
HXDLIN( 430)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE( 429)			songFormat = HX_("Philly",48,eb,f2,23);
HXDLIN( 429)			goto _hx_goto_12;
            		}
            		_hx_goto_12:;
HXLINE( 432)		 ::Dynamic hmm;
HXLINE( 433)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 435)			hmm = ::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty);
HXLINE( 436)			if (::hx::IsNull( hmm )) {
HXLINE( 437)				return;
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 441)				return;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 446)		::PlayState_obj::SONG = ::Song_obj::conversionChecks(hmm);
HXLINE( 447)		::PlayState_obj::isStoryMode = false;
HXLINE( 448)		::PlayState_obj::storyDifficulty = ::FreeplayState_obj::curDifficulty;
HXLINE( 449)		::PlayState_obj::storyWeek = ::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->week;
HXLINE( 452)		if ((::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songCharacter == HX_("sm",9a,64,00,00))) {
HXLINE( 454)			::PlayState_obj::isSM = true;
HXLINE( 455)			::PlayState_obj::sm = ::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->sm;
HXLINE( 456)			::PlayState_obj::pathToSm = ::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->path;
            		}
            		else {
HXLINE( 459)			::PlayState_obj::isSM = false;
            		}
HXLINE( 464)		::PlayState_obj::songMultiplier = ::FreeplayState_obj::rate;
HXLINE( 466)		if (isCharting) {
HXLINE( 467)			 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::ChartingState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN( 467)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 467)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		else {
HXLINE( 469)			 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN( 469)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 469)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 471)		this->clean();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FreeplayState_obj,loadSong,(void))

void FreeplayState_obj::changeDiff(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_475_changeDiff)
HXLINE( 476)		::Array< ::String > _hx_tmp = ::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->diffs;
HXDLIN( 476)		if (!(_hx_tmp->contains(::CoolUtil_obj::difficultyFromInt((::FreeplayState_obj::curDifficulty + change))))) {
HXLINE( 477)			return;
            		}
HXLINE( 479)		 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::FreeplayState >();
HXDLIN( 479)		::FreeplayState_obj::curDifficulty = (::FreeplayState_obj::curDifficulty + change);
HXLINE( 481)		if ((::FreeplayState_obj::curDifficulty < 0)) {
HXLINE( 482)			::FreeplayState_obj::curDifficulty = 2;
            		}
HXLINE( 483)		if ((::FreeplayState_obj::curDifficulty > 2)) {
HXLINE( 484)			::FreeplayState_obj::curDifficulty = 0;
            		}
HXLINE( 488)		::String songHighscore = ::StringTools_obj::replace(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songName,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE( 489)		::String _hx_switch_0 = songHighscore;
            		if (  (_hx_switch_0==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE( 490)			songHighscore = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN( 490)			goto _hx_goto_14;
            		}
            		if (  (_hx_switch_0==HX_("M.I.L.F",1e,4e,41,0d)) ){
HXLINE( 492)			songHighscore = HX_("Milf",f6,78,35,33);
HXDLIN( 492)			goto _hx_goto_14;
            		}
            		if (  (_hx_switch_0==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE( 491)			songHighscore = HX_("Philly",48,eb,f2,23);
HXDLIN( 491)			goto _hx_goto_14;
            		}
            		_hx_goto_14:;
HXLINE( 496)		this->intendedScore = ::Highscore_obj::getScore(songHighscore,::FreeplayState_obj::curDifficulty);
HXLINE( 497)		this->combo = ::Highscore_obj::getCombo(songHighscore,::FreeplayState_obj::curDifficulty);
HXLINE( 499)		 ::flixel::text::FlxText _hx_tmp2 = this->diffCalcText;
HXDLIN( 499)		_hx_tmp2->set_text((HX_("RATING: ",03,14,1b,b3) + ::DiffCalc_obj::CalculateDiff(::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty),null())));
HXLINE( 500)		 ::flixel::text::FlxText _hx_tmp3 = this->diffText;
HXDLIN( 500)		_hx_tmp3->set_text(::CoolUtil_obj::difficultyFromInt(::FreeplayState_obj::curDifficulty).toUpperCase());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FreeplayState_obj,changeDiff,(void))

void FreeplayState_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_86166a84e8de7ace_504_changeSelection)
HXLINE( 510)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 510)		_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 514)		 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::FreeplayState >();
HXDLIN( 514)		::FreeplayState_obj::curSelected = (::FreeplayState_obj::curSelected + change);
HXLINE( 516)		if ((::FreeplayState_obj::curSelected < 0)) {
HXLINE( 517)			::FreeplayState_obj::curSelected = (::FreeplayState_obj::songs->length - 1);
            		}
HXLINE( 518)		if ((::FreeplayState_obj::curSelected >= ::FreeplayState_obj::songs->length)) {
HXLINE( 519)			::FreeplayState_obj::curSelected = 0;
            		}
HXLINE( 521)		if ((::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->diffs->length != 3)) {
HXLINE( 523)			::String _hx_switch_0 = ::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->diffs->__get(0);
            			if (  (_hx_switch_0==HX_("Easy",22,b8,e5,2d)) ){
HXLINE( 526)				::FreeplayState_obj::curDifficulty = 0;
HXDLIN( 526)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("Hard",0b,5b,e1,2f)) ){
HXLINE( 530)				::FreeplayState_obj::curDifficulty = 2;
HXDLIN( 530)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("Normal",47,e6,fd,64)) ){
HXLINE( 528)				::FreeplayState_obj::curDifficulty = 1;
HXDLIN( 528)				goto _hx_goto_16;
            			}
            			_hx_goto_16:;
            		}
HXLINE( 538)		::String songHighscore = ::StringTools_obj::replace(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songName,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE( 539)		::String _hx_switch_1 = songHighscore;
            		if (  (_hx_switch_1==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE( 540)			songHighscore = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN( 540)			goto _hx_goto_17;
            		}
            		if (  (_hx_switch_1==HX_("M.I.L.F",1e,4e,41,0d)) ){
HXLINE( 542)			songHighscore = HX_("Milf",f6,78,35,33);
HXDLIN( 542)			goto _hx_goto_17;
            		}
            		if (  (_hx_switch_1==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE( 541)			songHighscore = HX_("Philly",48,eb,f2,23);
HXDLIN( 541)			goto _hx_goto_17;
            		}
            		_hx_goto_17:;
HXLINE( 546)		this->intendedScore = ::Highscore_obj::getScore(songHighscore,::FreeplayState_obj::curDifficulty);
HXLINE( 547)		this->combo = ::Highscore_obj::getCombo(songHighscore,::FreeplayState_obj::curDifficulty);
HXLINE( 551)		 ::flixel::text::FlxText _hx_tmp2 = this->diffCalcText;
HXDLIN( 551)		_hx_tmp2->set_text((HX_("RATING: ",03,14,1b,b3) + ::DiffCalc_obj::CalculateDiff(::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty),null())));
HXLINE( 552)		 ::flixel::text::FlxText _hx_tmp3 = this->diffText;
HXDLIN( 552)		_hx_tmp3->set_text(::CoolUtil_obj::difficultyFromInt(::FreeplayState_obj::curDifficulty).toUpperCase());
HXLINE( 555)		if ((::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songCharacter == HX_("sm",9a,64,00,00))) {
HXLINE( 557)			 ::SongMetadata data = ::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >();
HXLINE( 559)			 ::haxe::io::Bytes bytes = ::sys::io::File_obj::getBytes(((data->path + HX_("/",2f,00,00,00)) + data->sm->header->MUSIC));
HXLINE( 560)			 ::openfl::media::Sound sound =  ::openfl::media::Sound_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 561)			sound->loadCompressedDataFromByteArray(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytesData(bytes->b),bytes->length);
HXLINE( 562)			::flixel::FlxG_obj::sound->playMusic(sound,null(),null(),null());
            		}
            		else {
HXLINE( 565)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 565)			::String songLowercase = ::StringTools_obj::replace(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songName,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN( 565)			::String _hx_switch_2 = songLowercase;
            			if (  (_hx_switch_2==HX_("dad-battle",be,d5,66,07)) ){
HXLINE( 565)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN( 565)				goto _hx_goto_18;
            			}
            			if (  (_hx_switch_2==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE( 565)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN( 565)				goto _hx_goto_18;
            			}
            			if (  (_hx_switch_2==HX_("philly-nice",22,2e,26,44)) ){
HXLINE( 565)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN( 565)				goto _hx_goto_18;
            			}
            			_hx_goto_18:;
HXDLIN( 565)			_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),0,null(),null());
            		}
HXLINE( 568)		 ::Dynamic hmm;
HXLINE( 569)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 571)			hmm = ::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::SongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty);
HXLINE( 572)			if (::hx::IsNotNull( hmm )) {
HXLINE( 573)				::Conductor_obj::changeBPM(( (Float)(hmm->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 578)		if (::FreeplayState_obj::openedPreview) {
HXLINE( 580)			this->closeSubState();
HXLINE( 581)			this->openSubState( ::DiffOverview_obj::__alloc( HX_CTX ,null()));
            		}
HXLINE( 584)		int bullShit = 0;
HXLINE( 586)		{
HXLINE( 586)			int _g = 0;
HXDLIN( 586)			int _g1 = this->iconArray->length;
HXDLIN( 586)			while((_g < _g1)){
HXLINE( 586)				_g = (_g + 1);
HXDLIN( 586)				int i = (_g - 1);
HXLINE( 588)				this->iconArray->__get(i).StaticCast<  ::HealthIcon >()->set_alpha(((Float)0.6));
            			}
            		}
HXLINE( 591)		this->iconArray->__get(::FreeplayState_obj::curSelected).StaticCast<  ::HealthIcon >()->set_alpha(( (Float)(1) ));
HXLINE( 593)		{
HXLINE( 593)			int _g2 = 0;
HXDLIN( 593)			::Array< ::Dynamic> _g3 = this->grpSongs->members;
HXDLIN( 593)			while((_g2 < _g3->length)){
HXLINE( 593)				 ::Alphabet item = _g3->__get(_g2).StaticCast<  ::Alphabet >();
HXDLIN( 593)				_g2 = (_g2 + 1);
HXLINE( 595)				item->targetY = ( (Float)((bullShit - ::FreeplayState_obj::curSelected)) );
HXLINE( 596)				bullShit = (bullShit + 1);
HXLINE( 598)				item->set_alpha(((Float)0.6));
HXLINE( 601)				if ((item->targetY == 0)) {
HXLINE( 603)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FreeplayState_obj,changeSelection,(void))

::Array< ::Dynamic> FreeplayState_obj::songs;

Float FreeplayState_obj::rate;

int FreeplayState_obj::curSelected;

int FreeplayState_obj::curDifficulty;

bool FreeplayState_obj::openedPreview;

 ::haxe::ds::StringMap FreeplayState_obj::songData;

void FreeplayState_obj::loadDiff(int diff,::String format,::String name,::Array< ::Dynamic> array){
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_61_loadDiff)
HXDLIN(  61)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  63)			array->push(::Song_obj::loadFromJson(::Highscore_obj::formatSong(format,diff),name));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FreeplayState_obj,loadDiff,(void))


::hx::ObjectPtr< FreeplayState_obj > FreeplayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< FreeplayState_obj > __this = new FreeplayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< FreeplayState_obj > FreeplayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	FreeplayState_obj *__this = (FreeplayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FreeplayState_obj), true, "FreeplayState"));
	*(void **)__this = FreeplayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

FreeplayState_obj::FreeplayState_obj()
{
}

void FreeplayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FreeplayState);
	HX_MARK_MEMBER_NAME(selector,"selector");
	HX_MARK_MEMBER_NAME(scoreText,"scoreText");
	HX_MARK_MEMBER_NAME(comboText,"comboText");
	HX_MARK_MEMBER_NAME(diffText,"diffText");
	HX_MARK_MEMBER_NAME(diffCalcText,"diffCalcText");
	HX_MARK_MEMBER_NAME(previewtext,"previewtext");
	HX_MARK_MEMBER_NAME(lerpScore,"lerpScore");
	HX_MARK_MEMBER_NAME(intendedScore,"intendedScore");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(grpSongs,"grpSongs");
	HX_MARK_MEMBER_NAME(curPlaying,"curPlaying");
	HX_MARK_MEMBER_NAME(iconArray,"iconArray");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FreeplayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(selector,"selector");
	HX_VISIT_MEMBER_NAME(scoreText,"scoreText");
	HX_VISIT_MEMBER_NAME(comboText,"comboText");
	HX_VISIT_MEMBER_NAME(diffText,"diffText");
	HX_VISIT_MEMBER_NAME(diffCalcText,"diffCalcText");
	HX_VISIT_MEMBER_NAME(previewtext,"previewtext");
	HX_VISIT_MEMBER_NAME(lerpScore,"lerpScore");
	HX_VISIT_MEMBER_NAME(intendedScore,"intendedScore");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(grpSongs,"grpSongs");
	HX_VISIT_MEMBER_NAME(curPlaying,"curPlaying");
	HX_VISIT_MEMBER_NAME(iconArray,"iconArray");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FreeplayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addSong") ) { return ::hx::Val( addSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"addWeek") ) { return ::hx::Val( addWeek_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { return ::hx::Val( selector ); }
		if (HX_FIELD_EQ(inName,"diffText") ) { return ::hx::Val( diffText ); }
		if (HX_FIELD_EQ(inName,"grpSongs") ) { return ::hx::Val( grpSongs ); }
		if (HX_FIELD_EQ(inName,"loadSong") ) { return ::hx::Val( loadSong_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { return ::hx::Val( scoreText ); }
		if (HX_FIELD_EQ(inName,"comboText") ) { return ::hx::Val( comboText ); }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { return ::hx::Val( lerpScore ); }
		if (HX_FIELD_EQ(inName,"iconArray") ) { return ::hx::Val( iconArray ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curPlaying") ) { return ::hx::Val( curPlaying ); }
		if (HX_FIELD_EQ(inName,"changeDiff") ) { return ::hx::Val( changeDiff_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"previewtext") ) { return ::hx::Val( previewtext ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"diffCalcText") ) { return ::hx::Val( diffCalcText ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedScore") ) { return ::hx::Val( intendedScore ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FreeplayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rate") ) { outValue = ( rate ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { outValue = ( songs ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songData") ) { outValue = ( songData ); return true; }
		if (HX_FIELD_EQ(inName,"loadDiff") ) { outValue = loadDiff_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { outValue = ( curDifficulty ); return true; }
		if (HX_FIELD_EQ(inName,"openedPreview") ) { outValue = ( openedPreview ); return true; }
	}
	return false;
}

::hx::Val FreeplayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { selector=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diffText") ) { diffText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpSongs") ) { grpSongs=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboText") ) { comboText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { lerpScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconArray") ) { iconArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curPlaying") ) { curPlaying=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"previewtext") ) { previewtext=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"diffCalcText") ) { diffCalcText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedScore") ) { intendedScore=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FreeplayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rate") ) { rate=ioValue.Cast< Float >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { songs=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songData") ) { songData=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { curDifficulty=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"openedPreview") ) { openedPreview=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void FreeplayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("selector",1f,33,6d,b1));
	outFields->push(HX_("scoreText",1f,7d,bd,dc));
	outFields->push(HX_("comboText",1b,60,25,65));
	outFields->push(HX_("diffText",52,3b,1b,21));
	outFields->push(HX_("diffCalcText",07,a5,bb,54));
	outFields->push(HX_("previewtext",b5,50,f9,da));
	outFields->push(HX_("lerpScore",5b,81,4d,e7));
	outFields->push(HX_("intendedScore",a7,fd,7c,89));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("grpSongs",d9,dc,c7,63));
	outFields->push(HX_("curPlaying",ce,61,01,95));
	outFields->push(HX_("iconArray",60,3f,53,5f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FreeplayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,selector),HX_("selector",1f,33,6d,b1)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,scoreText),HX_("scoreText",1f,7d,bd,dc)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,comboText),HX_("comboText",1b,60,25,65)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,diffText),HX_("diffText",52,3b,1b,21)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,diffCalcText),HX_("diffCalcText",07,a5,bb,54)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,previewtext),HX_("previewtext",b5,50,f9,da)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,lerpScore),HX_("lerpScore",5b,81,4d,e7)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,intendedScore),HX_("intendedScore",a7,fd,7c,89)},
	{::hx::fsString,(int)offsetof(FreeplayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(FreeplayState_obj,grpSongs),HX_("grpSongs",d9,dc,c7,63)},
	{::hx::fsBool,(int)offsetof(FreeplayState_obj,curPlaying),HX_("curPlaying",ce,61,01,95)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FreeplayState_obj,iconArray),HX_("iconArray",60,3f,53,5f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FreeplayState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &FreeplayState_obj::songs,HX_("songs",fe,36,c7,80)},
	{::hx::fsFloat,(void *) &FreeplayState_obj::rate,HX_("rate",e0,52,a4,4b)},
	{::hx::fsInt,(void *) &FreeplayState_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsInt,(void *) &FreeplayState_obj::curDifficulty,HX_("curDifficulty",db,b7,38,a7)},
	{::hx::fsBool,(void *) &FreeplayState_obj::openedPreview,HX_("openedPreview",5f,3c,15,14)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &FreeplayState_obj::songData,HX_("songData",9f,b4,3b,30)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FreeplayState_obj_sMemberFields[] = {
	HX_("selector",1f,33,6d,b1),
	HX_("scoreText",1f,7d,bd,dc),
	HX_("comboText",1b,60,25,65),
	HX_("diffText",52,3b,1b,21),
	HX_("diffCalcText",07,a5,bb,54),
	HX_("previewtext",b5,50,f9,da),
	HX_("lerpScore",5b,81,4d,e7),
	HX_("intendedScore",a7,fd,7c,89),
	HX_("combo",4e,28,5d,4a),
	HX_("grpSongs",d9,dc,c7,63),
	HX_("curPlaying",ce,61,01,95),
	HX_("iconArray",60,3f,53,5f),
	HX_("create",fc,66,0f,7c),
	HX_("addSong",96,66,95,88),
	HX_("addWeek",b5,a2,32,8b),
	HX_("update",09,86,05,87),
	HX_("loadSong",1b,f5,f7,bc),
	HX_("changeDiff",95,91,b2,1c),
	HX_("changeSelection",bc,98,b5,48),
	::String(null()) };

static void FreeplayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FreeplayState_obj::songs,"songs");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::rate,"rate");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::curDifficulty,"curDifficulty");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::openedPreview,"openedPreview");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::songData,"songData");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FreeplayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::songs,"songs");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::rate,"rate");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::curDifficulty,"curDifficulty");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::openedPreview,"openedPreview");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::songData,"songData");
};

#endif

::hx::Class FreeplayState_obj::__mClass;

static ::String FreeplayState_obj_sStaticFields[] = {
	HX_("songs",fe,36,c7,80),
	HX_("rate",e0,52,a4,4b),
	HX_("curSelected",fb,eb,ab,32),
	HX_("curDifficulty",db,b7,38,a7),
	HX_("openedPreview",5f,3c,15,14),
	HX_("songData",9f,b4,3b,30),
	HX_("loadDiff",4b,2d,09,b3),
	::String(null())
};

void FreeplayState_obj::__register()
{
	FreeplayState_obj _hx_dummy;
	FreeplayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("FreeplayState",31,61,f2,b3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FreeplayState_obj::__GetStatic;
	__mClass->mSetStaticField = &FreeplayState_obj::__SetStatic;
	__mClass->mMarkFunc = FreeplayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FreeplayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FreeplayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FreeplayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FreeplayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FreeplayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FreeplayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FreeplayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_32_boot)
HXDLIN(  32)		songs = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_36_boot)
HXDLIN(  36)		rate = ((Float)1.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_38_boot)
HXDLIN(  38)		curSelected = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_39_boot)
HXDLIN(  39)		curDifficulty = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_55_boot)
HXDLIN(  55)		openedPreview = false;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_86166a84e8de7ace_57_boot)
HXDLIN(  57)		songData =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

