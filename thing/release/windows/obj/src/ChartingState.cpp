// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ChartingBox
#include <ChartingBox.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_Event
#include <Event.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_HelperFunctions
#include <HelperFunctions.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_SectionRender
#include <SectionRender.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TimingStruct
#include <TimingStruct.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeAudioSource
#include <lime/_internal/backend/native/NativeAudioSource.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_media_openal_AL
#include <lime/media/openal/AL.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_smTools_SMFile
#include <smTools/SMFile.h>
#endif
#ifndef INCLUDED_smTools_SMHeader
#include <smTools/SMHeader.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c8186eee1bd9a607_54_new,"ChartingState","new",0x5e894bff,"ChartingState.new","ChartingState.hx",54,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_145_create,"ChartingState","create",0xe351b8bd,"ChartingState.create","ChartingState.hx",145,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_471_regenerateLines,"ChartingState","regenerateLines",0x6a7da516,"ChartingState.regenerateLines","ChartingState.hx",471,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_530_addGrid,"ChartingState","addGrid",0x736e50a6,"ChartingState.addGrid","ChartingState.hx",530,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_573_containsName,"ChartingState","containsName",0x8c788c8b,"ChartingState.containsName","ChartingState.hx",573,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_609_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",609,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_683_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",683,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_762_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",762,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_845_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",845,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_902_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",902,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_921_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",921,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_926_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",926,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_930_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",930,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_589_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",589,0xd9647851)
static const ::String _hx_array_data_9bdde08d_32[] = {
	HX_("BPM Change",d1,e8,85,d1),HX_("Scroll Speed Change",fc,2c,18,61),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_977_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",977,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_983_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",983,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_997_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",997,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_970_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",970,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1018_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1018,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1024_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1024,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1029_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1029,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1034_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1034,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1039_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1039,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1095_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1095,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1105_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1105,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1113_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1113,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1121_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1121,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1129_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1129,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1137_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1137,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1009_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1009,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1211_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1211,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1217_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1217,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1251_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1251,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1288_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1288,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1299_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1299,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1201_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1201,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1341_goToSection,"ChartingState","goToSection",0x859ef101,"ChartingState.goToSection","ChartingState.hx",1341,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1377_addNoteUI,"ChartingState","addNoteUI",0x01b274a6,"ChartingState.addNoteUI","ChartingState.hx",1377,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1363_addNoteUI,"ChartingState","addNoteUI",0x01b274a6,"ChartingState.addNoteUI","ChartingState.hx",1363,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1420_pasteNotesFromArray,"ChartingState","pasteNotesFromArray",0x6ce427a0,"ChartingState.pasteNotesFromArray","ChartingState.hx",1420,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1527_loadSong,"ChartingState","loadSong",0x36c2f91c,"ChartingState.loadSong","ChartingState.hx",1527,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1474_loadSong,"ChartingState","loadSong",0x36c2f91c,"ChartingState.loadSong","ChartingState.hx",1474,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1536_generateUI,"ChartingState","generateUI",0x13f5670a,"ChartingState.generateUI","ChartingState.hx",1536,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1556_getEvent,"ChartingState","getEvent",0x4f66dba5,"ChartingState.getEvent","ChartingState.hx",1556,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1690_poggers,"ChartingState","poggers",0x186dfa06,"ChartingState.poggers","ChartingState.hx",1690,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1759_stepStartTime,"ChartingState","stepStartTime",0xba6fcd02,"ChartingState.stepStartTime","ChartingState.hx",1759,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1763_sectionStartTime,"ChartingState","sectionStartTime",0x9b4027eb,"ChartingState.sectionStartTime","ChartingState.hx",1763,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1791_resizeEverything,"ChartingState","resizeEverything",0xa26a0e88,"ChartingState.resizeEverything","ChartingState.hx",1791,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1813_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",1813,0xd9647851)
static const bool _hx_array_data_9bdde08d_124[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2338_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",2338,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2448_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",2448,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2697_changeNoteSustain,"ChartingState","changeNoteSustain",0x9b3f5f20,"ChartingState.changeNoteSustain","ChartingState.hx",2697,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2724_resetSection,"ChartingState","resetSection",0xb8b9e457,"ChartingState.resetSection","ChartingState.hx",2724,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2744_changeSection,"ChartingState","changeSection",0xb8ce82b4,"ChartingState.changeSection","ChartingState.hx",2744,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2779_copySection,"ChartingState","copySection",0xd085354f,"ChartingState.copySection","ChartingState.hx",2779,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2798_updateSectionUI,"ChartingState","updateSectionUI",0x006c124f,"ChartingState.updateSectionUI","ChartingState.hx",2798,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2823_updateHeads,"ChartingState","updateHeads",0x26e9ef29,"ChartingState.updateHeads","ChartingState.hx",2823,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2816_updateHeads,"ChartingState","updateHeads",0x26e9ef29,"ChartingState.updateHeads","ChartingState.hx",2816,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2860_updateNoteUI,"ChartingState","updateNoteUI",0x1a7d0230,"ChartingState.updateNoteUI","ChartingState.hx",2860,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2874_updateGrid,"ChartingState","updateGrid",0xc2b587b0,"ChartingState.updateGrid","ChartingState.hx",2874,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2943_addSection,"ChartingState","addSection",0x8af6f805,"ChartingState.addSection","ChartingState.hx",2943,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2977_selectNote,"ChartingState","selectNote",0x7d3a534f,"ChartingState.selectNote","ChartingState.hx",2977,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3021_deleteNote,"ChartingState","deleteNote",0x61ebbbfe,"ChartingState.deleteNote","ChartingState.hx",3021,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3065_clearSection,"ChartingState","clearSection",0x225a5059,"ChartingState.clearSection","ChartingState.hx",3065,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3072_clearSong,"ChartingState","clearSong",0xd7f188e1,"ChartingState.clearSong","ChartingState.hx",3072,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3082_newSection,"ChartingState","newSection",0x606eefa6,"ChartingState.newSection","ChartingState.hx",3082,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3125_recalculateAllSectionTimes,"ChartingState","recalculateAllSectionTimes",0xbe1ad090,"ChartingState.recalculateAllSectionTimes","ChartingState.hx",3125,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3149_shiftNotes,"ChartingState","shiftNotes",0x74b78ea0,"ChartingState.shiftNotes","ChartingState.hx",3149,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3199_getSectionByTime,"ChartingState","getSectionByTime",0x743e0fd4,"ChartingState.getSectionByTime","ChartingState.hx",3199,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3220_getNoteByTime,"ChartingState","getNoteByTime",0x06f3c7ab,"ChartingState.getNoteByTime","ChartingState.hx",3220,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3233_addNote,"ChartingState","addNote",0x780c91d2,"ChartingState.addNote","ChartingState.hx",3233,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3329_getStrumTime,"ChartingState","getStrumTime",0xec7b6301,"ChartingState.getStrumTime","ChartingState.hx",3329,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3334_getYfromStrum,"ChartingState","getYfromStrum",0x7268247b,"ChartingState.getYfromStrum","ChartingState.hx",3334,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3364_loadLevel,"ChartingState","loadLevel",0xa572de5d,"ChartingState.loadLevel","ChartingState.hx",3364,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3368_getNotes,"ChartingState","getNotes",0x796cefcc,"ChartingState.getNotes","ChartingState.hx",3368,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3380_loadJson,"ChartingState","loadJson",0x30d3176f,"ChartingState.loadJson","ChartingState.hx",3380,0xd9647851)
static const ::String _hx_array_data_9bdde08d_184[] = {
	HX_("-easy",af,a6,14,2c),HX_("",00,00,00,00),HX_("-hard",98,49,10,2e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3414_loadAutosave,"ChartingState","loadAutosave",0xe706d2f3,"ChartingState.loadAutosave","ChartingState.hx",3414,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3443_autosaveSong,"ChartingState","autosaveSong",0x50afbca2,"ChartingState.autosaveSong","ChartingState.hx",3443,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3451_saveLevel,"ChartingState","saveLevel",0x18e899e6,"ChartingState.saveLevel","ChartingState.hx",3451,0xd9647851)
static const ::String _hx_array_data_9bdde08d_193[] = {
	HX_("-easy",af,a6,14,2c),HX_("",00,00,00,00),HX_("-hard",98,49,10,2e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3470_onSaveComplete,"ChartingState","onSaveComplete",0x9fbb2796,"ChartingState.onSaveComplete","ChartingState.hx",3470,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3482_onSaveCancel,"ChartingState","onSaveCancel",0xc234b317,"ChartingState.onSaveCancel","ChartingState.hx",3482,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3493_onSaveError,"ChartingState","onSaveError",0x40b268cb,"ChartingState.onSaveError","ChartingState.hx",3493,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_69_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",69,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_70_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",70,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_83_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",83,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_142_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",142,0xd9647851)

void ChartingState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_54_new)
HXLINE(3360)		this->daSpacing = ((Float)0.3);
HXLINE(3230)		this->curSelectedNoteObject = null();
HXLINE(1810)		this->lastAction = HX_("",00,00,00,00);
HXLINE(1808)		this->selectInitialY = ((Float)0);
HXLINE(1807)		this->selectInitialX = ((Float)0);
HXLINE(1805)		this->deletedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1804)		this->pastedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1803)		this->copiedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1800)		this->waitingForRelease = false;
HXLINE(1796)		this->snapSelection = 3;
HXLINE(1794)		this->shownNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1786)		this->lastUpdatedSection = null();
HXLINE(1785)		this->updateFrame = 0;
HXLINE(1783)		this->lastBPM = ((Float)0);
HXLINE(1782)		this->currentBPM = ((Float)0);
HXLINE(1780)		this->changeIndex = 0;
HXLINE(1778)		this->diff = ((Float)0);
HXLINE(1776)		this->doSnapShit = false;
HXLINE(1775)		this->writingNotes = false;
HXLINE(1678)		this->updatedSection = false;
HXLINE( 586)		this->Typeables = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 584)		this->chartEvents = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 570)		this->currentEventPosition = ((Float)0);
HXLINE( 569)		this->savedValue = HX_("100",71,58,25,00);
HXLINE( 568)		this->savedType = HX_("BPM Change",d1,e8,85,d1);
HXLINE( 567)		this->currentSelectedEventName = HX_("",00,00,00,00);
HXLINE( 134)		this->claps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 126)		this->height = 0;
HXLINE( 122)		this->player1 =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("bf",c4,55,00,00));
HXLINE( 121)		this->player2 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("dad",47,36,4c,00),null());
HXLINE( 117)		this->tempBpm = ((Float)0);
HXLINE(  97)		this->defaultSnap = true;
HXLINE(  96)		this->subDivisions = ((Float)1);
HXLINE(  94)		this->GRID_SIZE = 40;
HXLINE(  89)		this->amountSteps = 0;
HXLINE(  88)		this->curSong = HX_("Dad Battle",31,46,15,16);
HXLINE(  81)		this->curSection = 0;
HXLINE(  75)		this->zoomFactor = ((Float)0.4);
HXLINE(  74)		this->beatsShown = ((Float)1);
HXLINE(  72)		this->speed = ((Float)1.0);
HXLINE(  64)		this->deezNuts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  62)		this->snap = 16;
HXLINE(  60)		this->playClaps = false;
HXLINE(  54)		super::__construct(TransIn,TransOut);
            	}

Dynamic ChartingState_obj::__CreateEmpty() { return new ChartingState_obj; }

void *ChartingState_obj::_hx_vtable = 0;

Dynamic ChartingState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ChartingState_obj > _hx_result = new ChartingState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ChartingState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x7824f5cd || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void ChartingState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_145_create)
HXLINE( 147)		::DiscordClient_obj::changePresence(HX_("Chart Editor",ef,b4,29,e9),null(),null(),true,null());
HXLINE( 150)		this->curSection = ::ChartingState_obj::lastSection;
HXLINE( 154)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 156)		::ChartingState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 158)		this->deezNuts->set(4,1);
HXLINE( 159)		this->deezNuts->set(8,2);
HXLINE( 160)		this->deezNuts->set(12,3);
HXLINE( 161)		this->deezNuts->set(16,4);
HXLINE( 162)		this->deezNuts->set(24,6);
HXLINE( 163)		this->deezNuts->set(32,8);
HXLINE( 164)		this->deezNuts->set(64,16);
HXLINE( 167)		this->sectionRenderes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 168)		this->lines =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 169)		this->texts =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 171)		::TimingStruct_obj::clearTimings();
HXLINE( 176)		if (::hx::IsNotNull( ::PlayState_obj::SONG )) {
HXLINE( 178)			if (::PlayState_obj::isSM) {
HXLINE( 179)				::ChartingState_obj::_song = ::Song_obj::conversionChecks(::Song_obj::loadFromJsonRAW(::sys::io::File_obj::getContent((::PlayState_obj::pathToSm + HX_("/converted.json",73,2b,b3,66)))));
            			}
            			else {
HXLINE( 182)				::String songFormat = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE( 183)				::String _hx_switch_0 = songFormat;
            				if (  (_hx_switch_0==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE( 184)					songFormat = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN( 184)					goto _hx_goto_1;
            				}
            				if (  (_hx_switch_0==HX_("M.I.L.F",1e,4e,41,0d)) ){
HXLINE( 186)					songFormat = HX_("Milf",f6,78,35,33);
HXDLIN( 186)					goto _hx_goto_1;
            				}
            				if (  (_hx_switch_0==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE( 185)					songFormat = HX_("Philly",48,eb,f2,23);
HXDLIN( 185)					goto _hx_goto_1;
            				}
            				_hx_goto_1:;
HXLINE( 189)				::String poop = ::Highscore_obj::formatSong(songFormat,::PlayState_obj::storyDifficulty);
HXLINE( 191)				::ChartingState_obj::_song = ::Song_obj::conversionChecks(::Song_obj::loadFromJson(poop,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) )));
            			}
            		}
            		else {
HXLINE( 196)			::ChartingState_obj::_song =  ::Dynamic(::hx::Anon_obj::Create(13)
            				->setFixed(0,HX_("speed",87,97,69,81),( (Float)(1) ))
            				->setFixed(1,HX_("stage",be,6a,0b,84),HX_("stage",be,6a,0b,84))
            				->setFixed(2,HX_("player1",b0,09,15,8a),HX_("bf",c4,55,00,00))
            				->setFixed(3,HX_("player2",b1,09,15,8a),HX_("dad",47,36,4c,00))
            				->setFixed(4,HX_("notes",41,dc,ca,9f),::Array_obj< ::Dynamic>::__new(0))
            				->setFixed(5,HX_("noteStyle",df,ef,aa,c1),HX_("normal",27,72,69,30))
            				->setFixed(6,HX_("validScore",b6,dc,18,c7),false)
            				->setFixed(7,HX_("chartVersion",da,e9,39,c8),::ChartingState_obj::latestChartVersion)
            				->setFixed(8,HX_("gfVersion",b9,c6,7d,f3),HX_("gf",1f,5a,00,00))
            				->setFixed(9,HX_("bpm",df,be,4a,00),( (Float)(150) ))
            				->setFixed(10,HX_("needsVoices",be,05,e9,0d),true)
            				->setFixed(11,HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(0))
            				->setFixed(12,HX_("song",d5,23,58,4c),HX_("Test",72,f4,d2,37)));
            		}
HXLINE( 213)		this->addGrid(1);
HXLINE( 215)		if (::hx::IsNull( ::ChartingState_obj::_song->__Field(HX_("chartVersion",da,e9,39,c8),::hx::paccDynamic) )) {
HXLINE( 216)			::ChartingState_obj::_song->__SetField(HX_("chartVersion",da,e9,39,c8),HX_("2",32,00,00,00),::hx::paccDynamic);
            		}
HXLINE( 225)		this->snapText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,60,10,0,HX_("",00,00,00,00),14,null());
HXLINE( 226)		this->snapText->scrollFactor->set(null(),null());
HXLINE( 229)		this->curRenderedNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 230)		this->curRenderedSustains =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 232)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 234)		this->tempBpm = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 236)		this->addSection(null());
HXLINE( 240)		this->loadSong(( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 241)		::Conductor_obj::changeBPM(( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE( 242)		::Conductor_obj::mapBPMChanges(::ChartingState_obj::_song);
HXLINE( 244)		::ChartingState_obj::leftIcon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 245)		::ChartingState_obj::rightIcon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 247)		int index = 0;
HXLINE( 249)		if (::hx::IsNull( ::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 250)			::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 252)		if ((( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->length == 0)) {
HXLINE( 253)			::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 258)		int currentIndex = 0;
HXLINE( 259)		{
HXLINE( 259)			int _g = 0;
HXDLIN( 259)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 259)			while((_g < _g1->length)){
HXLINE( 259)				 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 259)				_g = (_g + 1);
HXLINE( 261)				 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 262)				::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 263)				Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 264)				Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 266)				if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 268)					Float beat = pos;
HXLINE( 270)					Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 272)					::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 274)					if ((currentIndex != 0)) {
HXLINE( 276)						 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 277)						data->endBeat = beat;
HXLINE( 278)						data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 279)						Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 280)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE( 281)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            					}
HXLINE( 284)					currentIndex = (currentIndex + 1);
            				}
            			}
            		}
HXLINE( 288)		 ::TimingStruct lastSeg = ::TimingStruct_obj::AllTimings->__get((::TimingStruct_obj::AllTimings->length - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 290)		{
HXLINE( 290)			int _g2 = 0;
HXDLIN( 290)			int _g3 = ::TimingStruct_obj::AllTimings->length;
HXDLIN( 290)			while((_g2 < _g3)){
HXLINE( 290)				_g2 = (_g2 + 1);
HXDLIN( 290)				int i = (_g2 - 1);
HXLINE( 292)				 ::TimingStruct seg = ::TimingStruct_obj::AllTimings->__get(i).StaticCast<  ::TimingStruct >();
HXLINE( 293)				if ((i == (::TimingStruct_obj::AllTimings->length - 1))) {
HXLINE( 294)					lastSeg = seg;
            				}
            			}
            		}
HXLINE( 300)		this->recalculateAllSectionTimes();
HXLINE( 302)		this->poggers();
HXLINE( 307)		{
HXLINE( 307)			int _g4 = 0;
HXDLIN( 307)			while((_g4 < 9000000)){
HXLINE( 307)				_g4 = (_g4 + 1);
HXDLIN( 307)				int i = (_g4 - 1);
HXLINE( 309)				 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtBeat(( (Float)(i) ));
HXLINE( 312)				Float start = ((( (Float)(i) ) - seg->startBeat) / (seg->bpm / ( (Float)(60) )));
HXLINE( 314)				Float time = ((seg->startTime + start) * ( (Float)(1000) ));
HXLINE( 316)				if ((time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE( 317)					goto _hx_goto_4;
            				}
HXLINE( 319)				::ChartingState_obj::lengthInBeats = ( (Float)(i) );
            			}
            			_hx_goto_4:;
            		}
HXLINE( 322)		::ChartingState_obj::lengthInSteps = (::ChartingState_obj::lengthInBeats * ( (Float)(4) ));
HXLINE( 326)		int sections = ::Math_obj::floor(((::ChartingState_obj::lengthInSteps + 16) / ( (Float)(16) )));
HXLINE( 328)		Float targetY = this->getYfromStrum(::flixel::FlxG_obj::sound->music->_length);
HXLINE( 332)		{
HXLINE( 332)			int _g5 = 0;
HXDLIN( 332)			int _g6 = (::Math_obj::round((targetY / ( (Float)(640) ))) + 1920);
HXDLIN( 332)			while((_g5 < _g6)){
HXLINE( 332)				_g5 = (_g5 + 1);
HXDLIN( 332)				int awfgaw = (_g5 - 1);
HXLINE( 334)				 ::SectionRender renderer =  ::SectionRender_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)((640 * awfgaw)) ),this->GRID_SIZE,null());
HXLINE( 335)				if (::hx::IsNull(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw) )) {
HXLINE( 336)					::Array< ::Dynamic> _hx_tmp = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN( 336)					_hx_tmp->push(this->newSection(16,true,false,false));
            				}
HXLINE( 337)				renderer->section =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw);
HXLINE( 339)				this->sectionRenderes->add(renderer).StaticCast<  ::SectionRender >();
HXLINE( 341)				Float down = this->getYfromStrum(( (Float)(renderer->section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) ));
HXDLIN( 341)				Float down1 = (down * this->zoomFactor);
HXLINE( 343)				 ::flixel::FlxSprite sectionicon;
HXDLIN( 343)				if (( (bool)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE( 343)					sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            				}
            				else {
HXLINE( 343)					sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            				}
HXLINE( 344)				sectionicon->set_x(( (Float)(-95) ));
HXLINE( 345)				sectionicon->set_y((down1 - ( (Float)(75) )));
HXLINE( 346)				sectionicon->setGraphicSize(0,45);
HXLINE( 348)				renderer->icon = sectionicon;
HXLINE( 349)				renderer->lastUpdated = ( (bool)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE( 351)				this->add(sectionicon);
HXLINE( 352)				this->height = ::Math_obj::floor(renderer->y);
            			}
            		}
HXLINE( 359)		Float _hx_tmp = (this->gridBG->get_width() / ( (Float)(2) ));
HXDLIN( 359)		this->gridBlackLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp,null(),null())->makeGraphic(2,this->height,-16777216,null(),null());
HXLINE( 365)		::ChartingState_obj::leftIcon->setGraphicSize(0,45);
HXLINE( 366)		::ChartingState_obj::rightIcon->setGraphicSize(0,45);
HXLINE( 368)		this->add(::ChartingState_obj::leftIcon);
HXLINE( 369)		this->add(::ChartingState_obj::rightIcon);
HXLINE( 371)		::ChartingState_obj::leftIcon->setPosition(0,-100);
HXLINE( 372)		 ::HealthIcon _hx_tmp1 = ::ChartingState_obj::rightIcon;
HXDLIN( 372)		_hx_tmp1->setPosition((this->gridBG->get_width() / ( (Float)(2) )),-100);
HXLINE( 374)		::ChartingState_obj::leftIcon->scrollFactor->set(null(),null());
HXLINE( 375)		::ChartingState_obj::rightIcon->scrollFactor->set(null(),null());
HXLINE( 377)		this->bpmTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1000,50,0,HX_("",00,00,00,00),16,null());
HXLINE( 378)		this->bpmTxt->scrollFactor->set(null(),null());
HXLINE( 379)		this->add(this->bpmTxt);
HXLINE( 381)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 381)		this->strumLine = _hx_tmp2->makeGraphic(::Std_obj::_hx_int(( (Float)((this->GRID_SIZE * 8)) )),4,null(),null(),null());
HXLINE( 383)		this->dummyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(this->GRID_SIZE,this->GRID_SIZE,null(),null(),null());
HXLINE( 384)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(4)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Song",f5,4f,31,37))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song Data",55,ca,2e,d8))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Section",c5,2d,29,2b))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Section Data",85,da,d0,2d))))->init(2, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Note",12,44,e3,33))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Note Data",18,cd,41,e6))))->init(3, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Assets",a3,bc,97,80))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Assets",a3,bc,97,80))));
HXLINE( 391)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 393)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 394)		this->UI_box->resize(( (Float)(300) ),( (Float)(400) ));
HXLINE( 395)		this->UI_box->set_x(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 40));
HXLINE( 396)		this->UI_box->set_y(( (Float)(20) ));
HXLINE( 398)		::Array< ::Dynamic> opt_tabs = ::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Options",3e,5b,4f,ad))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song Options",13,6c,3f,84))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Events",39,c3,fe,ca))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song Events",04,64,1b,cd))));
HXLINE( 400)		this->UI_options =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),opt_tabs,null(),true,null(),null());
HXLINE( 402)		this->UI_options->scrollFactor->set(null(),null());
HXLINE( 403)		this->UI_options->set_selected_tab(0);
HXLINE( 404)		this->UI_options->resize(( (Float)(300) ),( (Float)(200) ));
HXLINE( 405)		this->UI_options->set_x(this->UI_box->x);
HXLINE( 406)		this->UI_options->set_y(( (Float)((::flixel::FlxG_obj::height - 300)) ));
HXLINE( 407)		this->add(this->UI_options);
HXLINE( 408)		this->add(this->UI_box);
HXLINE( 411)		this->addSongUI();
HXLINE( 412)		this->addSectionUI();
HXLINE( 413)		this->addNoteUI();
HXLINE( 415)		this->addOptionsUI();
HXLINE( 416)		this->addEventsUI();
HXLINE( 418)		this->regenerateLines();
HXLINE( 421)		this->updateGrid();
HXLINE( 427)		this->add(this->sectionRenderes);
HXLINE( 445)		this->add(this->dummyArrow);
HXLINE( 446)		this->add(this->strumLine);
HXLINE( 447)		this->add(this->lines);
HXLINE( 448)		this->add(this->texts);
HXLINE( 449)		this->add(this->gridBlackLine);
HXLINE( 450)		this->add(this->curRenderedNotes);
HXLINE( 451)		this->add(this->curRenderedSustains);
HXLINE( 452)		this->selectedBoxes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 454)		this->add(this->selectedBoxes);
HXLINE( 459)		this->add(this->snapText);
HXLINE( 465)		this->super::create();
            	}


void ChartingState_obj::regenerateLines(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_471_regenerateLines)
HXLINE( 472)		while((this->lines->members->get_length() > 0)){
HXLINE( 474)			Dynamic( this->lines->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->destroy();
HXLINE( 475)			this->lines->members->remove(Dynamic( this->lines->members->__get(0)).StaticCast<  ::flixel::FlxSprite >());
            		}
HXLINE( 478)		while((this->texts->members->get_length() > 0)){
HXLINE( 480)			Dynamic( this->texts->members->__get(0)).StaticCast<  ::flixel::text::FlxText >()->destroy();
HXLINE( 481)			this->texts->members->remove(Dynamic( this->texts->members->__get(0)).StaticCast<  ::flixel::text::FlxText >());
            		}
HXLINE( 485)		if (::hx::IsNotNull( ::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 486)			int _g = 0;
HXDLIN( 486)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 486)			while((_g < _g1->length)){
HXLINE( 486)				 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 486)				_g = (_g + 1);
HXLINE( 488)				 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtBeat(i->position);
HXLINE( 490)				Float posi = ( (Float)(0) );
HXLINE( 492)				if (::hx::IsNotNull( seg )) {
HXLINE( 494)					Float start = ((i->position - seg->startBeat) / (seg->bpm / ( (Float)(60) )));
HXLINE( 496)					posi = (seg->startTime + start);
            				}
HXLINE( 499)				Float pos = this->getYfromStrum((posi * ( (Float)(1000) )));
HXDLIN( 499)				Float pos1 = (pos * this->zoomFactor);
HXLINE( 501)				if ((pos1 < 0)) {
HXLINE( 502)					pos1 = ( (Float)(0) );
            				}
HXLINE( 504)				::String type = i->type;
HXLINE( 506)				 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,-190,pos1,0,((((i->name + HX_("\n",0a,00,00,00)) + type) + HX_("\n",0a,00,00,00)) + i->value),12,null());
HXLINE( 507)				 ::flixel::FlxSprite line =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,pos1,null());
HXDLIN( 507)				 ::flixel::FlxSprite line1 = line->makeGraphic(::Std_obj::_hx_int(( (Float)((this->GRID_SIZE * 8)) )),4,-16776961,null(),null());
HXLINE( 509)				line1->set_alpha(((Float)0.2));
HXLINE( 511)				this->lines->add(line1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 512)				this->texts->add(text).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 514)				this->add(line1);
HXLINE( 515)				this->add(text);
            			}
            		}
HXLINE( 518)		{
HXLINE( 518)			 ::Dynamic filter = null();
HXDLIN( 518)			 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->sectionRenderes->members,filter);
HXDLIN( 518)			while(i->hasNext()){
HXLINE( 518)				 ::SectionRender i1 = i->next().StaticCast<  ::SectionRender >();
HXLINE( 520)				Float pos = this->getYfromStrum(( (Float)(i1->section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) ));
HXDLIN( 520)				Float pos1 = (pos * this->zoomFactor);
HXLINE( 521)				i1->icon->set_y((pos1 - ( (Float)(75) )));
HXLINE( 523)				 ::flixel::FlxSprite line =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,pos1,null());
HXDLIN( 523)				 ::flixel::FlxSprite line1 = line->makeGraphic(::Std_obj::_hx_int(( (Float)((this->GRID_SIZE * 8)) )),4,-16777216,null(),null());
HXLINE( 524)				line1->set_alpha(((Float)0.4));
HXLINE( 525)				this->lines->add(line1).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,regenerateLines,(void))

void ChartingState_obj::addGrid( ::Dynamic __o_divisions){
            		 ::Dynamic divisions = __o_divisions;
            		if (::hx::IsNull(__o_divisions)) divisions = 1;
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_530_addGrid)
HXLINE( 532)		Float h = (( (Float)(this->GRID_SIZE) ) / ( (Float)(divisions) ));
HXLINE( 533)		if ((::Math_obj::floor(h) != h)) {
HXLINE( 534)			h = ( (Float)(this->GRID_SIZE) );
            		}
HXLINE( 536)		this->remove(this->gridBG,null());
HXLINE( 537)		int _hx_tmp = this->GRID_SIZE;
HXDLIN( 537)		int _hx_tmp1 = ::Std_obj::_hx_int(h);
HXDLIN( 537)		this->gridBG = ::flixel::addons::display::FlxGridOverlay_obj::create(_hx_tmp,_hx_tmp1,(this->GRID_SIZE * 8),(this->GRID_SIZE * 16),null(),null(),null());
HXLINE( 554)		int totalHeight = 0;
HXLINE( 559)		this->remove(this->gridBlackLine,null());
HXLINE( 560)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->gridBG->get_width() / ( (Float)(2) )),null(),null());
HXDLIN( 560)		this->gridBlackLine = _hx_tmp2->makeGraphic(2,::Std_obj::_hx_int(( (Float)(::Math_obj::floor(::ChartingState_obj::lengthInSteps)) )),-16777216,null(),null());
HXLINE( 561)		this->add(this->gridBlackLine);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addGrid,(void))

 ::Event ChartingState_obj::containsName(::String name,::Array< ::Dynamic> events){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_573_containsName)
HXLINE( 574)		{
HXLINE( 574)			int _g = 0;
HXDLIN( 574)			while((_g < events->length)){
HXLINE( 574)				 ::Event i = events->__get(_g).StaticCast<  ::Event >();
HXDLIN( 574)				_g = (_g + 1);
HXLINE( 576)				::String thisName = ( (::String)(::Reflect_obj::field(i,HX_("name",4b,72,ff,48))) );
HXLINE( 578)				if ((thisName == name)) {
HXLINE( 579)					return i;
            				}
            			}
            		}
HXLINE( 581)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,containsName,return )

void ChartingState_obj::addEventsUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_609_addEventsUI)
HXLINE( 610)			::String _gthis1 = _gthis->currentSelectedEventName;
HXDLIN( 610)			Float _gthis2 = _gthis->currentEventPosition;
HXDLIN( 610)			Float pog = ::HelperFunctions_obj::truncateFloat(::Std_obj::parseFloat(_gthis->savedValue),3);
HXDLIN( 610)			 ::Event pog1 =  ::Event_obj::__alloc( HX_CTX ,_gthis1,_gthis2,pog,_gthis->savedType);
HXLINE( 614)			 ::Event obj = _gthis->containsName(pog1->name,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 617)			if ((pog1->name == HX_("",00,00,00,00))) {
HXLINE( 618)				return;
            			}
HXLINE( 622)			if (::hx::IsNotNull( obj )) {
HXLINE( 623)				( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->remove(obj);
            			}
HXLINE( 624)			( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->push(pog1);
HXLINE( 628)			::TimingStruct_obj::clearTimings();
HXLINE( 630)			int currentIndex = 0;
HXLINE( 631)			{
HXLINE( 631)				int _g = 0;
HXDLIN( 631)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 631)				while((_g < _g1->length)){
HXLINE( 631)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 631)					_g = (_g + 1);
HXLINE( 633)					 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 634)					::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 635)					Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 636)					Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 639)					if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 641)						Float beat = pos;
HXLINE( 643)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 645)						::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 647)						if ((currentIndex != 0)) {
HXLINE( 649)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 650)							data->endBeat = beat;
HXLINE( 651)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 652)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 653)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE( 654)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE( 657)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE( 661)			if ((pog1->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 663)				_gthis->recalculateAllSectionTimes();
HXLINE( 664)				_gthis->poggers();
            			}
HXLINE( 667)			_gthis->regenerateLines();
HXLINE( 669)			::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 671)			{
HXLINE( 671)				int _g2_current = 0;
HXDLIN( 671)				::Array< ::Dynamic> _g2_array = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 671)				while((_g2_current < _g2_array->length)){
HXLINE( 671)					 ::Event _g3_value = _g2_array->__get(_g2_current).StaticCast<  ::Event >();
HXDLIN( 671)					_g2_current = (_g2_current + 1);
HXDLIN( 671)					int _g3_key = (_g2_current - 1);
HXDLIN( 671)					int key = _g3_key;
HXDLIN( 671)					 ::Event value = _g3_value;
HXLINE( 672)					listofnames->push(value->name);
            				}
            			}
HXLINE( 675)			 ::flixel::addons::ui::FlxUIDropDownMenu _gthis3 = _gthis->listOfEvents;
HXDLIN( 675)			_gthis3->setData(::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true));
HXLINE( 677)			_gthis->listOfEvents->set_selectedLabel(pog1->name);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_1, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventName, ::flixel::addons::ui::FlxUIInputText,eventValue, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_683_addEventsUI)
HXLINE( 685)			::String pog = (HX_("New Event ",c6,9a,0f,64) + ::HelperFunctions_obj::truncateFloat(_gthis->curDecimalBeat,3));
HXDLIN( 685)			Float pog1 = ::HelperFunctions_obj::truncateFloat(_gthis->curDecimalBeat,3);
HXDLIN( 685)			 ::Event pog2 =  ::Event_obj::__alloc( HX_CTX ,pog,pog1,( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1));
HXLINE( 689)			 ::Event obj = _gthis->containsName(pog2->name,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 691)			if (::hx::IsNotNull( obj )) {
HXLINE( 692)				return;
            			}
HXLINE( 696)			( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->push(pog2);
HXLINE( 698)			eventName->set_text(pog2->name);
HXLINE( 699)			eventType->set_selectedLabel(pog2->type);
HXLINE( 700)			eventValue->set_text((pog2->value + HX_("",00,00,00,00)));
HXLINE( 701)			eventPos->set_text((pog2->position + HX_("",00,00,00,00)));
HXLINE( 702)			_gthis->currentSelectedEventName = pog2->name;
HXLINE( 703)			_gthis->currentEventPosition = pog2->position;
HXLINE( 705)			_gthis->savedType = pog2->type;
HXLINE( 706)			_gthis->savedValue = (pog2->value + HX_("",00,00,00,00));
HXLINE( 708)			::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 710)			{
HXLINE( 710)				int _g_current = 0;
HXDLIN( 710)				::Array< ::Dynamic> _g_array = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 710)				while((_g_current < _g_array->length)){
HXLINE( 710)					 ::Event _g1_value = _g_array->__get(_g_current).StaticCast<  ::Event >();
HXDLIN( 710)					_g_current = (_g_current + 1);
HXDLIN( 710)					int _g1_key = (_g_current - 1);
HXDLIN( 710)					int key = _g1_key;
HXDLIN( 710)					 ::Event value = _g1_value;
HXLINE( 711)					listofnames->push(value->name);
            				}
            			}
HXLINE( 714)			 ::flixel::addons::ui::FlxUIDropDownMenu _gthis1 = _gthis->listOfEvents;
HXDLIN( 714)			_gthis1->setData(::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true));
HXLINE( 716)			_gthis->listOfEvents->set_selectedLabel(pog2->name);
HXLINE( 718)			::TimingStruct_obj::clearTimings();
HXLINE( 720)			int currentIndex = 0;
HXLINE( 721)			{
HXLINE( 721)				int _g = 0;
HXDLIN( 721)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 721)				while((_g < _g1->length)){
HXLINE( 721)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 721)					_g = (_g + 1);
HXLINE( 723)					 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 724)					::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 725)					Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 726)					Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 729)					if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 731)						Float beat = pos;
HXLINE( 733)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 735)						::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 737)						if ((currentIndex != 0)) {
HXLINE( 739)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 740)							data->endBeat = beat;
HXLINE( 741)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 742)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 743)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE( 744)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE( 747)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE( 752)			{
HXLINE( 752)				int _g2 = 0;
HXDLIN( 752)				::Array< ::Dynamic> _g3 = ::TimingStruct_obj::AllTimings;
HXDLIN( 752)				while((_g2 < _g3->length)){
HXLINE( 752)					 ::TimingStruct i = _g3->__get(_g2).StaticCast<  ::TimingStruct >();
HXDLIN( 752)					_g2 = (_g2 + 1);
            				}
            			}
HXLINE( 755)			_gthis->recalculateAllSectionTimes();
HXLINE( 756)			_gthis->poggers();
HXLINE( 758)			_gthis->regenerateLines();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_2, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventName, ::flixel::addons::ui::FlxUIInputText,eventValue, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_762_addEventsUI)
HXLINE( 766)			 ::ChartingState _gthis1 = _gthis;
HXDLIN( 766)			::String obj = _gthis->listOfEvents->get_selectedLabel();
HXDLIN( 766)			 ::Event obj1 = _gthis1->containsName(obj,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 770)			if (::hx::IsNull( obj1 )) {
HXLINE( 771)				return;
            			}
HXLINE( 775)			( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->remove(obj1);
HXLINE( 777)			 ::Event firstEvent = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >();
HXLINE( 779)			if (::hx::IsNull( firstEvent )) {
HXLINE( 781)				::Array< ::Dynamic> eventRemove = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 781)				eventRemove->push( ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1)));
HXLINE( 782)				firstEvent = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >();
            			}
HXLINE( 785)			eventName->set_text(firstEvent->name);
HXLINE( 786)			eventType->set_selectedLabel(firstEvent->type);
HXLINE( 787)			eventValue->set_text((firstEvent->value + HX_("",00,00,00,00)));
HXLINE( 788)			eventPos->set_text((firstEvent->position + HX_("",00,00,00,00)));
HXLINE( 789)			_gthis->currentSelectedEventName = firstEvent->name;
HXLINE( 790)			_gthis->currentEventPosition = firstEvent->position;
HXLINE( 792)			_gthis->savedType = firstEvent->type;
HXLINE( 793)			_gthis->savedValue = (firstEvent->value + HX_("",00,00,00,00));
HXLINE( 795)			::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 797)			{
HXLINE( 797)				int _g_current = 0;
HXDLIN( 797)				::Array< ::Dynamic> _g_array = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 797)				while((_g_current < _g_array->length)){
HXLINE( 797)					 ::Event _g1_value = _g_array->__get(_g_current).StaticCast<  ::Event >();
HXDLIN( 797)					_g_current = (_g_current + 1);
HXDLIN( 797)					int _g1_key = (_g_current - 1);
HXDLIN( 797)					int key = _g1_key;
HXDLIN( 797)					 ::Event value = _g1_value;
HXLINE( 798)					listofnames->push(value->name);
            				}
            			}
HXLINE( 801)			 ::flixel::addons::ui::FlxUIDropDownMenu _gthis2 = _gthis->listOfEvents;
HXDLIN( 801)			_gthis2->setData(::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true));
HXLINE( 803)			_gthis->listOfEvents->set_selectedLabel(firstEvent->name);
HXLINE( 805)			::TimingStruct_obj::clearTimings();
HXLINE( 807)			int currentIndex = 0;
HXLINE( 808)			{
HXLINE( 808)				int _g = 0;
HXDLIN( 808)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 808)				while((_g < _g1->length)){
HXLINE( 808)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 808)					_g = (_g + 1);
HXLINE( 810)					 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 811)					::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 812)					Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 813)					Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 816)					if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 818)						Float beat = pos;
HXLINE( 820)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 822)						::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 824)						if ((currentIndex != 0)) {
HXLINE( 826)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 827)							data->endBeat = beat;
HXLINE( 828)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 829)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 830)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE( 831)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE( 834)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE( 838)			_gthis->recalculateAllSectionTimes();
HXLINE( 839)			_gthis->poggers();
HXLINE( 841)			_gthis->regenerateLines();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_845_addEventsUI)
HXLINE( 846)			 ::Event obj = _gthis->containsName(_gthis->currentSelectedEventName,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 847)			if (::hx::IsNull( obj )) {
HXLINE( 848)				return;
            			}
HXLINE( 849)			_gthis->currentEventPosition = _gthis->curDecimalBeat;
HXLINE( 850)			obj->position = _gthis->currentEventPosition;
HXLINE( 851)			eventPos->set_text((_gthis->currentEventPosition + HX_("",00,00,00,00)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_4, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventName, ::flixel::addons::ui::FlxUIInputText,eventValue, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(1)
            		void _hx_run(::String name){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_902_addEventsUI)
HXLINE( 903)			 ::ChartingState _gthis1 = _gthis;
HXDLIN( 903)			::String event = _gthis->listOfEvents->get_selectedLabel();
HXDLIN( 903)			 ::Event event1 = _gthis1->containsName(event,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 905)			if (::hx::IsNull( event1 )) {
HXLINE( 906)				return;
            			}
HXLINE( 910)			eventName->set_text(event1->name);
HXLINE( 911)			eventValue->set_text((event1->value + HX_("",00,00,00,00)));
HXLINE( 912)			eventPos->set_text((event1->position + HX_("",00,00,00,00)));
HXLINE( 913)			eventType->set_selectedLabel(event1->type);
HXLINE( 914)			_gthis->currentSelectedEventName = event1->name;
HXLINE( 915)			_gthis->currentEventPosition = event1->position;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::ChartingState,_gthis) HXARGC(2)
            		void _hx_run(::String string,::String string2){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_921_addEventsUI)
HXLINE( 921)			_gthis->savedValue = string;
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis) HXARGC(1)
            		void _hx_run(::String type){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_926_addEventsUI)
HXLINE( 926)			_gthis->savedType = eventType->get_selectedLabel();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::ChartingState,_gthis) HXARGC(2)
            		void _hx_run(::String string,::String string2){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_930_addEventsUI)
HXLINE( 931)			 ::Event obj = _gthis->containsName(_gthis->currentSelectedEventName,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 932)			if (::hx::IsNull( obj )) {
HXLINE( 934)				_gthis->currentSelectedEventName = string;
HXLINE( 935)				return;
            			}
HXLINE( 937)			obj = _gthis->containsName(string,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 938)			if (::hx::IsNotNull( obj )) {
HXLINE( 939)				return;
            			}
HXLINE( 940)			obj = _gthis->containsName(_gthis->currentSelectedEventName,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 941)			obj->name = string;
HXLINE( 942)			_gthis->currentSelectedEventName = string;
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_589_addEventsUI)
HXLINE( 588)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 590)		if (::hx::IsNull( ::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 592)			::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 595)		::String firstEvent = HX_("",00,00,00,00);
HXLINE( 597)		if ((::Lambda_obj::count(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic),null()) != 0)) {
HXLINE( 599)			firstEvent = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >()->name;
            		}
HXLINE( 602)		 ::flixel::text::FlxText listLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,5,null(),HX_("List of Events",00,a9,f1,9c),null(),null());
HXLINE( 603)		 ::flixel::text::FlxText nameLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,150,5,null(),HX_("Event Name",51,cc,89,80),null(),null());
HXLINE( 604)		 ::flixel::addons::ui::FlxUIInputText eventName =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,150,20,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 605)		 ::flixel::text::FlxText typeLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,45,null(),HX_("Type of Event",37,e6,4b,c6),null(),null());
HXLINE( 606)		 ::flixel::addons::ui::FlxUIDropDownMenu eventType =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,60,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(::Array_obj< ::String >::fromData( _hx_array_data_9bdde08d_32,2),true),null(),null(),null(),null(),null());
HXLINE( 607)		 ::flixel::text::FlxText valueLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,150,45,null(),HX_("Event Value",ab,ea,3c,93),null(),null());
HXLINE( 608)		 ::flixel::addons::ui::FlxUIInputText eventValue =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,150,60,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 609)		 ::flixel::ui::FlxButton eventSave =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,155,HX_("Save Event",f7,de,33,df), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 681)		 ::flixel::text::FlxText posLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,150,85,null(),HX_("Event Position",af,75,21,14),null(),null());
HXLINE( 682)		 ::flixel::addons::ui::FlxUIInputText eventPos =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,150,100,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 683)		 ::flixel::ui::FlxButton eventAdd =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,95,155,HX_("Add Event",9b,64,c0,f9), ::Dynamic(new _hx_Closure_1(eventType,_gthis,eventName,eventValue,eventPos)));
HXLINE( 762)		 ::flixel::ui::FlxButton eventRemove =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,180,155,HX_("Remove Event",3e,37,09,d7), ::Dynamic(new _hx_Closure_2(eventType,_gthis,eventName,eventValue,eventPos)));
HXLINE( 845)		 ::flixel::ui::FlxButton updatePos =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,150,120,HX_("Update Pos",fd,ab,f0,d9), ::Dynamic(new _hx_Closure_3(_gthis,eventPos)));
HXLINE( 856)		::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 858)		 ::Event firstEventObject = null();
HXLINE( 860)		{
HXLINE( 860)			int _g = 0;
HXDLIN( 860)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 860)			while((_g < _g1->length)){
HXLINE( 860)				 ::Event event = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 860)				_g = (_g + 1);
HXLINE( 861)				::String name = ( (::String)(::Reflect_obj::field(event,HX_("name",4b,72,ff,48))) );
HXLINE( 862)				::String type = ( (::String)(::Reflect_obj::field(event,HX_("type",ba,f2,08,4d))) );
HXLINE( 863)				Float pos = ( (Float)(::Reflect_obj::field(event,HX_("position",a9,a0,fa,ca))) );
HXLINE( 864)				Float value = ( (Float)(::Reflect_obj::field(event,HX_("value",71,7f,b8,31))) );
HXLINE( 868)				 ::Event eventt =  ::Event_obj::__alloc( HX_CTX ,name,pos,value,type);
HXLINE( 870)				this->chartEvents->push(eventt);
HXLINE( 871)				listofnames->push(name);
            			}
            		}
HXLINE( 874)		::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),this->chartEvents,::hx::paccDynamic);
HXLINE( 876)		if ((listofnames->length == 0)) {
HXLINE( 877)			listofnames->push(HX_("",00,00,00,00));
            		}
HXLINE( 879)		if ((( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->length != 0)) {
HXLINE( 880)			firstEventObject = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >();
            		}
HXLINE( 884)		if ((firstEvent != HX_("",00,00,00,00))) {
HXLINE( 887)			eventName->set_text(firstEventObject->name);
HXLINE( 889)			eventType->set_selectedLabel(firstEventObject->type);
HXLINE( 891)			eventValue->set_text((firstEventObject->value + HX_("",00,00,00,00)));
HXLINE( 893)			this->currentSelectedEventName = firstEventObject->name;
HXLINE( 895)			this->currentEventPosition = firstEventObject->position;
HXLINE( 897)			eventPos->set_text((this->currentEventPosition + HX_("",00,00,00,00)));
            		}
HXLINE( 901)		this->listOfEvents =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,20,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true), ::Dynamic(new _hx_Closure_4(eventType,_gthis,eventName,eventValue,eventPos)),null(),null(),null(),null());
HXLINE( 918)		eventValue->callback =  ::Dynamic(new _hx_Closure_5(_gthis));
HXLINE( 924)		eventType->callback =  ::Dynamic(new _hx_Closure_6(eventType,_gthis));
HXLINE( 929)		eventName->callback =  ::Dynamic(new _hx_Closure_7(_gthis));
HXLINE( 946)		this->Typeables->push(eventPos);
HXLINE( 947)		this->Typeables->push(eventValue);
HXLINE( 948)		this->Typeables->push(eventName);
HXLINE( 950)		 ::flixel::addons::ui::FlxUI tab_events =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_options,null(),null(),null(),null());
HXLINE( 951)		tab_events->name = HX_("Events",39,c3,fe,ca);
HXLINE( 952)		tab_events->add(posLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 953)		tab_events->add(valueLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 954)		tab_events->add(nameLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 955)		tab_events->add(listLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 956)		tab_events->add(typeLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 957)		tab_events->add(eventName).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 958)		tab_events->add(eventValue).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 959)		tab_events->add(eventSave).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 960)		tab_events->add(eventAdd).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 961)		tab_events->add(eventRemove).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 962)		tab_events->add(eventPos).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 963)		tab_events->add(updatePos).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 964)		tab_events->add(eventType).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 965)		tab_events->add(this->listOfEvents).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 966)		this->UI_options->addGroup(tab_events);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addEventsUI,(void))

void ChartingState_obj::addOptionsUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUICheckBox,hitsounds) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_977_addOptionsUI)
HXLINE( 977)			_gthis->playClaps = hitsounds->checked;
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::addons::ui::FlxUICheckBox,check_mute_inst) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_983_addOptionsUI)
HXLINE( 984)			Float vol = ( (Float)(1) );
HXLINE( 986)			if (check_mute_inst->checked) {
HXLINE( 987)				vol = ( (Float)(0) );
            			}
HXLINE( 989)			::flixel::FlxG_obj::sound->music->set_volume(vol);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_997_addOptionsUI)
HXLINE( 997)			_gthis->defaultSnap = _gthis->check_snap->checked;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_970_addOptionsUI)
HXLINE( 969)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 973)		 ::flixel::addons::ui::FlxUICheckBox hitsounds =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,60,null(),null(),HX_("Play hitsounds",4b,26,03,51),100,null(),null());
HXLINE( 974)		hitsounds->set_checked(false);
HXLINE( 975)		hitsounds->callback =  ::Dynamic(new _hx_Closure_0(_gthis,hitsounds));
HXLINE( 980)		 ::flixel::addons::ui::FlxUICheckBox check_mute_inst =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,90,null(),null(),HX_("Mute Instrumental",79,89,01,0a),100,null(),null());
HXLINE( 981)		check_mute_inst->set_checked(false);
HXLINE( 982)		check_mute_inst->callback =  ::Dynamic(new _hx_Closure_1(check_mute_inst));
HXLINE( 992)		this->check_snap =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,80,25,null(),null(),HX_("Snap to grid",d5,83,5b,e7),100,null(),null());
HXLINE( 993)		this->check_snap->set_checked(this->defaultSnap);
HXLINE( 995)		this->check_snap->callback =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE(1001)		 ::flixel::addons::ui::FlxUI tab_options =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_options,null(),null(),null(),null());
HXLINE(1002)		tab_options->name = HX_("Options",3e,5b,4f,ad);
HXLINE(1003)		tab_options->add(hitsounds).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1004)		tab_options->add(check_mute_inst).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1005)		this->UI_options->addGroup(tab_options);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addOptionsUI,(void))

void ChartingState_obj::addSongUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::addons::ui::FlxUICheckBox,check_voices) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1018_addSongUI)
HXLINE(1018)			::ChartingState_obj::_song->__SetField(HX_("needsVoices",be,05,e9,0d),check_voices->checked,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1024_addSongUI)
HXLINE(1024)			_gthis->saveLevel();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1029_addSongUI)
HXLINE(1029)			_gthis->loadSong(( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1034_addSongUI)
HXLINE(1034)			 ::ChartingState _gthis1 = _gthis;
HXDLIN(1034)			_gthis1->loadJson(( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1039_addSongUI)
HXLINE(1040)			{
HXLINE(1040)				int _g = 0;
HXDLIN(1040)				int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(1040)				while((_g < _g1)){
HXLINE(1040)					_g = (_g + 1);
HXDLIN(1040)					int ii = (_g - 1);
HXLINE(1042)					{
HXLINE(1042)						int _g1 = 0;
HXDLIN(1042)						int _g2 = ( (::Array< ::Dynamic>)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(ii)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length;
HXDLIN(1042)						while((_g1 < _g2)){
HXLINE(1042)							_g1 = (_g1 + 1);
HXDLIN(1042)							int i = (_g1 - 1);
HXLINE(1044)							 ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(ii)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
            						}
            					}
            				}
            			}
HXLINE(1047)			_gthis->resetSection(true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_5, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUINumericStepper,stepperShiftNoteDialstep, ::flixel::addons::ui::FlxUINumericStepper,stepperShiftNoteDial, ::flixel::addons::ui::FlxUINumericStepper,stepperShiftNoteDialms) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1095_addSongUI)
HXLINE(1095)			 ::ChartingState _gthis1 = _gthis;
HXDLIN(1095)			int shiftNoteButton = ::Std_obj::_hx_int(stepperShiftNoteDial->value);
HXDLIN(1095)			int shiftNoteButton1 = ::Std_obj::_hx_int(stepperShiftNoteDialstep->value);
HXDLIN(1095)			_gthis1->shiftNotes(shiftNoteButton,shiftNoteButton1,::Std_obj::_hx_int(stepperShiftNoteDialms->value));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1105_addSongUI)
HXLINE(1105)			::Array< ::String > characters1 = characters;
HXDLIN(1105)			 ::Dynamic player1DropDown = ::Std_obj::parseInt(character);
HXDLIN(1105)			::ChartingState_obj::_song->__SetField(HX_("player1",b0,09,15,8a),characters1->__get(( (int)(player1DropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1113_addSongUI)
HXLINE(1113)			::Array< ::String > characters1 = characters;
HXDLIN(1113)			 ::Dynamic player2DropDown = ::Std_obj::parseInt(character);
HXDLIN(1113)			::ChartingState_obj::_song->__SetField(HX_("player2",b1,09,15,8a),characters1->__get(( (int)(player2DropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8,::Array< ::String >,gfVersions) HXARGC(1)
            		void _hx_run(::String gfVersion){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1121_addSongUI)
HXLINE(1121)			::Array< ::String > gfVersions1 = gfVersions;
HXDLIN(1121)			 ::Dynamic gfVersionDropDown = ::Std_obj::parseInt(gfVersion);
HXDLIN(1121)			::ChartingState_obj::_song->__SetField(HX_("gfVersion",b9,c6,7d,f3),gfVersions1->__get(( (int)(gfVersionDropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9,::Array< ::String >,stages) HXARGC(1)
            		void _hx_run(::String stage){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1129_addSongUI)
HXLINE(1129)			::Array< ::String > stages1 = stages;
HXDLIN(1129)			 ::Dynamic stageDropDown = ::Std_obj::parseInt(stage);
HXDLIN(1129)			::ChartingState_obj::_song->__SetField(HX_("stage",be,6a,0b,84),stages1->__get(( (int)(stageDropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10,::Array< ::String >,noteStyles) HXARGC(1)
            		void _hx_run(::String noteStyle){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1137_addSongUI)
HXLINE(1137)			::Array< ::String > noteStyles1 = noteStyles;
HXDLIN(1137)			 ::Dynamic noteStyleDropDown = ::Std_obj::parseInt(noteStyle);
HXDLIN(1137)			::ChartingState_obj::_song->__SetField(HX_("noteStyle",df,ef,aa,c1),noteStyles1->__get(( (int)(noteStyleDropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1009_addSongUI)
HXLINE(1008)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1010)		 ::flixel::addons::ui::FlxUIInputText UI_songTitle =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,10,70,( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),8,null(),null(),null());
HXLINE(1011)		this->typingShit = UI_songTitle;
HXLINE(1013)		 ::flixel::addons::ui::FlxUICheckBox check_voices =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,25,null(),null(),HX_("Has voice track",b7,2b,b0,eb),100,null(),null());
HXLINE(1014)		check_voices->set_checked(( (bool)(::ChartingState_obj::_song->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) ));
HXLINE(1016)		check_voices->callback =  ::Dynamic(new _hx_Closure_0(check_voices));
HXLINE(1022)		 ::flixel::ui::FlxButton saveButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,110,8,HX_("Save",5d,b7,26,37), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(1027)		Float saveButton1 = saveButton->x;
HXDLIN(1027)		Float reloadSong = ((saveButton1 + saveButton->get_width()) + 10);
HXDLIN(1027)		 ::flixel::ui::FlxButton reloadSong1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong,saveButton->y,HX_("Reload Audio",cf,9c,c1,ed), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE(1032)		 ::flixel::ui::FlxButton reloadSongJson =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong1->x,(saveButton->y + 30),HX_("Reload JSON",2f,1c,a5,4a), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE(1038)		 ::flixel::ui::FlxButton restart =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,140,HX_("Reset Chart",8d,3f,ff,f3), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE(1050)		 ::flixel::ui::FlxButton loadAutosaveBtn =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSongJson->x,(reloadSongJson->y + 30),HX_("load autosave",66,5f,5a,83),this->loadAutosave_dyn());
HXLINE(1051)		 ::flixel::addons::ui::FlxUINumericStepper stepperBPM =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,65,((Float)0.1),1,((Float)1.0),((Float)5000.0),1,null(),null(),null(),null(),null());
HXLINE(1052)		stepperBPM->set_value(::Conductor_obj::bpm);
HXLINE(1053)		stepperBPM->name = HX_("song_bpm",35,36,15,42);
HXLINE(1055)		 ::flixel::text::FlxText stepperBPMLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,65,null(),HX_("BPM",bf,5a,32,00),null(),null());
HXLINE(1057)		 ::flixel::addons::ui::FlxUINumericStepper stepperSpeed =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,80,((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE(1058)		stepperSpeed->set_value(( (Float)(::ChartingState_obj::_song->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ));
HXLINE(1059)		stepperSpeed->name = HX_("song_speed",5d,10,41,a4);
HXLINE(1061)		 ::flixel::text::FlxText stepperSpeedLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,80,null(),HX_("Scroll Speed",34,bf,42,cb),null(),null());
HXLINE(1063)		 ::flixel::addons::ui::FlxUINumericStepper stepperVocalVol =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,95,((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE(1065)		if (!(::PlayState_obj::isSM)) {
HXLINE(1066)			stepperVocalVol->set_value(this->vocals->_volume);
            		}
            		else {
HXLINE(1068)			stepperVocalVol->set_value(( (Float)(1) ));
            		}
HXLINE(1072)		stepperVocalVol->name = HX_("song_vocalvol",a8,3c,96,f8);
HXLINE(1074)		 ::flixel::text::FlxText stepperVocalVolLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,95,null(),HX_("Vocal Volume",65,14,e3,28),null(),null());
HXLINE(1076)		 ::flixel::addons::ui::FlxUINumericStepper stepperSongVol =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,110,((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE(1077)		stepperSongVol->set_value(::flixel::FlxG_obj::sound->music->_volume);
HXLINE(1078)		stepperSongVol->name = HX_("song_instvol",63,a1,f2,af);
HXLINE(1080)		 ::flixel::text::FlxText stepperSongVolLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,110,null(),HX_("Instrumental Volume",68,1c,6d,b8),null(),null());
HXLINE(1083)		 ::flixel::text::FlxText shiftNoteDialLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,245,null(),HX_("Shift Note FWD by (Section)",60,13,78,8d),null(),null());
HXLINE(1084)		 ::flixel::addons::ui::FlxUINumericStepper stepperShiftNoteDial =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,260,1,0,-1000,1000,0,null(),null(),null(),null(),null());
HXLINE(1085)		stepperShiftNoteDial->name = HX_("song_shiftnote",4a,09,de,10);
HXLINE(1086)		 ::flixel::text::FlxText shiftNoteDialLabel2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,275,null(),HX_("Shift Note FWD by (Step)",21,fd,77,43),null(),null());
HXLINE(1087)		 ::flixel::addons::ui::FlxUINumericStepper stepperShiftNoteDialstep =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,290,1,0,-1000,1000,0,null(),null(),null(),null(),null());
HXLINE(1088)		stepperShiftNoteDialstep->name = HX_("song_shiftnotems",30,cf,6a,8b);
HXLINE(1089)		 ::flixel::text::FlxText shiftNoteDialLabel3 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,305,null(),HX_("Shift Note FWD by (ms)",e7,2a,fe,de),null(),null());
HXLINE(1090)		 ::flixel::addons::ui::FlxUINumericStepper stepperShiftNoteDialms =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,320,1,0,-1000,1000,2,null(),null(),null(),null(),null());
HXLINE(1091)		stepperShiftNoteDialms->name = HX_("song_shiftnotems",30,cf,6a,8b);
HXLINE(1093)		 ::flixel::ui::FlxButton shiftNoteButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,335,HX_("Shift",62,5c,50,0f), ::Dynamic(new _hx_Closure_5(_gthis,stepperShiftNoteDialstep,stepperShiftNoteDial,stepperShiftNoteDialms)));
HXLINE(1098)		::String library = null();
HXDLIN(1098)		::Array< ::String > characters = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/characterList",c2,06,08,81) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(1099)		::String library1 = null();
HXDLIN(1099)		::Array< ::String > gfVersions = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/gfVersionList",d2,b9,ee,44) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXLINE(1100)		::String library2 = null();
HXDLIN(1100)		::Array< ::String > stages = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/stageList",d7,5a,0b,5e) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library2));
HXLINE(1101)		::String library3 = null();
HXDLIN(1101)		::Array< ::String > noteStyles = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/noteStyleList",f8,6d,9e,7c) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library3));
HXLINE(1103)		 ::flixel::addons::ui::FlxUIDropDownMenu player1DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_6(characters)),null(),null(),null(),null());
HXLINE(1107)		player1DropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE(1109)		 ::flixel::text::FlxText player1Label =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,80,64,HX_("Player 1",d2,1d,05,22),null(),null());
HXLINE(1111)		 ::flixel::addons::ui::FlxUIDropDownMenu player2DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,140,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_7(characters)),null(),null(),null(),null());
HXLINE(1115)		player2DropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXLINE(1117)		 ::flixel::text::FlxText player2Label =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,140,80,64,HX_("Player 2",d3,1d,05,22),null(),null());
HXLINE(1119)		 ::flixel::addons::ui::FlxUIDropDownMenu gfVersionDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,200,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(gfVersions,true), ::Dynamic(new _hx_Closure_8(gfVersions)),null(),null(),null(),null());
HXLINE(1123)		gfVersionDropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) ));
HXLINE(1125)		 ::flixel::text::FlxText gfVersionLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,180,64,HX_("Girlfriend",da,95,f9,8e),null(),null());
HXLINE(1127)		 ::flixel::addons::ui::FlxUIDropDownMenu stageDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,140,200,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(stages,true), ::Dynamic(new _hx_Closure_9(stages)),null(),null(),null(),null());
HXLINE(1131)		stageDropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
HXLINE(1133)		 ::flixel::text::FlxText stageLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,140,180,64,HX_("Stage",9e,da,38,17),null(),null());
HXLINE(1135)		 ::flixel::addons::ui::FlxUIDropDownMenu noteStyleDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,300,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(noteStyles,true), ::Dynamic(new _hx_Closure_10(noteStyles)),null(),null(),null(),null());
HXLINE(1139)		noteStyleDropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) ));
HXLINE(1141)		 ::flixel::text::FlxText noteStyleLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,280,64,HX_("Note Skin",6b,8d,33,f0),null(),null());
HXLINE(1144)		 ::flixel::addons::ui::FlxUI tab_group_song =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1145)		tab_group_song->name = HX_("Song",f5,4f,31,37);
HXLINE(1146)		tab_group_song->add(UI_songTitle).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1147)		tab_group_song->add(restart).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1148)		tab_group_song->add(check_voices).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1150)		tab_group_song->add(saveButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1151)		tab_group_song->add(reloadSong1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1152)		tab_group_song->add(reloadSongJson).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1153)		tab_group_song->add(loadAutosaveBtn).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1154)		tab_group_song->add(stepperBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1155)		tab_group_song->add(stepperBPMLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1156)		tab_group_song->add(stepperSpeed).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1157)		tab_group_song->add(stepperSpeedLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1158)		tab_group_song->add(stepperVocalVol).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1159)		tab_group_song->add(stepperVocalVolLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1160)		tab_group_song->add(stepperSongVol).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1161)		tab_group_song->add(stepperSongVolLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1162)		tab_group_song->add(shiftNoteDialLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1163)		tab_group_song->add(stepperShiftNoteDial).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1164)		tab_group_song->add(shiftNoteDialLabel2).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1165)		tab_group_song->add(stepperShiftNoteDialstep).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1166)		tab_group_song->add(shiftNoteDialLabel3).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1167)		tab_group_song->add(stepperShiftNoteDialms).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1168)		tab_group_song->add(shiftNoteButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1171)		 ::flixel::addons::ui::FlxUI tab_group_assets =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1172)		tab_group_assets->name = HX_("Assets",a3,bc,97,80);
HXLINE(1173)		tab_group_assets->add(noteStyleDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1174)		tab_group_assets->add(noteStyleLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1175)		tab_group_assets->add(gfVersionDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1176)		tab_group_assets->add(gfVersionLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1177)		tab_group_assets->add(stageDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1178)		tab_group_assets->add(stageLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1179)		tab_group_assets->add(player1DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1180)		tab_group_assets->add(player2DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1181)		tab_group_assets->add(player1Label).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1182)		tab_group_assets->add(player2Label).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1184)		this->UI_box->addGroup(tab_group_song);
HXLINE(1185)		this->UI_box->addGroup(tab_group_assets);
HXLINE(1187)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,280,0,1,1);
HXLINE(1188)		this->add(this->camFollow);
HXLINE(1190)		::flixel::FlxG_obj::camera->follow(this->camFollow,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSongUI,(void))

void ChartingState_obj::addSectionUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUINumericStepper,stepperCopy) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1211_addSectionUI)
HXLINE(1211)			 ::ChartingState _gthis1 = _gthis;
HXDLIN(1211)			_gthis1->copySection(::Std_obj::_hx_int(stepperCopy->value));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1217_addSectionUI)
HXLINE(1219)			 ::Dynamic secit =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection);
HXLINE(1221)			if (::hx::IsNotNull( secit )) {
HXLINE(1223)				::Array< ::Dynamic> newSwaps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1225)				{
HXLINE(1225)					int _g = 0;
HXDLIN(1225)					int _g1 = ( (::Array< ::Dynamic>)(secit->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length;
HXDLIN(1225)					while((_g < _g1)){
HXLINE(1225)						_g = (_g + 1);
HXDLIN(1225)						int i = (_g - 1);
HXLINE(1227)						::cpp::VirtualArray note = ( (::cpp::VirtualArray)( ::Dynamic(secit->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i)) );
HXLINE(1228)						if (::hx::IsLess( note->__get(1),4 )) {
HXLINE(1229)							::cpp::VirtualArray note1 = note;
HXDLIN(1229)							int swapSection = 1;
HXDLIN(1229)							note1->set(swapSection,(note1->__get(swapSection) + 4));
            						}
            						else {
HXLINE(1231)							::cpp::VirtualArray note1 = note;
HXDLIN(1231)							int swapSection = 1;
HXDLIN(1231)							note1->set(swapSection,(note1->__get(swapSection) - 4));
            						}
HXLINE(1232)						newSwaps->push(note);
            					}
            				}
HXLINE(1235)				secit->__SetField(HX_("sectionNotes",1c,c8,a7,fe),newSwaps,::hx::paccDynamic);
HXLINE(1237)				{
HXLINE(1237)					int _g2 = 0;
HXDLIN(1237)					::Array< ::Dynamic> _g3 = _gthis->shownNotes;
HXDLIN(1237)					while((_g2 < _g3->length)){
HXLINE(1237)						 ::Note i = _g3->__get(_g2).StaticCast<  ::Note >();
HXDLIN(1237)						_g2 = (_g2 + 1);
HXLINE(1239)						{
HXLINE(1239)							int _g = 0;
HXDLIN(1239)							while((_g < newSwaps->length)){
HXLINE(1239)								::cpp::VirtualArray ii = ::cpp::VirtualArray( newSwaps->__get(_g));
HXDLIN(1239)								_g = (_g + 1);
HXLINE(1240)								bool swapSection;
HXDLIN(1240)								if (::hx::IsEq( i->strumTime,ii->__get(0) )) {
HXLINE(1240)									swapSection = (i->noteData == ::hx::Mod(ii->__get(1),4));
            								}
            								else {
HXLINE(1240)									swapSection = false;
            								}
HXDLIN(1240)								if (swapSection) {
HXLINE(1242)									i->set_x(( (Float)(::Math_obj::floor((( (Float)(ii->__get(1)) ) * ( (Float)(_gthis->GRID_SIZE) )))) ));
HXLINE(1244)									Float swapSection = _gthis->getYfromStrum(( (Float)(ii->__get(0)) ));
HXDLIN(1244)									i->set_y(( (Float)(::Math_obj::floor((swapSection * _gthis->zoomFactor))) ));
HXLINE(1245)									bool swapSection1;
HXDLIN(1245)									if ((i->sustainLength > 0)) {
HXLINE(1245)										swapSection1 = ::hx::IsNotNull( i->noteCharterObject );
            									}
            									else {
HXLINE(1245)										swapSection1 = false;
            									}
HXDLIN(1245)									if (swapSection1) {
HXLINE(1246)										i->noteCharterObject->set_x((i->x + (( (Float)(_gthis->GRID_SIZE) ) / ( (Float)(2) ))));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1251_addSectionUI)
HXLINE(1252)			 ::Dynamic sect = _gthis->lastUpdatedSection;
HXLINE(1256)			if (::hx::IsNull( sect )) {
HXLINE(1257)				return;
            			}
HXLINE(1259)			sect->__SetField(HX_("mustHitSection",3b,5f,87,62),_gthis->check_mustHitSection->checked,::hx::paccDynamic);
HXLINE(1261)			{
HXLINE(1261)				 ::Dynamic filter = null();
HXDLIN(1261)				 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->sectionRenderes->members,filter);
HXDLIN(1261)				while(i->hasNext()){
HXLINE(1261)					 ::SectionRender i1 = i->next().StaticCast<  ::SectionRender >();
HXLINE(1263)					if (::hx::IsEq( i1->section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),sect->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(1265)						Float cachedY = i1->icon->y;
HXLINE(1266)						_gthis->remove(i1->icon,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1267)						 ::flixel::FlxSprite sectionicon;
HXDLIN(1267)						if (_gthis->check_mustHitSection->checked) {
HXLINE(1267)							sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            						}
            						else {
HXLINE(1267)							sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            						}
HXLINE(1268)						sectionicon->set_x(( (Float)(-95) ));
HXLINE(1269)						sectionicon->set_y(cachedY);
HXLINE(1270)						sectionicon->setGraphicSize(0,45);
HXLINE(1272)						i1->icon = sectionicon;
HXLINE(1273)						i1->lastUpdated = ( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(1275)						_gthis->add(sectionicon).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1288_addSectionUI)
HXLINE(1289)			 ::Dynamic section = _gthis->getSectionByTime(::Conductor_obj::songPosition,null());
HXLINE(1291)			if (::hx::IsNull( section )) {
HXLINE(1292)				return;
            			}
HXLINE(1294)			_gthis->check_mustHitSection->set_checked(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(1295)			_gthis->check_CPUAltAnim->set_checked(( (bool)(section->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) ));
HXLINE(1296)			_gthis->check_playerAltAnim->set_checked(( (bool)(section->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) ));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1299_addSectionUI)
HXLINE(1300)			::PlayState_obj::SONG = ::ChartingState_obj::_song;
HXLINE(1301)			{
HXLINE(1301)				 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1301)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE(1302)			if (!(::PlayState_obj::isSM)) {
HXLINE(1303)				 ::flixel::_hx_system::FlxSound _this = _gthis->vocals;
HXDLIN(1303)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE(1304)			::PlayState_obj::startTime = ( (Float)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) );
HXLINE(1305)			while((_gthis->curRenderedNotes->members->get_length() > 0)){
HXLINE(1307)				_gthis->curRenderedNotes->remove(Dynamic( _gthis->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            			}
HXLINE(1310)			while((_gthis->curRenderedSustains->members->get_length() > 0)){
HXLINE(1312)				_gthis->curRenderedSustains->remove(Dynamic( _gthis->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            			}
HXLINE(1315)			while((_gthis->sectionRenderes->members->get_length() > 0)){
HXLINE(1317)				_gthis->sectionRenderes->remove(Dynamic( _gthis->sectionRenderes->members->__get(0)).StaticCast<  ::SectionRender >(),true).StaticCast<  ::SectionRender >();
            			}
HXLINE(1319)			{
HXLINE(1319)				 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(1319)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1319)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1201_addSectionUI)
HXLINE(1200)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1202)		 ::flixel::addons::ui::FlxUI tab_group_section =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1203)		tab_group_section->name = HX_("Section",c5,2d,29,2b);
HXLINE(1206)		 ::flixel::addons::ui::FlxUINumericStepper stepperCopy =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,110,132,1,1,-999,999,0,null(),null(),null(),null(),null());
HXLINE(1207)		 ::flixel::text::FlxText stepperCopyLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,174,132,null(),HX_("sections back",99,e8,ca,16),null(),null());
HXLINE(1209)		 ::flixel::ui::FlxButton copyButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,130,HX_("Copy last section",46,61,ca,99), ::Dynamic(new _hx_Closure_0(_gthis,stepperCopy)));
HXLINE(1214)		 ::flixel::ui::FlxButton clearSectionButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,150,HX_("Clear Section",12,08,13,f3),this->clearSection_dyn());
HXLINE(1216)		 ::flixel::ui::FlxButton swapSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,170,HX_("Swap Section",58,33,c1,af), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(1251)		this->check_mustHitSection =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,30,null(),null(),HX_("Camera Points to Player?",9b,4c,4b,86),100,null(), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE(1279)		this->check_mustHitSection->set_checked(true);
HXLINE(1282)		this->check_CPUAltAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,340,null(),null(),HX_("CPU Alternate Animation",46,fd,80,2c),100,null(),null());
HXLINE(1283)		this->check_CPUAltAnim->name = HX_("check_CPUAltAnim",09,09,2a,93);
HXLINE(1285)		this->check_playerAltAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,180,340,null(),null(),HX_("Player Alternate Animation",3f,b2,0b,ac),100,null(),null());
HXLINE(1286)		this->check_playerAltAnim->name = HX_("check_playerAltAnim",82,25,63,ff);
HXLINE(1288)		 ::flixel::ui::FlxButton refresh =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,60,HX_("Refresh Section",60,26,aa,d5), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE(1299)		 ::flixel::ui::FlxButton startSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,85,HX_("Play Here",9c,91,40,cc), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE(1322)		tab_group_section->add(refresh).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1323)		tab_group_section->add(startSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1326)		tab_group_section->add(this->check_mustHitSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1327)		tab_group_section->add(this->check_CPUAltAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1328)		tab_group_section->add(this->check_playerAltAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1330)		tab_group_section->add(clearSectionButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1331)		tab_group_section->add(swapSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1333)		this->UI_box->addGroup(tab_group_section);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSectionUI,(void))

void ChartingState_obj::goToSection(int section){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1341_goToSection)
HXLINE(1342)		int beat = (section * 4);
HXLINE(1343)		 ::TimingStruct data = ::TimingStruct_obj::getTimingAtBeat(( (Float)(beat) ));
HXLINE(1345)		if (::hx::IsNull( data )) {
HXLINE(1346)			return;
            		}
HXLINE(1348)		::flixel::FlxG_obj::sound->music->set_time(((data->startTime + ((( (Float)(beat) ) - data->startBeat) / (data->bpm / ( (Float)(60) )))) * ( (Float)(1000) )));
HXLINE(1349)		if (!(::PlayState_obj::isSM)) {
HXLINE(1350)			this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            		}
HXLINE(1351)		this->curSection = section;
HXLINE(1354)		if ((::flixel::FlxG_obj::sound->music->_time < 0)) {
HXLINE(1355)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            		}
            		else {
HXLINE(1356)			if ((::flixel::FlxG_obj::sound->music->_time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(1357)				::flixel::FlxG_obj::sound->music->set_time(::flixel::FlxG_obj::sound->music->_length);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,goToSection,(void))

void ChartingState_obj::addNoteUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1377_addNoteUI)
HXLINE(1377)			if (::hx::IsNotNull( _gthis->curSelectedNote )) {
HXLINE(1379)				 ::Dynamic filter = null();
HXDLIN(1379)				 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->selectedBoxes->members,filter);
HXDLIN(1379)				while(i->hasNext()){
HXLINE(1379)					 ::ChartingBox i1 = i->next().StaticCast<  ::ChartingBox >();
HXLINE(1381)					i1->connectedNoteData->set(3,_gthis->check_naltAnim->checked);
HXLINE(1383)					{
HXLINE(1383)						int _g = 0;
HXDLIN(1383)						::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1383)						while((_g < _g1->length)){
HXLINE(1383)							 ::Dynamic ii = _g1->__get(_g);
HXDLIN(1383)							_g = (_g + 1);
HXLINE(1385)							{
HXLINE(1385)								int _g2 = 0;
HXDLIN(1385)								::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1385)								while((_g2 < _g3->length)){
HXLINE(1385)									::cpp::VirtualArray n = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(1385)									_g2 = (_g2 + 1);
HXLINE(1386)									bool _hx_tmp;
HXDLIN(1386)									if (::hx::IsEq( n->__get(0),i1->connectedNoteData->__get(0) )) {
HXLINE(1386)										_hx_tmp = ::hx::IsEq( n->__get(1),i1->connectedNoteData->__get(1) );
            									}
            									else {
HXLINE(1386)										_hx_tmp = false;
            									}
HXDLIN(1386)									if (_hx_tmp) {
HXLINE(1387)										n->set(3,i1->connectedNoteData->__get(3));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1363_addNoteUI)
HXLINE(1362)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1364)		this->tab_group_note =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1365)		this->tab_group_note->name = HX_("Note",12,44,e3,33);
HXLINE(1367)		this->writingNotesText =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,20,100,0,HX_("",00,00,00,00),null(),null());
HXLINE(1368)		this->writingNotesText->setFormat(HX_("Arial",23,09,b6,b8),20,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1370)		this->stepperSusLength =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,10,(::Conductor_obj::stepCrochet / ( (Float)(2) )),0,0,((::Conductor_obj::stepCrochet * ( (Float)(16) )) * ( (Float)(4) )),null(),null(),null(),null(),null(),null());
HXLINE(1371)		this->stepperSusLength->set_value(( (Float)(0) ));
HXLINE(1372)		this->stepperSusLength->name = HX_("note_susLength",8a,6b,51,4b);
HXLINE(1374)		this->check_naltAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,150,null(),null(),HX_("Toggle Alternative Animation",65,67,17,d5),100,null(),null());
HXLINE(1375)		this->check_naltAnim->callback =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(1393)		 ::flixel::text::FlxText stepperSusLengthLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,10,null(),HX_("Note Sustain Length",51,bb,65,f7),null(),null());
HXLINE(1395)		 ::flixel::ui::FlxButton applyLength =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,100,HX_("Apply Data",5c,22,e4,a8),null());
HXLINE(1397)		this->tab_group_note->add(this->stepperSusLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1398)		this->tab_group_note->add(stepperSusLengthLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1399)		this->tab_group_note->add(applyLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1400)		this->tab_group_note->add(this->check_naltAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1402)		this->UI_box->addGroup(this->tab_group_note);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addNoteUI,(void))

void ChartingState_obj::pasteNotesFromArray(::Array< ::Dynamic> array,::hx::Null< bool >  __o_fromStrum){
            		bool fromStrum = __o_fromStrum.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1420_pasteNotesFromArray)
HXDLIN(1420)		int _g = 0;
HXDLIN(1420)		while((_g < array->length)){
HXDLIN(1420)			::cpp::VirtualArray i = ::cpp::VirtualArray( array->__get(_g));
HXDLIN(1420)			_g = (_g + 1);
HXLINE(1422)			Float strum = ( (Float)(i->__get(0)) );
HXLINE(1423)			if (fromStrum) {
HXLINE(1424)				strum = (strum + ::Conductor_obj::songPosition);
            			}
HXLINE(1425)			int section = 0;
HXLINE(1426)			{
HXLINE(1426)				int _g1 = 0;
HXDLIN(1426)				::Array< ::Dynamic> _g2 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1426)				while((_g1 < _g2->length)){
HXLINE(1426)					 ::Dynamic ii = _g2->__get(_g1);
HXDLIN(1426)					_g1 = (_g1 + 1);
HXLINE(1428)					bool _hx_tmp;
HXDLIN(1428)					if (::hx::IsLessEq( ii->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),strum )) {
HXLINE(1428)						_hx_tmp = ::hx::IsGreater( ii->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic),strum );
            					}
            					else {
HXLINE(1428)						_hx_tmp = false;
            					}
HXDLIN(1428)					if (_hx_tmp) {
HXLINE(1432)						::Array< Float > newData = ::Array_obj< Float >::__new(5)->init(0,strum)->init(1,i->__get(1))->init(2,i->__get(2))->init(3,i->__get(3))->init(4,i->__get(4));
HXLINE(1433)						( (::Array< ::Dynamic>)(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(newData);
HXLINE(1435)						::cpp::VirtualArray thing = ( (::cpp::VirtualArray)( ::Dynamic(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem((( (::Array< ::Dynamic>)(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length - 1))) );
HXLINE(1437)						 ::Note note =  ::Note_obj::__alloc( HX_CTX ,strum,::Math_obj::floor(::hx::Mod(i->__get(1),4)),null(),false,true,i->__get(3),i->__get(4));
HXLINE(1438)						note->rawNoteData = ( (int)(i->__get(1)) );
HXLINE(1439)						note->sustainLength = ( (Float)(i->__get(2)) );
HXLINE(1440)						note->setGraphicSize(::Math_obj::floor(( (Float)(this->GRID_SIZE) )),::Math_obj::floor(( (Float)(this->GRID_SIZE) )));
HXLINE(1441)						note->updateHitbox();
HXLINE(1442)						note->set_x(( (Float)(::Math_obj::floor((( (Float)(i->__get(1)) ) * ( (Float)(this->GRID_SIZE) )))) ));
HXLINE(1444)						note->charterSelected = true;
HXLINE(1447)						Float _hx_tmp = this->getYfromStrum(strum);
HXDLIN(1447)						note->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(1449)						 ::ChartingBox box =  ::ChartingBox_obj::__alloc( HX_CTX ,note->x,note->y,note);
HXLINE(1450)						box->connectedNoteData = thing;
HXLINE(1451)						this->selectedBoxes->add(box).StaticCast<  ::ChartingBox >();
HXLINE(1453)						this->curRenderedNotes->add(note).StaticCast<  ::Note >();
HXLINE(1455)						this->pastedNotes->push(note);
HXLINE(1457)						if ((note->sustainLength > 0)) {
HXLINE(1459)							 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(note->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))),(note->y + this->GRID_SIZE),null());
HXLINE(1460)							Float sustainVis1 = this->getYfromStrum((note->strumTime + note->sustainLength));
HXLINE(1459)							 ::flixel::FlxSprite sustainVis2 = sustainVis->makeGraphic(8,::Math_obj::floor(((sustainVis1 * this->zoomFactor) - note->y)),null(),null(),null());
HXLINE(1462)							note->noteCharterObject = sustainVis2;
HXLINE(1464)							this->curRenderedSustains->add(sustainVis2).StaticCast<  ::flixel::FlxSprite >();
            						}
HXLINE(1467)						continue;
            					}
HXLINE(1469)					section = (section + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,pasteNotesFromArray,(void))

void ChartingState_obj::loadSong(::String daSong){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1527_loadSong)
HXLINE(1528)			if (!(::PlayState_obj::isSM)) {
HXLINE(1529)				_gthis->vocals->pause();
            			}
HXLINE(1530)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(1531)			_gthis->goToSection(0);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1474_loadSong)
HXLINE(1473)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1475)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1477)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1477)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1481)		if (::PlayState_obj::isSM) {
HXLINE(1484)			 ::haxe::io::Bytes bytes = ::sys::io::File_obj::getBytes(((::PlayState_obj::pathToSm + HX_("/",2f,00,00,00)) + ::PlayState_obj::sm->header->MUSIC));
HXLINE(1485)			 ::openfl::media::Sound sound =  ::openfl::media::Sound_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1486)			sound->loadCompressedDataFromByteArray(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytesData(bytes->b),bytes->length);
HXLINE(1487)			::flixel::FlxG_obj::sound->playMusic(sound,null(),null(),null());
            		}
            		else {
HXLINE(1490)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1490)			::String songLowercase = ::StringTools_obj::replace(daSong,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1490)			::String _hx_switch_0 = songLowercase;
            			if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1490)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1490)				goto _hx_goto_73;
            			}
            			if (  (_hx_switch_0==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1490)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1490)				goto _hx_goto_73;
            			}
            			if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1490)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1490)				goto _hx_goto_73;
            			}
            			_hx_goto_73:;
HXDLIN(1490)			_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),((Float)0.6),null(),null());
            		}
HXLINE(1495)		if (::PlayState_obj::isSM) {
HXLINE(1496)			::ChartingState_obj::_song = ::Song_obj::conversionChecks(::Song_obj::loadFromJsonRAW(::sys::io::File_obj::getContent((::PlayState_obj::pathToSm + HX_("/converted.json",73,2b,b3,66)))));
            		}
            		else {
HXLINE(1499)			::String songFormat = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE(1500)			::String _hx_switch_1 = songFormat;
            			if (  (_hx_switch_1==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE(1501)				songFormat = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN(1501)				goto _hx_goto_74;
            			}
            			if (  (_hx_switch_1==HX_("M.I.L.F",1e,4e,41,0d)) ){
HXLINE(1503)				songFormat = HX_("Milf",f6,78,35,33);
HXDLIN(1503)				goto _hx_goto_74;
            			}
            			if (  (_hx_switch_1==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE(1502)				songFormat = HX_("Philly",48,eb,f2,23);
HXDLIN(1502)				goto _hx_goto_74;
            			}
            			_hx_goto_74:;
HXLINE(1506)			::String poop = ::Highscore_obj::formatSong(songFormat,::PlayState_obj::storyDifficulty);
HXLINE(1508)			::ChartingState_obj::_song = ::Song_obj::conversionChecks(::Song_obj::loadFromJson(poop,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) )));
            		}
HXLINE(1513)		if (::PlayState_obj::isSM) {
HXLINE(1514)			this->vocals = null();
            		}
            		else {
HXLINE(1516)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1516)			::String songLowercase = ::StringTools_obj::replace(daSong,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1516)			::String _hx_switch_2 = songLowercase;
            			if (  (_hx_switch_2==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1516)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1516)				goto _hx_goto_75;
            			}
            			if (  (_hx_switch_2==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1516)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1516)				goto _hx_goto_75;
            			}
            			if (  (_hx_switch_2==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1516)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1516)				goto _hx_goto_75;
            			}
            			_hx_goto_75:;
HXDLIN(1516)			this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
            		}
HXLINE(1520)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1522)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(1523)		if (!(::PlayState_obj::isSM)) {
HXLINE(1524)			this->vocals->pause();
            		}
HXLINE(1526)		::flixel::FlxG_obj::sound->music->onComplete =  ::Dynamic(new _hx_Closure_0(_gthis));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadSong,(void))

void ChartingState_obj::generateUI(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1536_generateUI)
HXLINE(1537)		while((this->bullshitUI->members->get_length() > 0)){
HXLINE(1539)			this->bullshitUI->remove(Dynamic( this->bullshitUI->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE(1543)		 ::flixel::text::FlxText title =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->UI_box->x + 20),(this->UI_box->y + 20),0,null(),null(),null());
HXLINE(1544)		this->bullshitUI->add(title).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,generateUI,(void))

void ChartingState_obj::getEvent(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1556_getEvent)
HXDLIN(1556)		if ((id == HX_("click_check_box",dd,c1,1e,a8))) {
HXLINE(1558)			 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(sender) );
HXLINE(1559)			::String label = check->getLabel()->text;
HXLINE(1560)			::String _hx_switch_0 = label;
            			if (  (_hx_switch_0==HX_("CPU Alternate Animation",46,fd,80,2c)) ){
HXLINE(1563)				this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("CPUAltAnim",b2,2f,f2,ef),check->checked,::hx::paccDynamic);
HXDLIN(1563)				goto _hx_goto_80;
            			}
            			if (  (_hx_switch_0==HX_("Player Alternate Animation",3f,b2,0b,ac)) ){
HXLINE(1565)				this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("playerAltAnim",79,ce,6b,5d),check->checked,::hx::paccDynamic);
HXDLIN(1565)				goto _hx_goto_80;
            			}
            			_hx_goto_80:;
            		}
            		else {
HXLINE(1568)			bool _hx_tmp;
HXDLIN(1568)			if ((id == HX_("change_numeric_stepper",50,0a,cc,bb))) {
HXLINE(1568)				_hx_tmp = ::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUINumericStepper >());
            			}
            			else {
HXLINE(1568)				_hx_tmp = false;
            			}
HXDLIN(1568)			if (_hx_tmp) {
HXLINE(1570)				 ::flixel::addons::ui::FlxUINumericStepper nums = ( ( ::flixel::addons::ui::FlxUINumericStepper)(sender) );
HXLINE(1571)				::String wname = nums->name;
HXLINE(1574)				::String _hx_switch_1 = wname;
            				if (  (_hx_switch_1==HX_("divisions",a6,2a,2c,7f)) ){
HXLINE(1670)					this->subDivisions = nums->value;
HXLINE(1671)					this->updateGrid();
HXLINE(1669)					goto _hx_goto_81;
            				}
            				if (  (_hx_switch_1==HX_("note_susLength",8a,6b,51,4b)) ){
HXLINE(1644)					if (::hx::IsNull( this->curSelectedNote )) {
HXLINE(1645)						return;
            					}
HXLINE(1647)					if ((nums->value <= 0)) {
HXLINE(1648)						nums->set_value(( (Float)(0) ));
            					}
HXLINE(1649)					this->curSelectedNote->set(2,nums->value);
HXLINE(1650)					this->updateGrid();
HXLINE(1643)					goto _hx_goto_81;
            				}
            				if (  (_hx_switch_1==HX_("section_bpm",45,60,97,44)) ){
HXLINE(1653)					if ((nums->value <= ((Float)0.1))) {
HXLINE(1654)						nums->set_value(((Float)0.1));
            					}
HXLINE(1655)					this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("bpm",df,be,4a,00),::Std_obj::_hx_int(nums->value),::hx::paccDynamic);
HXLINE(1656)					this->updateGrid();
HXLINE(1652)					goto _hx_goto_81;
            				}
            				if (  (_hx_switch_1==HX_("section_length",40,57,01,c1)) ){
HXLINE(1577)					if ((nums->value <= 4)) {
HXLINE(1578)						nums->set_value(( (Float)(4) ));
            					}
HXLINE(1579)					this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("lengthInSteps",3c,ed,41,db),::Std_obj::_hx_int(nums->value),::hx::paccDynamic);
HXLINE(1580)					this->updateGrid();
HXLINE(1576)					goto _hx_goto_81;
            				}
            				if (  (_hx_switch_1==HX_("song_bpm",35,36,15,42)) ){
HXLINE(1588)					if ((nums->value <= 0)) {
HXLINE(1589)						nums->set_value(( (Float)(1) ));
            					}
HXLINE(1590)					::ChartingState_obj::_song->__SetField(HX_("bpm",df,be,4a,00),nums->value,::hx::paccDynamic);
HXLINE(1592)					if ((Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >()->type != HX_("BPM Change",d1,e8,85,d1))) {
HXLINE(1593)						::lime::app::Application_obj::current->_hx___window->alert(HX_("i'm crying, first event isn't a bpm change. fuck you",3a,f3,2b,34),null());
            					}
            					else {
HXLINE(1596)						Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >()->value = nums->value;
HXLINE(1597)						this->regenerateLines();
            					}
HXLINE(1600)					::TimingStruct_obj::clearTimings();
HXLINE(1602)					int currentIndex = 0;
HXLINE(1603)					{
HXLINE(1603)						int _g = 0;
HXDLIN(1603)						::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(1603)						while((_g < _g1->length)){
HXLINE(1603)							 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(1603)							_g = (_g + 1);
HXLINE(1605)							 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE(1606)							::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE(1607)							Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE(1608)							Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE(1611)							if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE(1613)								Float beat = pos;
HXLINE(1615)								Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1617)								::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE(1619)								if ((currentIndex != 0)) {
HXLINE(1621)									 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE(1622)									data->endBeat = beat;
HXLINE(1623)									data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE(1624)									Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(1625)									::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE(1626)									::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            								}
HXLINE(1629)								currentIndex = (currentIndex + 1);
            							}
            						}
            					}
HXLINE(1634)					{
HXLINE(1634)						int _g2 = 0;
HXDLIN(1634)						::Array< ::Dynamic> _g3 = ::TimingStruct_obj::AllTimings;
HXDLIN(1634)						while((_g2 < _g3->length)){
HXLINE(1634)							 ::TimingStruct i = _g3->__get(_g2).StaticCast<  ::TimingStruct >();
HXDLIN(1634)							_g2 = (_g2 + 1);
            						}
            					}
HXLINE(1637)					this->recalculateAllSectionTimes();
HXLINE(1639)					this->regenerateLines();
HXLINE(1641)					this->poggers();
HXLINE(1587)					goto _hx_goto_81;
            				}
            				if (  (_hx_switch_1==HX_("song_instvol",63,a1,f2,af)) ){
HXLINE(1665)					if ((nums->value <= ((Float)0.1))) {
HXLINE(1666)						nums->set_value(((Float)0.1));
            					}
HXLINE(1667)					::flixel::FlxG_obj::sound->music->set_volume(nums->value);
HXLINE(1664)					goto _hx_goto_81;
            				}
            				if (  (_hx_switch_1==HX_("song_speed",5d,10,41,a4)) ){
HXLINE(1583)					if ((nums->value <= 0)) {
HXLINE(1584)						nums->set_value(( (Float)(0) ));
            					}
HXLINE(1585)					::ChartingState_obj::_song->__SetField(HX_("speed",87,97,69,81),nums->value,::hx::paccDynamic);
HXLINE(1582)					goto _hx_goto_81;
            				}
            				if (  (_hx_switch_1==HX_("song_vocalvol",a8,3c,96,f8)) ){
HXLINE(1659)					if ((nums->value <= ((Float)0.1))) {
HXLINE(1660)						nums->set_value(((Float)0.1));
            					}
HXLINE(1661)					if (!(::PlayState_obj::isSM)) {
HXLINE(1662)						this->vocals->set_volume(nums->value);
            					}
HXLINE(1658)					goto _hx_goto_81;
            				}
            				_hx_goto_81:;
            			}
            		}
            	}


void ChartingState_obj::poggers(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1690_poggers)
HXLINE(1691)		::Array< ::Dynamic> notes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1693)		{
HXLINE(1693)			int _g = 0;
HXDLIN(1693)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1693)			while((_g < _g1->length)){
HXLINE(1693)				 ::Dynamic section = _g1->__get(_g);
HXDLIN(1693)				_g = (_g + 1);
HXLINE(1696)				::Array< ::Dynamic> removed = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1698)				{
HXLINE(1698)					int _g2 = 0;
HXDLIN(1698)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1698)					while((_g2 < _g3->length)){
HXLINE(1698)						::cpp::VirtualArray note = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(1698)						_g2 = (_g2 + 1);
HXLINE(1701)						 ::Dynamic old = note->__get(0);
HXLINE(1702)						note->set(0,::TimingStruct_obj::getTimeFromBeat(( (Float)(note->__get(4)) )));
HXLINE(1703)						note->set(2,::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(( (Float)(note->__get(2)) ))));
HXLINE(1704)						if (::hx::IsLess( note->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(1706)							notes->push(note);
HXLINE(1707)							removed->push(note);
            						}
HXLINE(1709)						if (::hx::IsGreater( note->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) )) {
HXLINE(1711)							notes->push(note);
HXLINE(1712)							removed->push(note);
            						}
            					}
            				}
HXLINE(1716)				{
HXLINE(1716)					int _g4 = 0;
HXDLIN(1716)					while((_g4 < removed->length)){
HXLINE(1716)						::cpp::VirtualArray i = ::cpp::VirtualArray( removed->__get(_g4));
HXDLIN(1716)						_g4 = (_g4 + 1);
HXLINE(1718)						( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
            					}
            				}
            			}
            		}
HXLINE(1722)		{
HXLINE(1722)			int _g2 = 0;
HXDLIN(1722)			::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1722)			while((_g2 < _g3->length)){
HXLINE(1722)				 ::Dynamic section = _g3->__get(_g2);
HXDLIN(1722)				_g2 = (_g2 + 1);
HXLINE(1725)				::Array< ::Dynamic> saveRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1727)				{
HXLINE(1727)					int _g = 0;
HXDLIN(1727)					while((_g < notes->length)){
HXLINE(1727)						::cpp::VirtualArray i = ::cpp::VirtualArray( notes->__get(_g));
HXDLIN(1727)						_g = (_g + 1);
HXLINE(1729)						bool _hx_tmp;
HXDLIN(1729)						if (::hx::IsGreaterEq( i->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(1729)							_hx_tmp = ::hx::IsLess( i->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            						}
            						else {
HXLINE(1729)							_hx_tmp = false;
            						}
HXDLIN(1729)						if (_hx_tmp) {
HXLINE(1731)							saveRemove->push(i);
HXLINE(1732)							( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(i);
            						}
            					}
            				}
HXLINE(1736)				{
HXLINE(1736)					int _g1 = 0;
HXDLIN(1736)					while((_g1 < saveRemove->length)){
HXLINE(1736)						::cpp::VirtualArray i = ::cpp::VirtualArray( saveRemove->__get(_g1));
HXDLIN(1736)						_g1 = (_g1 + 1);
HXLINE(1737)						notes->remove(i);
            					}
            				}
            			}
            		}
HXLINE(1740)		{
HXLINE(1740)			 ::Dynamic filter = null();
HXDLIN(1740)			 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->curRenderedNotes->members,filter);
HXDLIN(1740)			while(i->hasNext()){
HXLINE(1740)				 ::Note i1 = i->next().StaticCast<  ::Note >();
HXLINE(1742)				i1->strumTime = ::TimingStruct_obj::getTimeFromBeat(i1->beat);
HXLINE(1743)				Float _hx_tmp = this->getYfromStrum(i1->strumTime);
HXDLIN(1743)				i1->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(1744)				i1->sustainLength = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(i1->sustainLength));
HXLINE(1745)				if (::hx::IsNotNull( i1->noteCharterObject )) {
HXLINE(1747)					i1->noteCharterObject->set_y((i1->y + 40));
HXLINE(1748)					 ::flixel::FlxSprite i = i1->noteCharterObject;
HXDLIN(1748)					Float _hx_tmp = this->getYfromStrum((i1->strumTime + i1->sustainLength));
HXDLIN(1748)					i->makeGraphic(8,::Math_obj::floor(((_hx_tmp * this->zoomFactor) - i1->y)),-1,null(),null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,poggers,(void))

Float ChartingState_obj::stepStartTime(int step){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1759_stepStartTime)
HXDLIN(1759)		return ((::Conductor_obj::bpm / (( (Float)(step) ) / ( (Float)(4) ))) / ( (Float)(60) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,stepStartTime,return )

Float ChartingState_obj::sectionStartTime( ::Dynamic __o_customIndex){
            		 ::Dynamic customIndex = __o_customIndex;
            		if (::hx::IsNull(__o_customIndex)) customIndex = -1;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1763_sectionStartTime)
HXLINE(1764)		if (::hx::IsEq( customIndex,-1 )) {
HXLINE(1765)			customIndex = this->curSection;
            		}
HXLINE(1766)		Float daBPM = ::Conductor_obj::bpm;
HXLINE(1767)		Float daPos = ( (Float)(0) );
HXLINE(1768)		{
HXLINE(1768)			int _g = 0;
HXDLIN(1768)			 ::Dynamic _g1 = customIndex;
HXDLIN(1768)			while(::hx::IsLess( _g,_g1 )){
HXLINE(1768)				_g = (_g + 1);
HXDLIN(1768)				int i = (_g - 1);
HXLINE(1770)				daPos = (daPos + (( (Float)(4) ) * (( (Float)(60000) ) / daBPM)));
            			}
            		}
HXLINE(1772)		return daPos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,sectionStartTime,return )

void ChartingState_obj::resizeEverything(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1791_resizeEverything)
HXDLIN(1791)		this->regenerateLines();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,resizeEverything,(void))

void ChartingState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1813_update)
HXLINE(1812)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1814)		if ((::flixel::FlxG_obj::sound->music->_time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(1815)			::flixel::FlxG_obj::sound->music->set_time(::flixel::FlxG_obj::sound->music->_length);
            		}
HXLINE(1817)		this->updateHeads();
HXLINE(1819)		{
HXLINE(1819)			 ::Dynamic filter = null();
HXDLIN(1819)			 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->sectionRenderes->members,filter);
HXDLIN(1819)			while(i->hasNext()){
HXLINE(1819)				 ::SectionRender i1 = i->next().StaticCast<  ::SectionRender >();
HXLINE(1821)				Float diff = (i1->y - this->strumLine->y);
HXLINE(1822)				bool _hx_tmp;
HXDLIN(1822)				if ((diff < 4000)) {
HXLINE(1822)					_hx_tmp = (diff >= -4000);
            				}
            				else {
HXLINE(1822)					_hx_tmp = false;
            				}
HXDLIN(1822)				if (_hx_tmp) {
HXLINE(1824)					i1->set_active(true);
HXLINE(1825)					i1->set_visible(true);
            				}
            				else {
HXLINE(1829)					i1->set_active(false);
HXLINE(1830)					i1->set_visible(false);
            				}
            			}
            		}
HXLINE(1834)		this->shownNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1836)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1838)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(1842)				::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,this->speed);
HXLINE(1843)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1847)					bool _hx_tmp;
HXDLIN(1847)					if (::hx::IsNotNull( this->vocals )) {
HXLINE(1847)						_hx_tmp = (this->vocals->_length > 0);
            					}
            					else {
HXLINE(1847)						_hx_tmp = false;
            					}
HXDLIN(1847)					if (_hx_tmp) {
HXLINE(1849)						::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,this->speed);
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE(1861)		{
HXLINE(1861)			 ::Dynamic filter1 = null();
HXDLIN(1861)			 ::flixel::group::FlxTypedGroupIterator note =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->curRenderedNotes->members,filter1);
HXDLIN(1861)			while(note->hasNext()){
HXLINE(1861)				 ::Note note1 = note->next().StaticCast<  ::Note >();
HXLINE(1863)				Float diff = (note1->strumTime - ::Conductor_obj::songPosition);
HXLINE(1864)				bool _hx_tmp;
HXDLIN(1864)				if ((diff < 8000)) {
HXLINE(1864)					_hx_tmp = (diff >= -8000);
            				}
            				else {
HXLINE(1864)					_hx_tmp = false;
            				}
HXDLIN(1864)				if (_hx_tmp) {
HXLINE(1866)					this->shownNotes->push(note1);
HXLINE(1867)					Float _hx_tmp = this->getYfromStrum(note1->strumTime);
HXDLIN(1867)					note1->set_y((_hx_tmp * this->zoomFactor));
HXLINE(1868)					if ((note1->sustainLength > 0)) {
HXLINE(1870)						if (::hx::IsNotNull( note1->noteCharterObject )) {
HXLINE(1871)							if ((note1->noteCharterObject->y != (note1->y + this->GRID_SIZE))) {
HXLINE(1873)								note1->noteCharterObject->set_y((note1->y + this->GRID_SIZE));
HXLINE(1874)								 ::flixel::FlxSprite note = note1->noteCharterObject;
HXDLIN(1874)								Float _hx_tmp = this->getYfromStrum((note1->strumTime + note1->sustainLength));
HXDLIN(1874)								note->makeGraphic(8,::Math_obj::floor(((_hx_tmp * this->zoomFactor) - note1->y)),-1,null(),null());
            							}
            						}
            					}
HXLINE(1877)					note1->set_active(true);
HXLINE(1878)					note1->set_visible(true);
            				}
            				else {
HXLINE(1882)					note1->set_active(false);
HXLINE(1883)					note1->set_visible(false);
HXLINE(1884)					if ((note1->sustainLength > 0)) {
HXLINE(1886)						if (::hx::IsNotNull( note1->noteCharterObject )) {
HXLINE(1888)							note1->noteCharterObject->set_active(false);
HXLINE(1889)							note1->noteCharterObject->set_visible(false);
            						}
            					}
            				}
            			}
            		}
HXLINE(1895)		{
HXLINE(1895)			int _g = 0;
HXDLIN(1895)			::Array< ::Dynamic> _g1 = this->selectedBoxes->members;
HXDLIN(1895)			while((_g < _g1->length)){
HXLINE(1895)				 ::ChartingBox ii = _g1->__get(_g).StaticCast<  ::ChartingBox >();
HXDLIN(1895)				_g = (_g + 1);
HXLINE(1897)				ii->set_x(ii->connectedNote->x);
HXLINE(1898)				ii->set_y(ii->connectedNote->y);
            			}
            		}
HXLINE(1901)		bool doInput = true;
HXLINE(1903)		{
HXLINE(1903)			int _g2 = 0;
HXDLIN(1903)			::Array< ::Dynamic> _g3 = this->Typeables;
HXDLIN(1903)			while((_g2 < _g3->length)){
HXLINE(1903)				 ::flixel::addons::ui::FlxUIInputText i = _g3->__get(_g2).StaticCast<  ::flixel::addons::ui::FlxUIInputText >();
HXDLIN(1903)				_g2 = (_g2 + 1);
HXLINE(1905)				if (i->hasFocus) {
HXLINE(1906)					doInput = false;
            				}
            			}
            		}
HXLINE(1909)		if (doInput) {
HXLINE(1911)			if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE(1913)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1915)				if (!(::PlayState_obj::isSM)) {
HXLINE(1916)					this->vocals->pause();
            				}
HXLINE(1917)				this->claps->removeRange(0,this->claps->length);
HXLINE(1920)				bool _hx_tmp;
HXDLIN(1920)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1920)				if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE(1920)					_hx_tmp = !(this->waitingForRelease);
            				}
            				else {
HXLINE(1920)					_hx_tmp = false;
            				}
HXDLIN(1920)				if (_hx_tmp) {
HXLINE(1922)					int amount = ::flixel::FlxG_obj::mouse->wheel;
HXLINE(1924)					if ((amount > 0)) {
HXLINE(1925)						amount = 0;
            					}
HXLINE(1927)					Float increase = ( (Float)(0) );
HXLINE(1929)					if ((amount < 0)) {
HXLINE(1930)						increase = ((Float)-0.02);
            					}
            					else {
HXLINE(1932)						increase = ((Float)0.02);
            					}
HXLINE(1935)					 ::ChartingState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1935)					_hx_tmp->zoomFactor = (_hx_tmp->zoomFactor + increase);
HXLINE(1937)					if ((this->zoomFactor > 2)) {
HXLINE(1938)						this->zoomFactor = ( (Float)(2) );
            					}
HXLINE(1940)					if ((this->zoomFactor < ((Float)0.1))) {
HXLINE(1941)						this->zoomFactor = ((Float)0.1);
            					}
HXLINE(1943)					this->resizeEverything();
            				}
            				else {
HXLINE(1947)					int amount = ::flixel::FlxG_obj::mouse->wheel;
HXLINE(1949)					bool _hx_tmp;
HXDLIN(1949)					if ((amount > 0)) {
HXLINE(1949)						_hx_tmp = (this->strumLine->y < 0);
            					}
            					else {
HXLINE(1949)						_hx_tmp = false;
            					}
HXDLIN(1949)					if (_hx_tmp) {
HXLINE(1950)						amount = 0;
            					}
HXLINE(1952)					if (this->doSnapShit) {
HXLINE(1954)						Float increase = ( (Float)(0) );
HXLINE(1955)						Float beats = ( (Float)(0) );
HXLINE(1957)						if ((amount < 0)) {
HXLINE(1959)							increase = (( (Float)(1) ) / this->deezNuts->get_float(this->snap));
HXLINE(1960)							Float beats1 = this->curDecimalBeat;
HXDLIN(1960)							int beats2 = ::Math_obj::floor(((beats1 * this->deezNuts->get_float(this->snap)) + ((Float)0.001)));
HXDLIN(1960)							beats = ((( (Float)(beats2) ) / this->deezNuts->get_float(this->snap)) + increase);
            						}
            						else {
HXLINE(1964)							increase = (( (Float)(-1) ) / this->deezNuts->get_float(this->snap));
HXLINE(1965)							Float beats1 = this->curDecimalBeat;
HXDLIN(1965)							Float beats2 = (( (Float)(::Math_obj::ceil((beats1 * this->deezNuts->get_float(this->snap)))) ) - ((Float)0.001));
HXDLIN(1965)							beats = ((beats2 / this->deezNuts->get_float(this->snap)) + increase);
            						}
HXLINE(1970)						 ::TimingStruct data = ::TimingStruct_obj::getTimingAtBeat(beats);
HXLINE(1972)						if ((beats <= 0)) {
HXLINE(1973)							::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            						}
HXLINE(1975)						Float bpm;
HXDLIN(1975)						if (::hx::IsNotNull( data )) {
HXLINE(1975)							bpm = data->bpm;
            						}
            						else {
HXLINE(1975)							bpm = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            						}
HXLINE(1977)						if (::hx::IsNotNull( data )) {
HXLINE(1980)							::flixel::FlxG_obj::sound->music->set_time(((data->startTime + ((beats - data->startBeat) / (bpm / ( (Float)(60) )))) * ( (Float)(1000) )));
            						}
            					}
            					else {
HXLINE(1984)						 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(1984)						_g->set_time((_g->_time - ((( (Float)(::flixel::FlxG_obj::mouse->wheel) ) * ::Conductor_obj::stepCrochet) * ((Float)0.4))));
            					}
HXLINE(1986)					if ((::flixel::FlxG_obj::sound->music->_time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(1987)						::flixel::FlxG_obj::sound->music->set_time(::flixel::FlxG_obj::sound->music->_length);
            					}
HXLINE(1989)					if (!(::PlayState_obj::isSM)) {
HXLINE(1990)						this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            					}
            				}
            			}
HXLINE(1994)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1994)			if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE(1996)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1996)				if (_this->keyManager->checkStatus(39,_this->status)) {
HXLINE(1997)					 ::ChartingState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1997)					_hx_tmp->speed = (_hx_tmp->speed + ((Float)0.1));
            				}
            				else {
HXLINE(1998)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1998)					if (_this->keyManager->checkStatus(37,_this->status)) {
HXLINE(1999)						 ::ChartingState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1999)						_hx_tmp->speed = (_hx_tmp->speed - ((Float)0.1));
            					}
            				}
HXLINE(2001)				if ((this->speed > 3)) {
HXLINE(2002)					this->speed = ( (Float)(3) );
            				}
HXLINE(2003)				if ((this->speed <= ((Float)0.01))) {
HXLINE(2004)					this->speed = ((Float)0.1);
            				}
            			}
            			else {
HXLINE(2008)				bool _hx_tmp;
HXDLIN(2008)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2008)				if (_this->keyManager->checkStatus(39,_this->status)) {
HXLINE(2008)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2008)					_hx_tmp = !(_this->keyManager->checkStatus(17,_this->status));
            				}
            				else {
HXLINE(2008)					_hx_tmp = false;
            				}
HXDLIN(2008)				if (_hx_tmp) {
HXLINE(2009)					this->goToSection((this->curSection + 1));
            				}
            				else {
HXLINE(2010)					bool _hx_tmp;
HXDLIN(2010)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2010)					if (_this->keyManager->checkStatus(37,_this->status)) {
HXLINE(2010)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2010)						_hx_tmp = !(_this->keyManager->checkStatus(17,_this->status));
            					}
            					else {
HXLINE(2010)						_hx_tmp = false;
            					}
HXDLIN(2010)					if (_hx_tmp) {
HXLINE(2011)						this->goToSection((this->curSection - 1));
            					}
            				}
            			}
HXLINE(2014)			bool _hx_tmp;
HXDLIN(2014)			 ::flixel::input::mouse::FlxMouseButton _this1 = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN(2014)			bool _hx_tmp1;
HXDLIN(2014)			if ((_this1->current != 1)) {
HXLINE(2014)				_hx_tmp1 = (_this1->current == 2);
            			}
            			else {
HXLINE(2014)				_hx_tmp1 = true;
            			}
HXDLIN(2014)			if (_hx_tmp1) {
HXLINE(2014)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2014)				_hx_tmp = _this->keyManager->checkStatus(17,_this->status);
            			}
            			else {
HXLINE(2014)				_hx_tmp = false;
            			}
HXDLIN(2014)			if (_hx_tmp) {
HXLINE(2016)				if (!(this->waitingForRelease)) {
HXLINE(2019)					this->waitingForRelease = true;
HXLINE(2020)					this->selectBox =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,::flixel::FlxG_obj::mouse->x,::flixel::FlxG_obj::mouse->y,null());
HXLINE(2021)					 ::flixel::FlxSprite _hx_tmp = this->selectBox;
HXDLIN(2021)					int Alpha = 255;
HXDLIN(2021)					int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(2021)					{
HXLINE(2021)						color = (color & -16711681);
HXDLIN(2021)						color = (color | 11337728);
            					}
HXDLIN(2021)					{
HXLINE(2021)						color = (color & -65281);
HXDLIN(2021)						color = (color | 55296);
            					}
HXDLIN(2021)					{
HXLINE(2021)						color = (color & -256);
HXDLIN(2021)						color = (color | 230);
            					}
HXDLIN(2021)					{
HXLINE(2021)						color = (color & 16777215);
HXDLIN(2021)						int color1;
HXDLIN(2021)						if ((Alpha > 255)) {
HXLINE(2021)							color1 = 255;
            						}
            						else {
HXLINE(2021)							if ((Alpha < 0)) {
HXLINE(2021)								color1 = 0;
            							}
            							else {
HXLINE(2021)								color1 = Alpha;
            							}
            						}
HXDLIN(2021)						color = (color | (color1 << 24));
            					}
HXDLIN(2021)					_hx_tmp->makeGraphic(0,0,color,null(),null());
HXLINE(2022)					this->selectBox->set_alpha(((Float)0.4));
HXLINE(2024)					this->selectInitialX = this->selectBox->x;
HXLINE(2025)					this->selectInitialY = this->selectBox->y;
HXLINE(2027)					this->add(this->selectBox);
            				}
            				else {
HXLINE(2031)					if (this->waitingForRelease) {
HXLINE(2034)						this->selectBox->set_x(::Math_obj::min(( (Float)(::flixel::FlxG_obj::mouse->x) ),this->selectInitialX));
HXLINE(2035)						this->selectBox->set_y(::Math_obj::min(( (Float)(::flixel::FlxG_obj::mouse->y) ),this->selectInitialY));
HXLINE(2037)						 ::flixel::FlxSprite _hx_tmp = this->selectBox;
HXDLIN(2037)						int _hx_tmp1 = ::Math_obj::floor(::Math_obj::abs((( (Float)(::flixel::FlxG_obj::mouse->x) ) - this->selectInitialX)));
HXDLIN(2037)						int _hx_tmp2 = ::Math_obj::floor(::Math_obj::abs((( (Float)(::flixel::FlxG_obj::mouse->y) ) - this->selectInitialY)));
HXDLIN(2037)						int Alpha = 255;
HXDLIN(2037)						int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(2037)						{
HXLINE(2037)							color = (color & -16711681);
HXDLIN(2037)							color = (color | 11337728);
            						}
HXDLIN(2037)						{
HXLINE(2037)							color = (color & -65281);
HXDLIN(2037)							color = (color | 55296);
            						}
HXDLIN(2037)						{
HXLINE(2037)							color = (color & -256);
HXDLIN(2037)							color = (color | 230);
            						}
HXDLIN(2037)						{
HXLINE(2037)							color = (color & 16777215);
HXDLIN(2037)							int color1;
HXDLIN(2037)							if ((Alpha > 255)) {
HXLINE(2037)								color1 = 255;
            							}
            							else {
HXLINE(2037)								if ((Alpha < 0)) {
HXLINE(2037)									color1 = 0;
            								}
            								else {
HXLINE(2037)									color1 = Alpha;
            								}
            							}
HXDLIN(2037)							color = (color | (color1 << 24));
            						}
HXDLIN(2037)						_hx_tmp->makeGraphic(_hx_tmp1,_hx_tmp2,color,null(),null());
            					}
            				}
            			}
HXLINE(2041)			bool _hx_tmp2;
HXDLIN(2041)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == -1)) {
HXLINE(2041)				_hx_tmp2 = this->waitingForRelease;
            			}
            			else {
HXLINE(2041)				_hx_tmp2 = false;
            			}
HXDLIN(2041)			if (_hx_tmp2) {
HXLINE(2044)				this->waitingForRelease = false;
HXLINE(2046)				while(true){
HXLINE(2046)					bool _hx_tmp;
HXDLIN(2046)					bool _hx_tmp1;
HXDLIN(2046)					if ((this->selectedBoxes->members->get_length() != 0)) {
HXLINE(2046)						_hx_tmp1 = (this->selectBox->get_width() > 10);
            					}
            					else {
HXLINE(2046)						_hx_tmp1 = false;
            					}
HXDLIN(2046)					if (_hx_tmp1) {
HXLINE(2046)						_hx_tmp = (this->selectBox->get_height() > 10);
            					}
            					else {
HXLINE(2046)						_hx_tmp = false;
            					}
HXDLIN(2046)					if (!(_hx_tmp)) {
HXLINE(2046)						goto _hx_goto_101;
            					}
HXLINE(2048)					Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(2049)					Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(2050)					this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            				}
            				_hx_goto_101:;
HXLINE(2053)				{
HXLINE(2053)					 ::Dynamic filter = null();
HXDLIN(2053)					 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->curRenderedNotes->members,filter);
HXDLIN(2053)					while(i->hasNext()){
HXLINE(2053)						 ::Note i1 = i->next().StaticCast<  ::Note >();
HXLINE(2055)						bool _hx_tmp;
HXDLIN(2055)						if (i1->overlaps(this->selectBox,null(),null())) {
HXLINE(2055)							_hx_tmp = !(i1->charterSelected);
            						}
            						else {
HXLINE(2055)							_hx_tmp = false;
            						}
HXDLIN(2055)						if (_hx_tmp) {
HXLINE(2058)							this->selectNote(i1,false);
            						}
            					}
            				}
HXLINE(2061)				this->selectBox->destroy();
HXLINE(2062)				this->remove(this->selectBox,null());
            			}
HXLINE(2065)			bool _hx_tmp3;
HXDLIN(2065)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2065)			if (_this2->keyManager->checkStatus(17,_this2->status)) {
HXLINE(2065)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2065)				_hx_tmp3 = _this->keyManager->checkStatus(68,_this->status);
            			}
            			else {
HXLINE(2065)				_hx_tmp3 = false;
            			}
HXDLIN(2065)			if (_hx_tmp3) {
HXLINE(2067)				this->lastAction = HX_("delete",2b,c0,d8,6a);
HXLINE(2068)				::Array< ::Dynamic> notesToBeDeleted = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2069)				this->deletedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2070)				{
HXLINE(2070)					int _g = 0;
HXDLIN(2070)					int _g1 = this->selectedBoxes->members->get_length();
HXDLIN(2070)					while((_g < _g1)){
HXLINE(2070)						_g = (_g + 1);
HXDLIN(2070)						int i = (_g - 1);
HXLINE(2072)						this->deletedNotes->push(::cpp::VirtualArray_obj::__new(3)->init(0,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->strumTime)->init(1,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->rawNoteData)->init(2,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->sustainLength));
HXLINE(2073)						notesToBeDeleted->push(Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote);
            					}
            				}
HXLINE(2076)				{
HXLINE(2076)					int _g2 = 0;
HXDLIN(2076)					while((_g2 < notesToBeDeleted->length)){
HXLINE(2076)						 ::Note i = notesToBeDeleted->__get(_g2).StaticCast<  ::Note >();
HXDLIN(2076)						_g2 = (_g2 + 1);
HXLINE(2078)						this->deleteNote(i);
            					}
            				}
            			}
HXLINE(2082)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2082)			if (_this3->keyManager->checkStatus(46,_this3->status)) {
HXLINE(2084)				this->lastAction = HX_("delete",2b,c0,d8,6a);
HXLINE(2085)				::Array< ::Dynamic> notesToBeDeleted = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2086)				this->deletedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2087)				{
HXLINE(2087)					int _g = 0;
HXDLIN(2087)					int _g1 = this->selectedBoxes->members->get_length();
HXDLIN(2087)					while((_g < _g1)){
HXLINE(2087)						_g = (_g + 1);
HXDLIN(2087)						int i = (_g - 1);
HXLINE(2089)						this->deletedNotes->push(::cpp::VirtualArray_obj::__new(3)->init(0,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->strumTime)->init(1,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->rawNoteData)->init(2,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->sustainLength));
HXLINE(2090)						notesToBeDeleted->push(Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote);
            					}
            				}
HXLINE(2093)				{
HXLINE(2093)					int _g2 = 0;
HXDLIN(2093)					while((_g2 < notesToBeDeleted->length)){
HXLINE(2093)						 ::Note i = notesToBeDeleted->__get(_g2).StaticCast<  ::Note >();
HXDLIN(2093)						_g2 = (_g2 + 1);
HXLINE(2095)						this->deleteNote(i);
            					}
            				}
            			}
HXLINE(2101)			bool _hx_tmp4;
HXDLIN(2101)			 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2101)			if (_this4->keyManager->checkStatus(17,_this4->status)) {
HXLINE(2101)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2101)				_hx_tmp4 = _this->keyManager->checkStatus(67,_this->status);
            			}
            			else {
HXLINE(2101)				_hx_tmp4 = false;
            			}
HXDLIN(2101)			if (_hx_tmp4) {
HXLINE(2103)				if ((this->selectedBoxes->members->get_length() != 0)) {
HXLINE(2105)					this->copiedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2106)					{
HXLINE(2106)						int _g = 0;
HXDLIN(2106)						::Array< ::Dynamic> _g1 = this->selectedBoxes->members;
HXDLIN(2106)						while((_g < _g1->length)){
HXLINE(2106)							 ::ChartingBox i = _g1->__get(_g).StaticCast<  ::ChartingBox >();
HXDLIN(2106)							_g = (_g + 1);
HXLINE(2107)							this->copiedNotes->push(::cpp::VirtualArray_obj::__new(5)->init(0,i->connectedNote->strumTime)->init(1,i->connectedNote->rawNoteData)->init(2,i->connectedNote->sustainLength)->init(3,i->connectedNote->isAlt)->init(4,i->connectedNote->beat));
            						}
            					}
HXLINE(2109)					int firstNote = ( (int)(::cpp::VirtualArray( this->copiedNotes->__get(0))->__get(0)) );
HXLINE(2111)					{
HXLINE(2111)						int _g2 = 0;
HXDLIN(2111)						::Array< ::Dynamic> _g3 = this->copiedNotes;
HXDLIN(2111)						while((_g2 < _g3->length)){
HXLINE(2111)							::cpp::VirtualArray i = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(2111)							_g2 = (_g2 + 1);
HXLINE(2113)							i->set(0,(( (Float)(i->__get(0)) ) - ( (Float)(firstNote) )));
            						}
            					}
            				}
            			}
HXLINE(2121)			bool _hx_tmp5;
HXDLIN(2121)			 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2121)			if (_this5->keyManager->checkStatus(17,_this5->status)) {
HXLINE(2121)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2121)				_hx_tmp5 = _this->keyManager->checkStatus(86,_this->status);
            			}
            			else {
HXLINE(2121)				_hx_tmp5 = false;
            			}
HXDLIN(2121)			if (_hx_tmp5) {
HXLINE(2123)				if ((this->copiedNotes->length != 0)) {
HXLINE(2125)					while((this->selectedBoxes->members->get_length() != 0)){
HXLINE(2127)						Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(2128)						Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(2129)						this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            					}
HXLINE(2134)					this->pasteNotesFromArray(this->copiedNotes,null());
HXLINE(2136)					this->lastAction = HX_("paste",53,53,56,bd);
            				}
            			}
HXLINE(2141)			bool _hx_tmp6;
HXDLIN(2141)			 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2141)			if (_this6->keyManager->checkStatus(17,_this6->status)) {
HXLINE(2141)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2141)				_hx_tmp6 = _this->keyManager->checkStatus(90,_this->status);
            			}
            			else {
HXLINE(2141)				_hx_tmp6 = false;
            			}
HXDLIN(2141)			if (_hx_tmp6) {
HXLINE(2143)				::String _hx_switch_0 = this->lastAction;
            				if (  (_hx_switch_0==HX_("delete",2b,c0,d8,6a)) ){
HXLINE(2159)					if ((this->deletedNotes->length != 0)) {
HXLINE(2162)						this->pasteNotesFromArray(this->deletedNotes,false);
HXLINE(2163)						this->deletedNotes = ::Array_obj< ::Dynamic>::__new(0);
            					}
HXLINE(2159)					goto _hx_goto_110;
            				}
            				if (  (_hx_switch_0==HX_("paste",53,53,56,bd)) ){
HXLINE(2147)					if ((this->pastedNotes->length != 0)) {
HXLINE(2149)						{
HXLINE(2149)							int _g = 0;
HXDLIN(2149)							::Array< ::Dynamic> _g1 = this->pastedNotes;
HXDLIN(2149)							while((_g < _g1->length)){
HXLINE(2149)								 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(2149)								_g = (_g + 1);
HXLINE(2151)								if (this->curRenderedNotes->members->contains(i)) {
HXLINE(2152)									this->deleteNote(i);
            								}
            							}
            						}
HXLINE(2155)						this->pastedNotes = ::Array_obj< ::Dynamic>::__new(0);
            					}
HXLINE(2147)					goto _hx_goto_110;
            				}
            				_hx_goto_110:;
            			}
            		}
HXLINE(2169)		if ((this->updateFrame == 4)) {
HXLINE(2171)			::TimingStruct_obj::clearTimings();
HXLINE(2173)			int currentIndex = 0;
HXLINE(2174)			{
HXLINE(2174)				int _g = 0;
HXDLIN(2174)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(2174)				while((_g < _g1->length)){
HXLINE(2174)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(2174)					_g = (_g + 1);
HXLINE(2176)					if ((i->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE(2178)						Float beat = i->position;
HXLINE(2180)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE(2182)						::TimingStruct_obj::addTiming(beat,i->value,endBeat,( (Float)(0) ));
HXLINE(2184)						if ((currentIndex != 0)) {
HXLINE(2186)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE(2187)							data->endBeat = beat;
HXLINE(2188)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE(2189)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(2190)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE(2191)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE(2194)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE(2198)			this->recalculateAllSectionTimes();
HXLINE(2200)			this->regenerateLines();
HXLINE(2201)			this->updateFrame++;
            		}
            		else {
HXLINE(2203)			if ((this->updateFrame != 5)) {
HXLINE(2204)				this->updateFrame++;
            			}
            		}
HXLINE(2206)		::String _hx_tmp;
HXDLIN(2206)		if (this->doSnapShit) {
HXLINE(2206)			_hx_tmp = HX_("Shift to disable, CTRL Left or Right to increase/decrease",ae,d3,9e,8a);
            		}
            		else {
HXLINE(2206)			_hx_tmp = HX_("Snap Disabled, Shift to renable.",da,50,0f,a9);
            		}
HXDLIN(2206)		this->snapText->set_text((((((HX_("Snap: 1/",6e,d2,81,d5) + this->snap) + HX_(" (",08,1c,00,00)) + _hx_tmp) + HX_(")\nAdd Notes: 1-8 (or click)\nZoom: ",62,5f,a9,ab)) + this->zoomFactor));
HXLINE(2209)		bool _hx_tmp1;
HXDLIN(2209)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2209)		if (_this->keyManager->checkStatus(39,_this->status)) {
HXLINE(2209)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2209)			_hx_tmp1 = _this->keyManager->checkStatus(17,_this->status);
            		}
            		else {
HXLINE(2209)			_hx_tmp1 = false;
            		}
HXDLIN(2209)		if (_hx_tmp1) {
HXLINE(2211)			this->snapSelection++;
HXLINE(2212)			int index = 6;
HXLINE(2213)			if ((this->snapSelection > 6)) {
HXLINE(2214)				this->snapSelection = 6;
            			}
HXLINE(2215)			if ((this->snapSelection < 0)) {
HXLINE(2216)				this->snapSelection = 0;
            			}
HXLINE(2217)			{
HXLINE(2217)				 ::Dynamic v = this->deezNuts->keys();
HXDLIN(2217)				while(( (bool)(v->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2217)					int v1 = ( (int)(v->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2219)					if ((index == this->snapSelection)) {
HXLINE(2222)						this->snap = v1;
            					}
HXLINE(2224)					index = (index - 1);
            				}
            			}
            		}
HXLINE(2228)		bool _hx_tmp2;
HXDLIN(2228)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2228)		if (_this1->keyManager->checkStatus(37,_this1->status)) {
HXLINE(2228)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2228)			_hx_tmp2 = _this->keyManager->checkStatus(17,_this->status);
            		}
            		else {
HXLINE(2228)			_hx_tmp2 = false;
            		}
HXDLIN(2228)		if (_hx_tmp2) {
HXLINE(2230)			this->snapSelection--;
HXLINE(2231)			if ((this->snapSelection > 6)) {
HXLINE(2232)				this->snapSelection = 6;
            			}
HXLINE(2233)			if ((this->snapSelection < 0)) {
HXLINE(2234)				this->snapSelection = 0;
            			}
HXLINE(2235)			int index = 6;
HXLINE(2236)			{
HXLINE(2236)				 ::Dynamic v = this->deezNuts->keys();
HXDLIN(2236)				while(( (bool)(v->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2236)					int v1 = ( (int)(v->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2238)					if ((index == this->snapSelection)) {
HXLINE(2241)						this->snap = v1;
            					}
HXLINE(2243)					index = (index - 1);
            				}
            			}
            		}
HXLINE(2248)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2248)		if (_this2->keyManager->checkStatus(16,_this2->status)) {
HXLINE(2249)			this->doSnapShit = !(this->doSnapShit);
            		}
HXLINE(2252)		this->doSnapShit = this->defaultSnap;
HXLINE(2253)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2253)		if (_this3->keyManager->checkStatus(16,_this3->status)) {
HXLINE(2255)			this->doSnapShit = !(this->defaultSnap);
            		}
HXLINE(2259)		this->check_snap->set_checked(this->doSnapShit);
HXLINE(2261)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(2262)		::ChartingState_obj::_song->__SetField(HX_("song",d5,23,58,4c),this->typingShit->text,::hx::paccDynamic);
HXLINE(2265)		 ::TimingStruct timingSeg = ::TimingStruct_obj::getTimingAtTimestamp(::Conductor_obj::songPosition);
HXLINE(2267)		Float start = ::Conductor_obj::songPosition;
HXLINE(2269)		if (::hx::IsNotNull( timingSeg )) {
HXLINE(2271)			Float timingSegBpm = timingSeg->bpm;
HXLINE(2272)			this->currentBPM = timingSegBpm;
HXLINE(2274)			if ((this->currentBPM != ::Conductor_obj::bpm)) {
HXLINE(2277)				::Conductor_obj::changeBPM(this->currentBPM,false);
            			}
HXLINE(2280)			Float pog = ((this->curDecimalBeat - timingSeg->startBeat) / (::Conductor_obj::bpm / ( (Float)(60) )));
HXLINE(2282)			start = ((timingSeg->startTime + pog) * ( (Float)(1000) ));
            		}
HXLINE(2286)		 ::Dynamic weird = this->getSectionByTime(start,true);
HXLINE(2290)		if (::hx::IsNotNull( weird )) {
HXLINE(2292)			 ::Dynamic _hx_tmp = this->lastUpdatedSection;
HXDLIN(2292)			if (::hx::IsNotEq( _hx_tmp,this->getSectionByTime(start,true) )) {
HXLINE(2294)				this->lastUpdatedSection = weird;
HXLINE(2295)				this->check_mustHitSection->set_checked(( (bool)(weird->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(2296)				this->check_CPUAltAnim->set_checked(( (bool)(weird->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) ));
HXLINE(2297)				this->check_playerAltAnim->set_checked(( (bool)(weird->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) ));
            			}
            		}
HXLINE(2302)		 ::flixel::FlxSprite _hx_tmp3 = this->strumLine;
HXDLIN(2302)		Float _hx_tmp4 = this->getYfromStrum(start);
HXDLIN(2302)		_hx_tmp3->set_y((_hx_tmp4 * this->zoomFactor));
HXLINE(2303)		this->camFollow->set_y(this->strumLine->y);
HXLINE(2306)		 ::flixel::text::FlxText _hx_tmp5 = this->bpmTxt;
HXDLIN(2306)		::String _hx_tmp6 = (::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::Conductor_obj::songPosition / ( (Float)(1000) )),2)) + HX_(" / ",31,71,18,00));
HXDLIN(2306)		::String _hx_tmp7 = ((_hx_tmp6 + ::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )),2))) + HX_("\nCur Section: ",a1,0e,22,7f));
HXDLIN(2306)		::String _hx_tmp8 = ((((_hx_tmp7 + this->curSection) + HX_("\nCurBPM: ",cf,5b,2e,01)) + this->currentBPM) + HX_("\nCurBeat: ",d2,85,30,2c));
HXDLIN(2306)		::String _hx_tmp9 = ((_hx_tmp8 + ::HelperFunctions_obj::truncateFloat(this->curDecimalBeat,3)) + HX_("\nCurStep: ",28,2d,e6,9d));
HXDLIN(2306)		::String _hx_tmp10 = ((_hx_tmp9 + this->curStep) + HX_("\nZoom: ",23,18,21,cf));
HXDLIN(2306)		::String _hx_tmp11 = ((_hx_tmp10 + ::HelperFunctions_obj::truncateFloat(this->zoomFactor,2)) + HX_("\nSpeed: ",03,97,ed,e9));
HXDLIN(2306)		_hx_tmp5->set_text((_hx_tmp11 + ::HelperFunctions_obj::truncateFloat(this->speed,1)));
HXLINE(2323)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2323)		bool left = _this4->keyManager->checkStatus(49,_this4->status);
HXLINE(2324)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2324)		bool down = _this5->keyManager->checkStatus(50,_this5->status);
HXLINE(2325)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2325)		bool up = _this6->keyManager->checkStatus(51,_this6->status);
HXLINE(2326)		 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2326)		bool right = _this7->keyManager->checkStatus(52,_this7->status);
HXLINE(2327)		 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2327)		bool leftO = _this8->keyManager->checkStatus(53,_this8->status);
HXLINE(2328)		 ::flixel::input::keyboard::FlxKeyList _this9 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2328)		bool downO = _this9->keyManager->checkStatus(54,_this9->status);
HXLINE(2329)		 ::flixel::input::keyboard::FlxKeyList _this10 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2329)		bool upO = _this10->keyManager->checkStatus(55,_this10->status);
HXLINE(2330)		 ::flixel::input::keyboard::FlxKeyList _this11 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2330)		bool rightO = _this11->keyManager->checkStatus(56,_this11->status);
HXLINE(2332)		::Array< bool > pressArray = ::Array_obj< bool >::__new(8)->init(0,left)->init(1,down)->init(2,up)->init(3,right)->init(4,leftO)->init(5,downO)->init(6,upO)->init(7,rightO);
HXLINE(2333)		::Array< bool > _hx_delete = ::Array_obj< bool >::fromData( _hx_array_data_9bdde08d_124,1);
HXLINE(2334)		if (doInput) {
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis,::Array< bool >,_hx_delete,::Array< bool >,pressArray) HXARGC(1)
            			void _hx_run( ::Note note){
            				HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2338_update)
HXLINE(2338)				bool _hx_tmp;
HXDLIN(2338)				if (_gthis->strumLine->overlaps(note,null(),null())) {
HXLINE(2338)					_hx_tmp = pressArray->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(note->rawNoteData) ))));
            				}
            				else {
HXLINE(2338)					_hx_tmp = false;
            				}
HXDLIN(2338)				if (_hx_tmp) {
HXLINE(2340)					_gthis->deleteNote(note);
HXLINE(2341)					_hx_delete[0] = true;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2336)			this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_0(_gthis,_hx_delete,pressArray)),null());
HXLINE(2345)			{
HXLINE(2345)				int _g = 0;
HXDLIN(2345)				int _g1 = pressArray->length;
HXDLIN(2345)				while((_g < _g1)){
HXLINE(2345)					_g = (_g + 1);
HXDLIN(2345)					int p = (_g - 1);
HXLINE(2347)					bool i = pressArray->__get(p);
HXLINE(2348)					bool _hx_tmp;
HXDLIN(2348)					if (i) {
HXLINE(2348)						_hx_tmp = !(_hx_delete->__get(0));
            					}
            					else {
HXLINE(2348)						_hx_tmp = false;
            					}
HXDLIN(2348)					if (_hx_tmp) {
HXLINE(2350)						this->addNote( ::Note_obj::__alloc( HX_CTX ,::Conductor_obj::songPosition,p,null(),null(),null(),null(),null()));
            					}
            				}
            			}
            		}
HXLINE(2357)		if (this->playClaps) {
HXLINE(2359)			int _g = 0;
HXDLIN(2359)			::Array< ::Dynamic> _g1 = this->shownNotes;
HXDLIN(2359)			while((_g < _g1->length)){
HXLINE(2359)				 ::Note note = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(2359)				_g = (_g + 1);
HXLINE(2361)				bool _hx_tmp;
HXDLIN(2361)				bool _hx_tmp1;
HXDLIN(2361)				if ((note->strumTime <= ::Conductor_obj::songPosition)) {
HXLINE(2361)					_hx_tmp1 = !(this->claps->contains(note));
            				}
            				else {
HXLINE(2361)					_hx_tmp1 = false;
            				}
HXDLIN(2361)				if (_hx_tmp1) {
HXLINE(2361)					_hx_tmp = ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel );
            				}
            				else {
HXLINE(2361)					_hx_tmp = false;
            				}
HXDLIN(2361)				if (_hx_tmp) {
HXLINE(2363)					this->claps->push(note);
HXLINE(2364)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2364)					_hx_tmp->play(::Paths_obj::sound(HX_("SNAP",4a,1e,18,37),null()),null(),null(),null(),null(),null());
            				}
            			}
            		}
HXLINE(2442)		bool _hx_tmp12;
HXDLIN(2442)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(2442)			_hx_tmp12 = !(this->waitingForRelease);
            		}
            		else {
HXLINE(2442)			_hx_tmp12 = false;
            		}
HXDLIN(2442)		if (_hx_tmp12) {
HXLINE(2444)			if (::flixel::FlxG_obj::mouse->overlaps(this->curRenderedNotes,null())) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(1)
            				void _hx_run( ::Note note){
            					HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2448_update)
HXLINE(2448)					if (::flixel::FlxG_obj::mouse->overlaps(note,null())) {
HXLINE(2450)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2450)						if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE(2452)							_gthis->selectNote(note,false);
            						}
            						else {
HXLINE(2456)							_gthis->deleteNote(note);
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2446)				this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_1(_gthis)),null());
            			}
            			else {
HXLINE(2463)				bool _hx_tmp;
HXDLIN(2463)				bool _hx_tmp1;
HXDLIN(2463)				bool _hx_tmp2;
HXDLIN(2463)				if ((::flixel::FlxG_obj::mouse->x > 0)) {
HXLINE(2464)					int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXLINE(2463)					_hx_tmp2 = (_hx_tmp < this->gridBG->get_width());
            				}
            				else {
HXLINE(2463)					_hx_tmp2 = false;
            				}
HXDLIN(2463)				if (_hx_tmp2) {
HXLINE(2463)					_hx_tmp1 = (::flixel::FlxG_obj::mouse->y > 0);
            				}
            				else {
HXLINE(2463)					_hx_tmp1 = false;
            				}
HXDLIN(2463)				if (_hx_tmp1) {
HXLINE(2463)					_hx_tmp = (::flixel::FlxG_obj::mouse->y < this->height);
            				}
            				else {
HXLINE(2463)					_hx_tmp = false;
            				}
HXDLIN(2463)				if (_hx_tmp) {
HXLINE(2469)					this->addNote(null());
            				}
            			}
            		}
HXLINE(2474)		bool _hx_tmp13;
HXDLIN(2474)		bool _hx_tmp14;
HXDLIN(2474)		bool _hx_tmp15;
HXDLIN(2474)		if ((::flixel::FlxG_obj::mouse->x > 0)) {
HXLINE(2475)			int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXLINE(2474)			_hx_tmp15 = (_hx_tmp < this->gridBG->get_width());
            		}
            		else {
HXLINE(2474)			_hx_tmp15 = false;
            		}
HXDLIN(2474)		if (_hx_tmp15) {
HXLINE(2474)			_hx_tmp14 = (::flixel::FlxG_obj::mouse->y > 0);
            		}
            		else {
HXLINE(2474)			_hx_tmp14 = false;
            		}
HXDLIN(2474)		if (_hx_tmp14) {
HXLINE(2474)			_hx_tmp13 = (::flixel::FlxG_obj::mouse->y < this->height);
            		}
            		else {
HXLINE(2474)			_hx_tmp13 = false;
            		}
HXDLIN(2474)		if (_hx_tmp13) {
HXLINE(2479)			this->dummyArrow->set_visible(true);
HXLINE(2481)			this->dummyArrow->set_x(( (Float)((::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(this->GRID_SIZE) ))) * this->GRID_SIZE)) ));
HXLINE(2483)			if (this->doSnapShit) {
HXLINE(2485)				Float time = this->getStrumTime((( (Float)(::flixel::FlxG_obj::mouse->y) ) / this->zoomFactor));
HXLINE(2487)				Float beat = ::TimingStruct_obj::getBeatFromTime(time);
HXLINE(2488)				int snapped = ::Math_obj::round((beat * this->deezNuts->get_float(this->snap)));
HXDLIN(2488)				Float snapped1 = (( (Float)(snapped) ) / this->deezNuts->get_float(this->snap));
HXLINE(2490)				 ::flixel::FlxSprite _hx_tmp = this->dummyArrow;
HXDLIN(2490)				Float _hx_tmp1 = this->getYfromStrum(::TimingStruct_obj::getTimeFromBeat(snapped1));
HXDLIN(2490)				_hx_tmp->set_y((_hx_tmp1 * this->zoomFactor));
            			}
            			else {
HXLINE(2494)				this->dummyArrow->set_y(( (Float)(::flixel::FlxG_obj::mouse->y) ));
            			}
            		}
            		else {
HXLINE(2499)			this->dummyArrow->set_visible(false);
            		}
HXLINE(2502)		if (doInput) {
HXLINE(2504)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2504)			if (_this->keyManager->checkStatus(13,_this->status)) {
HXLINE(2506)				::ChartingState_obj::lastSection = this->curSection;
HXLINE(2508)				::PlayState_obj::SONG = ::ChartingState_obj::_song;
HXLINE(2509)				{
HXLINE(2509)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2509)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(2510)				if (!(::PlayState_obj::isSM)) {
HXLINE(2511)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(2511)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(2513)				while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE(2515)					this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            				}
HXLINE(2518)				while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE(2520)					this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE(2523)				while((this->sectionRenderes->members->get_length() > 0)){
HXLINE(2525)					this->sectionRenderes->remove(Dynamic( this->sectionRenderes->members->__get(0)).StaticCast<  ::SectionRender >(),true).StaticCast<  ::SectionRender >();
            				}
HXLINE(2527)				{
HXLINE(2527)					 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(2527)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2527)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
HXLINE(2530)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2530)			if (_this1->keyManager->checkStatus(69,_this1->status)) {
HXLINE(2532)				Float _hx_tmp;
HXDLIN(2532)				if (::hx::IsNotNull( timingSeg )) {
HXLINE(2532)					_hx_tmp = timingSeg->bpm;
            				}
            				else {
HXLINE(2532)					_hx_tmp = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            				}
HXDLIN(2532)				this->changeNoteSustain((((( (Float)(60) ) / _hx_tmp) * ( (Float)(1000) )) / ( (Float)(4) )));
            			}
HXLINE(2534)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2534)			if (_this2->keyManager->checkStatus(81,_this2->status)) {
HXLINE(2536)				Float _hx_tmp;
HXDLIN(2536)				if (::hx::IsNotNull( timingSeg )) {
HXLINE(2536)					_hx_tmp = timingSeg->bpm;
            				}
            				else {
HXLINE(2536)					_hx_tmp = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            				}
HXDLIN(2536)				this->changeNoteSustain(-((((( (Float)(60) ) / _hx_tmp) * ( (Float)(1000) )) / ( (Float)(4) ))));
            			}
HXLINE(2539)			bool _hx_tmp;
HXDLIN(2539)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2539)			if (_this3->keyManager->checkStatus(67,_this3->status)) {
HXLINE(2539)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2539)				_hx_tmp = !(_this->keyManager->checkStatus(17,_this->status));
            			}
            			else {
HXLINE(2539)				_hx_tmp = false;
            			}
HXDLIN(2539)			if (_hx_tmp) {
HXLINE(2541)				 ::Dynamic sect =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection);
HXLINE(2545)				sect->__SetField(HX_("mustHitSection",3b,5f,87,62),!(( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )),::hx::paccDynamic);
HXLINE(2546)				this->check_mustHitSection->set_checked(( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(2547)				 ::SectionRender i = Dynamic( this->sectionRenderes->members->__get(this->curSection)).StaticCast<  ::SectionRender >();
HXLINE(2548)				Float cachedY = i->icon->y;
HXLINE(2549)				this->remove(i->icon,null());
HXLINE(2550)				 ::flixel::FlxSprite sectionicon;
HXDLIN(2550)				if (( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(2550)					sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            				}
            				else {
HXLINE(2550)					sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            				}
HXLINE(2551)				sectionicon->set_x(( (Float)(-95) ));
HXLINE(2552)				sectionicon->set_y(cachedY);
HXLINE(2553)				sectionicon->setGraphicSize(0,45);
HXLINE(2555)				i->icon = sectionicon;
HXLINE(2556)				i->lastUpdated = ( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(2558)				this->add(sectionicon);
            			}
HXLINE(2562)			bool _hx_tmp1;
HXDLIN(2562)			 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2562)			if (_this4->keyManager->checkStatus(86,_this4->status)) {
HXLINE(2562)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2562)				_hx_tmp1 = !(_this->keyManager->checkStatus(17,_this->status));
            			}
            			else {
HXLINE(2562)				_hx_tmp1 = false;
            			}
HXDLIN(2562)			if (_hx_tmp1) {
HXLINE(2565)				 ::Dynamic secit =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection);
HXLINE(2567)				if (::hx::IsNotNull( secit )) {
HXLINE(2569)					::Array< ::Dynamic> newSwaps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2571)					{
HXLINE(2571)						int _g = 0;
HXDLIN(2571)						int _g1 = ( (::Array< ::Dynamic>)(secit->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length;
HXDLIN(2571)						while((_g < _g1)){
HXLINE(2571)							_g = (_g + 1);
HXDLIN(2571)							int i = (_g - 1);
HXLINE(2573)							::cpp::VirtualArray note = ( (::cpp::VirtualArray)( ::Dynamic(secit->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i)) );
HXLINE(2574)							if (::hx::IsLess( note->__get(1),4 )) {
HXLINE(2575)								::cpp::VirtualArray note1 = note;
HXDLIN(2575)								int _hx_tmp = 1;
HXDLIN(2575)								note1->set(_hx_tmp,(note1->__get(_hx_tmp) + 4));
            							}
            							else {
HXLINE(2577)								::cpp::VirtualArray note1 = note;
HXDLIN(2577)								int _hx_tmp = 1;
HXDLIN(2577)								note1->set(_hx_tmp,(note1->__get(_hx_tmp) - 4));
            							}
HXLINE(2578)							newSwaps->push(note);
            						}
            					}
HXLINE(2581)					secit->__SetField(HX_("sectionNotes",1c,c8,a7,fe),newSwaps,::hx::paccDynamic);
HXLINE(2583)					{
HXLINE(2583)						int _g2 = 0;
HXDLIN(2583)						::Array< ::Dynamic> _g3 = this->shownNotes;
HXDLIN(2583)						while((_g2 < _g3->length)){
HXLINE(2583)							 ::Note i = _g3->__get(_g2).StaticCast<  ::Note >();
HXDLIN(2583)							_g2 = (_g2 + 1);
HXLINE(2585)							{
HXLINE(2585)								int _g = 0;
HXDLIN(2585)								while((_g < newSwaps->length)){
HXLINE(2585)									::cpp::VirtualArray ii = ::cpp::VirtualArray( newSwaps->__get(_g));
HXDLIN(2585)									_g = (_g + 1);
HXLINE(2586)									bool _hx_tmp;
HXDLIN(2586)									if (::hx::IsEq( i->strumTime,ii->__get(0) )) {
HXLINE(2586)										_hx_tmp = (i->noteData == ::hx::Mod(ii->__get(1),4));
            									}
            									else {
HXLINE(2586)										_hx_tmp = false;
            									}
HXDLIN(2586)									if (_hx_tmp) {
HXLINE(2588)										i->set_x(( (Float)(::Math_obj::floor((( (Float)(ii->__get(1)) ) * ( (Float)(this->GRID_SIZE) )))) ));
HXLINE(2590)										Float _hx_tmp = this->getYfromStrum(( (Float)(ii->__get(0)) ));
HXDLIN(2590)										i->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(2591)										bool _hx_tmp1;
HXDLIN(2591)										if ((i->sustainLength > 0)) {
HXLINE(2591)											_hx_tmp1 = ::hx::IsNotNull( i->noteCharterObject );
            										}
            										else {
HXLINE(2591)											_hx_tmp1 = false;
            										}
HXDLIN(2591)										if (_hx_tmp1) {
HXLINE(2592)											i->noteCharterObject->set_x((i->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))));
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(2598)			 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2598)			if (_this5->keyManager->checkStatus(9,_this5->status)) {
HXLINE(2600)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2600)				if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE(2602)					{
HXLINE(2602)						 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN(2602)						_g->set_selected_tab((_g->get_selected_tab() - 1));
            					}
HXLINE(2603)					if ((this->UI_box->get_selected_tab() < 0)) {
HXLINE(2604)						this->UI_box->set_selected_tab(2);
            					}
            				}
            				else {
HXLINE(2608)					{
HXLINE(2608)						 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN(2608)						_g->set_selected_tab((_g->get_selected_tab() + 1));
            					}
HXLINE(2609)					if ((this->UI_box->get_selected_tab() >= 3)) {
HXLINE(2610)						this->UI_box->set_selected_tab(0);
            					}
            				}
            			}
HXLINE(2614)			if (!(this->typingShit->hasFocus)) {
HXLINE(2618)				int shiftThing = 1;
HXLINE(2619)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2619)				if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE(2620)					shiftThing = 4;
            				}
HXLINE(2621)				 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2621)				if (_this1->keyManager->checkStatus(32,_this1->status)) {
HXLINE(2623)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(2625)						::flixel::FlxG_obj::sound->music->pause();
HXLINE(2626)						if (!(::PlayState_obj::isSM)) {
HXLINE(2627)							this->vocals->pause();
            						}
HXLINE(2628)						this->claps->removeRange(0,this->claps->length);
            					}
            					else {
HXLINE(2632)						if (!(::PlayState_obj::isSM)) {
HXLINE(2633)							this->vocals->play(null(),null(),null());
            						}
HXLINE(2634)						::flixel::FlxG_obj::sound->music->play(null(),null(),null());
            					}
            				}
HXLINE(2639)				bool _hx_tmp;
HXDLIN(2639)				if (!((::flixel::FlxG_obj::sound->music->_time < 0))) {
HXLINE(2639)					_hx_tmp = (this->curDecimalBeat < 0);
            				}
            				else {
HXLINE(2639)					_hx_tmp = true;
            				}
HXDLIN(2639)				if (_hx_tmp) {
HXLINE(2640)					::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            				}
HXLINE(2642)				 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2642)				if (!(_this2->keyManager->checkStatus(16,_this2->status))) {
HXLINE(2644)					bool _hx_tmp;
HXDLIN(2644)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2644)					if (!(_this->keyManager->checkStatus(87,_this->status))) {
HXLINE(2644)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2644)						_hx_tmp = _this->keyManager->checkStatus(83,_this->status);
            					}
            					else {
HXLINE(2644)						_hx_tmp = true;
            					}
HXDLIN(2644)					if (_hx_tmp) {
HXLINE(2646)						::flixel::FlxG_obj::sound->music->pause();
HXLINE(2647)						if (!(::PlayState_obj::isSM)) {
HXLINE(2648)							this->vocals->pause();
            						}
HXLINE(2649)						this->claps->removeRange(0,this->claps->length);
HXLINE(2651)						Float daTime = (( (Float)(700) ) * ::flixel::FlxG_obj::elapsed);
HXLINE(2653)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2653)						if (_this->keyManager->checkStatus(87,_this->status)) {
HXLINE(2655)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(2655)							_g->set_time((_g->_time - daTime));
            						}
            						else {
HXLINE(2658)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(2658)							_g->set_time((_g->_time + daTime));
            						}
HXLINE(2660)						if (!(::PlayState_obj::isSM)) {
HXLINE(2661)							this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            						}
            					}
            				}
            				else {
HXLINE(2666)					bool _hx_tmp;
HXDLIN(2666)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2666)					if (!(_this->keyManager->checkStatus(87,_this->status))) {
HXLINE(2666)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2666)						_hx_tmp = _this->keyManager->checkStatus(83,_this->status);
            					}
            					else {
HXLINE(2666)						_hx_tmp = true;
            					}
HXDLIN(2666)					if (_hx_tmp) {
HXLINE(2668)						::flixel::FlxG_obj::sound->music->pause();
HXLINE(2669)						if (!(::PlayState_obj::isSM)) {
HXLINE(2670)							this->vocals->pause();
            						}
HXLINE(2672)						Float daTime = (::Conductor_obj::stepCrochet * ( (Float)(2) ));
HXLINE(2674)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2674)						if (_this->keyManager->checkStatus(87,_this->status)) {
HXLINE(2676)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(2676)							_g->set_time((_g->_time - daTime));
            						}
            						else {
HXLINE(2679)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(2679)							_g->set_time((_g->_time + daTime));
            						}
HXLINE(2681)						if (!(::PlayState_obj::isSM)) {
HXLINE(2682)							this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            						}
            					}
            				}
            			}
            		}
HXLINE(2687)		::ChartingState_obj::_song->__SetField(HX_("bpm",df,be,4a,00),this->tempBpm,::hx::paccDynamic);
HXLINE(2693)		this->super::update(elapsed);
            	}


void ChartingState_obj::changeNoteSustain(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2697_changeNoteSustain)
HXLINE(2698)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2700)			if (::hx::IsNotNull( this->curSelectedNote->__get(2) )) {
HXLINE(2702)				::cpp::VirtualArray _hx_tmp = this->curSelectedNote;
HXDLIN(2702)				int _hx_tmp1 = 2;
HXDLIN(2702)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) + value));
HXLINE(2703)				this->curSelectedNote->set(2,::Math_obj::max(( (Float)(this->curSelectedNote->__get(2)) ),( (Float)(0) )));
HXLINE(2705)				if (::hx::IsNotNull( this->curSelectedNoteObject->noteCharterObject )) {
HXLINE(2706)					this->curRenderedSustains->remove(this->curSelectedNoteObject->noteCharterObject,null()).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE(2708)				 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->curSelectedNoteObject->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))),(this->curSelectedNoteObject->y + this->GRID_SIZE),null());
HXLINE(2709)				Float sustainVis1 = this->getYfromStrum(( (Float)((this->curSelectedNoteObject->strumTime + this->curSelectedNote->__get(2))) ));
HXLINE(2708)				 ::flixel::FlxSprite sustainVis2 = sustainVis->makeGraphic(8,::Math_obj::floor(((sustainVis1 * this->zoomFactor) - this->curSelectedNoteObject->y)),null(),null(),null());
HXLINE(2710)				this->curSelectedNoteObject->sustainLength = ( (Float)(this->curSelectedNote->__get(2)) );
HXLINE(2712)				this->curSelectedNoteObject->noteCharterObject = sustainVis2;
HXLINE(2714)				this->curRenderedSustains->add(sustainVis2).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
HXLINE(2718)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,changeNoteSustain,(void))

void ChartingState_obj::resetSection(::hx::Null< bool >  __o_songBeginning){
            		bool songBeginning = __o_songBeginning.Default(false);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2724_resetSection)
HXLINE(2725)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(2726)		if (!(::PlayState_obj::isSM)) {
HXLINE(2727)			this->vocals->pause();
            		}
HXLINE(2730)		::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE(2732)		if (!(::PlayState_obj::isSM)) {
HXLINE(2733)			this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            		}
HXLINE(2735)		this->updateGrid();
HXLINE(2736)		if (!(songBeginning)) {
HXLINE(2737)			this->updateSectionUI();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,resetSection,(void))

void ChartingState_obj::changeSection(::hx::Null< int >  __o_sec, ::Dynamic __o_updateMusic){
            		int sec = __o_sec.Default(0);
            		 ::Dynamic updateMusic = __o_updateMusic;
            		if (::hx::IsNull(__o_updateMusic)) updateMusic = true;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2744_changeSection)
HXDLIN(2744)		if (::hx::IsNotNull(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec) )) {
HXLINE(2747)			this->curSection = sec;
HXLINE(2749)			this->updateGrid();
HXLINE(2751)			if (( (bool)(updateMusic) )) {
HXLINE(2753)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(2754)				if (!(::PlayState_obj::isSM)) {
HXLINE(2755)					this->vocals->pause();
            				}
HXLINE(2765)				 ::flixel::_hx_system::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN(2765)				_hx_tmp->set_time(this->sectionStartTime(null()));
HXLINE(2766)				if (!(::PlayState_obj::isSM)) {
HXLINE(2767)					this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            				}
HXLINE(2768)				this->updateCurStep();
            			}
HXLINE(2771)			this->updateGrid();
HXLINE(2772)			this->updateSectionUI();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,changeSection,(void))

void ChartingState_obj::copySection( ::Dynamic __o_sectionNum){
            		 ::Dynamic sectionNum = __o_sectionNum;
            		if (::hx::IsNull(__o_sectionNum)) sectionNum = 1;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2779_copySection)
HXLINE(2780)		int a = this->curSection;
HXDLIN(2780)		int b = ( (int)(sectionNum) );
HXDLIN(2780)		int daSec;
HXDLIN(2780)		if ((a > b)) {
HXLINE(2780)			daSec = a;
            		}
            		else {
HXLINE(2780)			daSec = b;
            		}
HXLINE(2781)		 ::Dynamic sect = this->lastUpdatedSection;
HXLINE(2783)		if (::hx::IsNull( sect )) {
HXLINE(2784)			return;
            		}
HXLINE(2786)		{
HXLINE(2786)			int _g = 0;
HXDLIN(2786)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((daSec - ( (int)(sectionNum) )))->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2786)			while((_g < _g1->length)){
HXLINE(2786)				::cpp::VirtualArray note = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(2786)				_g = (_g + 1);
HXLINE(2788)				 ::Dynamic strum = (note->__get(0) + (::Conductor_obj::stepCrochet * ( (Float)((( (int)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSec)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) * ( (int)(sectionNum) ))) )));
HXLINE(2790)				::cpp::VirtualArray copiedNote = ::cpp::VirtualArray_obj::__new(4)->init(0,strum)->init(1,note->__get(1))->init(2,note->__get(2))->init(3,note->__get(3));
HXLINE(2791)				( (::Array< ::Dynamic>)(sect->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(copiedNote);
            			}
            		}
HXLINE(2794)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,copySection,(void))

void ChartingState_obj::updateSectionUI(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2798_updateSectionUI)
HXLINE(2799)		 ::Dynamic sec = this->getSectionByTime(::Conductor_obj::songPosition,null());
HXLINE(2801)		if (::hx::IsNull( sec )) {
HXLINE(2803)			this->check_mustHitSection->set_checked(true);
HXLINE(2804)			this->check_CPUAltAnim->set_checked(false);
HXLINE(2805)			this->check_playerAltAnim->set_checked(false);
            		}
            		else {
HXLINE(2809)			this->check_mustHitSection->set_checked(( (bool)(sec->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(2810)			this->check_CPUAltAnim->set_checked(( (bool)(sec->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) ));
HXLINE(2811)			this->check_playerAltAnim->set_checked(( (bool)(sec->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateSectionUI,(void))

void ChartingState_obj::updateHeads(){
            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis,bool,mustHit,::String,head, ::SectionRender,i) HXARGC(1)
            		void _hx_run( ::Dynamic __o_failsafe){
            		bool failsafe = __o_failsafe.Default(false);
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2823_updateHeads)
HXLINE(2824)			 ::Dynamic sect =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection);
HXLINE(2825)			Float cachedY = i->icon->y;
HXLINE(2826)			_gthis->remove(i->icon,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(2827)			::String sectionicon;
HXDLIN(2827)			if (failsafe) {
HXLINE(2827)				if (mustHit) {
HXLINE(2827)					sectionicon = HX_("bf",c4,55,00,00);
            				}
            				else {
HXLINE(2827)					sectionicon = HX_("face",9d,b4,b5,43);
            				}
            			}
            			else {
HXLINE(2827)				sectionicon = head;
            			}
HXDLIN(2827)			 ::flixel::FlxSprite sectionicon1 =  ::HealthIcon_obj::__alloc( HX_CTX ,sectionicon,null())->clone();
HXLINE(2828)			sectionicon1->set_x(( (Float)(-95) ));
HXLINE(2829)			sectionicon1->set_y(cachedY);
HXLINE(2830)			sectionicon1->setGraphicSize(0,45);
HXLINE(2832)			i->icon = sectionicon1;
HXLINE(2833)			i->lastUpdated = ( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(2835)			_gthis->add(sectionicon1).StaticCast<  ::flixel::FlxBasic >();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2816_updateHeads)
HXLINE(2815)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2817)		bool mustHit = this->check_mustHitSection->checked;
HXLINE(2819)		::String head;
HXDLIN(2819)		if (mustHit) {
HXLINE(2819)			head = ( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2819)			head = ( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
            		}
HXLINE(2820)		 ::SectionRender i = Dynamic( this->sectionRenderes->members->__get(this->curSection)).StaticCast<  ::SectionRender >();
HXLINE(2822)		 ::Dynamic iconUpdate =  ::Dynamic(new _hx_Closure_0(_gthis,mustHit,head,i));
HXLINE(2839)		bool _hx_tmp;
HXDLIN(2839)		::String library = null();
HXDLIN(2839)		if (!(::sys::FileSystem_obj::exists(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("icons/icon-",5f,da,21,72) + head.split(HX_("-",2d,00,00,00))->__get(0))) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library)))) {
HXLINE(2839)			::String library = null();
HXDLIN(2839)			_hx_tmp = !(::sys::FileSystem_obj::exists(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("icons/icon-",5f,da,21,72) + head)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library)));
            		}
            		else {
HXLINE(2839)			_hx_tmp = false;
            		}
HXDLIN(2839)		if (_hx_tmp) {
HXLINE(2841)			if (::hx::IsNull( i->icon->animation->_curAnim )) {
HXLINE(2842)				iconUpdate(true);
            			}
            		}
            		else {
HXLINE(2845)			bool _hx_tmp;
HXDLIN(2845)			bool _hx_tmp1;
HXDLIN(2845)			if ((i->icon->animation->_curAnim->name != head)) {
HXLINE(2845)				::String i1 = i->icon->animation->_curAnim->name;
HXDLIN(2845)				_hx_tmp1 = (i1 != head.split(HX_("-",2d,00,00,00))->__get(0));
            			}
            			else {
HXLINE(2845)				_hx_tmp1 = false;
            			}
HXDLIN(2845)			if (!(_hx_tmp1)) {
HXLINE(2845)				if ((head == HX_("bf-pixel",fd,03,90,37))) {
HXLINE(2845)					_hx_tmp = (i->icon->animation->_curAnim->name != HX_("bf-pixel",fd,03,90,37));
            				}
            				else {
HXLINE(2845)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE(2845)				_hx_tmp = true;
            			}
HXDLIN(2845)			if (_hx_tmp) {
HXLINE(2847)				if (::hx::IsNotNull( i->icon->animation->_animations->get(head) )) {
HXLINE(2848)					i->icon->animation->play(head,null(),null(),null());
            				}
            				else {
HXLINE(2850)					iconUpdate(null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateHeads,(void))

void ChartingState_obj::updateNoteUI(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2860_updateNoteUI)
HXDLIN(2860)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2862)			this->stepperSusLength->set_value(( (Float)(this->curSelectedNote->__get(2)) ));
HXLINE(2863)			if (::hx::IsNotNull( this->curSelectedNote->__get(3) )) {
HXLINE(2864)				this->check_naltAnim->set_checked(( (bool)(this->curSelectedNote->__get(3)) ));
            			}
            			else {
HXLINE(2867)				this->curSelectedNote->set(3,false);
HXLINE(2868)				this->check_naltAnim->set_checked(false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateNoteUI,(void))

void ChartingState_obj::updateGrid(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2874_updateGrid)
HXLINE(2875)		while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE(2877)			this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            		}
HXLINE(2880)		while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE(2882)			this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(2899)		int currentSection = 0;
HXLINE(2901)		{
HXLINE(2901)			int _g = 0;
HXDLIN(2901)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(2901)			while((_g < _g1->length)){
HXLINE(2901)				 ::Dynamic section = _g1->__get(_g);
HXDLIN(2901)				_g = (_g + 1);
HXLINE(2903)				{
HXLINE(2903)					int _g2 = 0;
HXDLIN(2903)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2903)					while((_g2 < _g3->length)){
HXLINE(2903)						::cpp::VirtualArray i = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(2903)						_g2 = (_g2 + 1);
HXLINE(2905)						 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtTimestamp(( (Float)(i->__get(0)) ));
HXLINE(2906)						int daNoteInfo = ( (int)(i->__get(1)) );
HXLINE(2907)						Float daStrumTime = ( (Float)(i->__get(0)) );
HXLINE(2908)						Float daSus = ( (Float)(i->__get(2)) );
HXLINE(2910)						 ::Note note =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,::hx::Mod(daNoteInfo,4),null(),false,true,i->__get(3),i->__get(4));
HXLINE(2911)						note->rawNoteData = daNoteInfo;
HXLINE(2912)						note->sustainLength = daSus;
HXLINE(2913)						note->setGraphicSize(::Math_obj::floor(( (Float)(this->GRID_SIZE) )),::Math_obj::floor(( (Float)(this->GRID_SIZE) )));
HXLINE(2914)						note->updateHitbox();
HXLINE(2915)						note->set_x(( (Float)(::Math_obj::floor(( (Float)((daNoteInfo * this->GRID_SIZE)) ))) ));
HXLINE(2917)						Float _hx_tmp = this->getYfromStrum(daStrumTime);
HXDLIN(2917)						note->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(2919)						if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2920)							if (::hx::IsEq( this->curSelectedNote->__get(0),note->strumTime )) {
HXLINE(2921)								this->lastNote = note;
            							}
            						}
HXLINE(2923)						this->curRenderedNotes->add(note).StaticCast<  ::Note >();
HXLINE(2925)						Float stepCrochet = (((( (Float)(60) ) / seg->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(2927)						if ((daSus > 0)) {
HXLINE(2929)							 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(note->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))),(note->y + this->GRID_SIZE),null());
HXLINE(2930)							Float sustainVis1 = this->getYfromStrum((note->strumTime + note->sustainLength));
HXLINE(2929)							 ::flixel::FlxSprite sustainVis2 = sustainVis->makeGraphic(8,::Math_obj::floor(((sustainVis1 * this->zoomFactor) - note->y)),null(),null(),null());
HXLINE(2932)							note->noteCharterObject = sustainVis2;
HXLINE(2934)							this->curRenderedSustains->add(sustainVis2).StaticCast<  ::flixel::FlxSprite >();
            						}
            					}
            				}
HXLINE(2937)				currentSection = (currentSection + 1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateGrid,(void))

void ChartingState_obj::addSection(::hx::Null< int >  __o_lengthInSteps){
            		int lengthInSteps = __o_lengthInSteps.Default(16);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2943_addSection)
HXLINE(2944)		Float daPos = ( (Float)(0) );
HXLINE(2945)		Float start = ( (Float)(0) );
HXLINE(2947)		Float bpm = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE(2948)		{
HXLINE(2948)			int _g = 0;
HXDLIN(2948)			int _g1 = this->curSection;
HXDLIN(2948)			while((_g < _g1)){
HXLINE(2948)				_g = (_g + 1);
HXDLIN(2948)				int i = (_g - 1);
HXLINE(2950)				{
HXLINE(2950)					int _g1 = 0;
HXDLIN(2950)					::Array< ::Dynamic> _g2 = ::TimingStruct_obj::AllTimings;
HXDLIN(2950)					while((_g1 < _g2->length)){
HXLINE(2950)						 ::TimingStruct ii = _g2->__get(_g1).StaticCast<  ::TimingStruct >();
HXDLIN(2950)						_g1 = (_g1 + 1);
HXLINE(2952)						 ::TimingStruct data = ::TimingStruct_obj::getTimingAtTimestamp(start);
HXLINE(2953)						bool _hx_tmp;
HXDLIN(2953)						Float _hx_tmp1;
HXDLIN(2953)						if (::hx::IsNotNull( data )) {
HXLINE(2953)							_hx_tmp1 = data->bpm;
            						}
            						else {
HXLINE(2953)							_hx_tmp1 = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            						}
HXDLIN(2953)						if ((_hx_tmp1 != bpm)) {
HXLINE(2953)							_hx_tmp = (bpm != ii->bpm);
            						}
            						else {
HXLINE(2953)							_hx_tmp = false;
            						}
HXDLIN(2953)						if (_hx_tmp) {
HXLINE(2954)							bpm = ii->bpm;
            						}
            					}
            				}
HXLINE(2956)				start = (start + ((( (Float)(4) ) * (( (Float)(60) ) / bpm)) * ( (Float)(1000) )));
            			}
            		}
HXLINE(2959)		 ::Dynamic sec =  ::Dynamic(::hx::Anon_obj::Create(11)
            			->setFixed(0,HX_("lengthInSteps",3c,ed,41,db),lengthInSteps)
            			->setFixed(1,HX_("altAnim",da,f3,f2,e5),false)
            			->setFixed(2,HX_("CPUAltAnim",b2,2f,f2,ef),false)
            			->setFixed(3,HX_("typeOfSection",74,f3,25,fb),0)
            			->setFixed(4,HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(5,HX_("bpm",df,be,4a,00), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(6,HX_("startTime",8f,45,f0,05),daPos)
            			->setFixed(7,HX_("changeBPM",4f,4f,f8,1d),false)
            			->setFixed(8,HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY)
            			->setFixed(9,HX_("playerAltAnim",79,ce,6b,5d),false)
            			->setFixed(10,HX_("mustHitSection",3b,5f,87,62),true));
HXLINE(2973)		( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->push(sec);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addSection,(void))

void ChartingState_obj::selectNote( ::Note note, ::Dynamic __o_deleteAllBoxes){
            		 ::Dynamic deleteAllBoxes = __o_deleteAllBoxes;
            		if (::hx::IsNull(__o_deleteAllBoxes)) deleteAllBoxes = true;
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2977_selectNote)
HXLINE(2978)		int swagNum = 0;
HXLINE(2981)		if (( (bool)(deleteAllBoxes) )) {
HXLINE(2982)			while((this->selectedBoxes->members->get_length() != 0)){
HXLINE(2984)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(2985)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(2986)				this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            			}
            		}
HXLINE(2989)		{
HXLINE(2989)			int _g = 0;
HXDLIN(2989)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(2989)			while((_g < _g1->length)){
HXLINE(2989)				 ::Dynamic sec = _g1->__get(_g);
HXDLIN(2989)				_g = (_g + 1);
HXLINE(2991)				swagNum = 0;
HXLINE(2992)				{
HXLINE(2992)					int _g2 = 0;
HXDLIN(2992)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(sec->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2992)					while((_g2 < _g3->length)){
HXLINE(2992)						::cpp::VirtualArray i = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(2992)						_g2 = (_g2 + 1);
HXLINE(2994)						bool _hx_tmp;
HXDLIN(2994)						if (::hx::IsEq( i->__get(0),note->strumTime )) {
HXLINE(2994)							_hx_tmp = ::hx::IsEq( i->__get(1),note->rawNoteData );
            						}
            						else {
HXLINE(2994)							_hx_tmp = false;
            						}
HXDLIN(2994)						if (_hx_tmp) {
HXLINE(2996)							this->curSelectedNote = ( (::cpp::VirtualArray)( ::Dynamic(sec->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(swagNum)) );
HXLINE(2997)							if (::hx::IsNotNull( this->curSelectedNoteObject )) {
HXLINE(2998)								this->curSelectedNoteObject->charterSelected = false;
            							}
HXLINE(3000)							this->curSelectedNoteObject = note;
HXLINE(3001)							if (!(note->charterSelected)) {
HXLINE(3003)								 ::ChartingBox box =  ::ChartingBox_obj::__alloc( HX_CTX ,note->x,note->y,note);
HXLINE(3004)								box->connectedNoteData = i;
HXLINE(3005)								this->selectedBoxes->add(box).StaticCast<  ::ChartingBox >();
HXLINE(3006)								note->charterSelected = true;
HXLINE(3007)								this->curSelectedNoteObject->charterSelected = true;
            							}
            						}
HXLINE(3012)						swagNum = (swagNum + 1);
            					}
            				}
            			}
            		}
HXLINE(3016)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,selectNote,(void))

void ChartingState_obj::deleteNote( ::Note note){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3021_deleteNote)
HXLINE(3022)		this->lastNote = note;
HXLINE(3024)		 ::Dynamic section = this->getSectionByTime(note->strumTime,null());
HXLINE(3026)		bool found = false;
HXLINE(3028)		{
HXLINE(3028)			int _g = 0;
HXDLIN(3028)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(3028)			while((_g < _g1->length)){
HXLINE(3028)				::cpp::VirtualArray i = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(3028)				_g = (_g + 1);
HXLINE(3030)				bool _hx_tmp;
HXDLIN(3030)				if (::hx::IsEq( i->__get(0),note->strumTime )) {
HXLINE(3030)					_hx_tmp = ::hx::IsEq( i->__get(1),note->rawNoteData );
            				}
            				else {
HXLINE(3030)					_hx_tmp = false;
            				}
HXDLIN(3030)				if (_hx_tmp) {
HXLINE(3032)					( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
HXLINE(3033)					found = true;
            				}
            			}
            		}
HXLINE(3037)		if (!(found)) {
HXLINE(3039)			int _g = 0;
HXDLIN(3039)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3039)			while((_g < _g1->length)){
HXLINE(3039)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3039)				_g = (_g + 1);
HXLINE(3041)				{
HXLINE(3041)					int _g2 = 0;
HXDLIN(3041)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(3041)					while((_g2 < _g3->length)){
HXLINE(3041)						::cpp::VirtualArray n = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(3041)						_g2 = (_g2 + 1);
HXLINE(3042)						bool _hx_tmp;
HXDLIN(3042)						if (::hx::IsEq( n->__get(0),note->strumTime )) {
HXLINE(3042)							_hx_tmp = ::hx::IsEq( n->__get(1),note->rawNoteData );
            						}
            						else {
HXLINE(3042)							_hx_tmp = false;
            						}
HXDLIN(3042)						if (_hx_tmp) {
HXLINE(3043)							( (::Array< ::Dynamic>)(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(n);
            						}
            					}
            				}
            			}
            		}
HXLINE(3047)		this->curRenderedNotes->remove(note,null()).StaticCast<  ::Note >();
HXLINE(3049)		if ((note->sustainLength > 0)) {
HXLINE(3050)			this->curRenderedSustains->remove(note->noteCharterObject,null()).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(3052)		{
HXLINE(3052)			int _g2 = 0;
HXDLIN(3052)			int _g3 = this->selectedBoxes->members->get_length();
HXDLIN(3052)			while((_g2 < _g3)){
HXLINE(3052)				_g2 = (_g2 + 1);
HXDLIN(3052)				int i = (_g2 - 1);
HXLINE(3054)				 ::ChartingBox box = Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >();
HXLINE(3055)				if (::hx::IsEq( box->connectedNote,note )) {
HXLINE(3057)					this->selectedBoxes->members->remove(box);
HXLINE(3058)					box->destroy();
HXLINE(3059)					return;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,deleteNote,(void))

void ChartingState_obj::clearSection(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3065_clearSection)
HXLINE(3066)		this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
HXLINE(3068)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSection,(void))

void ChartingState_obj::clearSong(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3072_clearSong)
HXLINE(3073)		{
HXLINE(3073)			int _g = 0;
HXDLIN(3073)			int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3073)			while((_g < _g1)){
HXLINE(3073)				_g = (_g + 1);
HXDLIN(3073)				int daSection = (_g - 1);
HXLINE(3075)				 ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
            			}
            		}
HXLINE(3078)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSong,(void))

 ::Dynamic ChartingState_obj::newSection(::hx::Null< int >  __o_lengthInSteps,::hx::Null< bool >  __o_mustHitSection,::hx::Null< bool >  __o_CPUAltAnim,::hx::Null< bool >  __o_playerAltAnim){
            		int lengthInSteps = __o_lengthInSteps.Default(16);
            		bool mustHitSection = __o_mustHitSection.Default(false);
            		bool CPUAltAnim = __o_CPUAltAnim.Default(true);
            		bool playerAltAnim = __o_playerAltAnim.Default(true);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3082_newSection)
HXLINE(3084)		Float daPos = ( (Float)(0) );
HXLINE(3086)		 ::TimingStruct currentSeg = ::TimingStruct_obj::AllTimings->__get((::TimingStruct_obj::AllTimings->length - 1)).StaticCast<  ::TimingStruct >();
HXLINE(3088)		int currentBeat = 4;
HXLINE(3090)		{
HXLINE(3090)			int _g = 0;
HXDLIN(3090)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3090)			while((_g < _g1->length)){
HXLINE(3090)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3090)				_g = (_g + 1);
HXLINE(3091)				currentBeat = (currentBeat + 4);
            			}
            		}
HXLINE(3093)		if (::hx::IsNull( currentSeg )) {
HXLINE(3094)			return null();
            		}
HXLINE(3096)		Float start = ((( (Float)(currentBeat) ) - currentSeg->startBeat) / (currentSeg->bpm / ( (Float)(60) )));
HXLINE(3098)		daPos = ((currentSeg->startTime + start) * ( (Float)(1000) ));
HXLINE(3100)		 ::Dynamic sec =  ::Dynamic(::hx::Anon_obj::Create(11)
            			->setFixed(0,HX_("lengthInSteps",3c,ed,41,db),lengthInSteps)
            			->setFixed(1,HX_("altAnim",da,f3,f2,e5),false)
            			->setFixed(2,HX_("CPUAltAnim",b2,2f,f2,ef),CPUAltAnim)
            			->setFixed(3,HX_("typeOfSection",74,f3,25,fb),0)
            			->setFixed(4,HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(5,HX_("bpm",df,be,4a,00), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(6,HX_("startTime",8f,45,f0,05),daPos)
            			->setFixed(7,HX_("changeBPM",4f,4f,f8,1d),false)
            			->setFixed(8,HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY)
            			->setFixed(9,HX_("playerAltAnim",79,ce,6b,5d),playerAltAnim)
            			->setFixed(10,HX_("mustHitSection",3b,5f,87,62),mustHitSection));
HXLINE(3115)		return sec;
            	}


HX_DEFINE_DYNAMIC_FUNC4(ChartingState_obj,newSection,return )

void ChartingState_obj::recalculateAllSectionTimes(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3125_recalculateAllSectionTimes)
HXDLIN(3125)		int _g = 0;
HXDLIN(3125)		int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3125)		while((_g < _g1)){
HXDLIN(3125)			_g = (_g + 1);
HXDLIN(3125)			int i = (_g - 1);
HXLINE(3127)			 ::Dynamic section =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i);
HXLINE(3129)			int currentBeat = (4 * i);
HXLINE(3131)			 ::TimingStruct currentSeg = ::TimingStruct_obj::getTimingAtBeat(( (Float)(currentBeat) ));
HXLINE(3133)			if (::hx::IsNull( currentSeg )) {
HXLINE(3134)				return;
            			}
HXLINE(3136)			Float start = ((( (Float)(currentBeat) ) - currentSeg->startBeat) / (currentSeg->bpm / ( (Float)(60) )));
HXLINE(3138)			section->__SetField(HX_("startTime",8f,45,f0,05),((currentSeg->startTime + start) * ( (Float)(1000) )),::hx::paccDynamic);
HXLINE(3140)			if ((i != 0)) {
HXLINE(3141)				 ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((i - 1))->__SetField(HX_("endTime",88,85,21,2f),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(3142)			section->__SetField(HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY,::hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,recalculateAllSectionTimes,(void))

void ChartingState_obj::shiftNotes(::hx::Null< int >  __o_measure,::hx::Null< int >  __o_step,::hx::Null< int >  __o_ms){
            		int measure = __o_measure.Default(0);
            		int step = __o_step.Default(0);
            		int ms = __o_ms.Default(0);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3149_shiftNotes)
HXLINE(3150)		::Array< ::Dynamic> newSong = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3152)		Float millisecadd = ((((measure * 4) + (( (Float)(step) ) / ( (Float)(4) ))) * (( (Float)(60000) ) / this->currentBPM)) + ms);
HXLINE(3153)		int totaladdsection = ::Std_obj::_hx_int(((millisecadd / (( (Float)(60000) ) / this->currentBPM)) / ( (Float)(4) )));
HXLINE(3155)		if ((millisecadd > 0)) {
HXLINE(3157)			int _g = 0;
HXDLIN(3157)			int _g1 = totaladdsection;
HXDLIN(3157)			while((_g < _g1)){
HXLINE(3157)				_g = (_g + 1);
HXDLIN(3157)				int i = (_g - 1);
HXLINE(3159)				newSong->unshift(this->newSection(null(),null(),null(),null()));
            			}
            		}
HXLINE(3162)		{
HXLINE(3162)			int _g = 0;
HXDLIN(3162)			int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3162)			while((_g < _g1)){
HXLINE(3162)				_g = (_g + 1);
HXDLIN(3162)				int daSection1 = (_g - 1);
HXLINE(3164)				newSong->push(this->newSection(16, ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection1)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection1)->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection1)->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)));
            			}
            		}
HXLINE(3167)		{
HXLINE(3167)			int _g2 = 0;
HXDLIN(3167)			int _g3 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3167)			while((_g2 < _g3)){
HXLINE(3167)				_g2 = (_g2 + 1);
HXDLIN(3167)				int daSection = (_g2 - 1);
HXLINE(3169)				int aimtosetsection = (daSection + ::Std_obj::_hx_int(( (Float)(totaladdsection) )));
HXLINE(3170)				if ((aimtosetsection < 0)) {
HXLINE(3170)					aimtosetsection = 0;
            				}
HXLINE(3171)				newSong->__get(aimtosetsection)->__SetField(HX_("mustHitSection",3b,5f,87,62), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic),::hx::paccDynamic);
HXLINE(3172)				newSong->__get(aimtosetsection)->__SetField(HX_("CPUAltAnim",b2,2f,f2,ef), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic),::hx::paccDynamic);
HXLINE(3173)				newSong->__get(aimtosetsection)->__SetField(HX_("playerAltAnim",79,ce,6b,5d), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic),::hx::paccDynamic);
HXLINE(3175)				{
HXLINE(3175)					int _g = 0;
HXDLIN(3175)					int _g1 = ( (::Array< ::Dynamic>)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length;
HXDLIN(3175)					while((_g < _g1)){
HXLINE(3175)						_g = (_g + 1);
HXDLIN(3175)						int daNote = (_g - 1);
HXLINE(3177)						int newtiming = ( (int)(( ::Dynamic( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(daNote)->__GetItem(0) + millisecadd)) );
HXLINE(3178)						if ((newtiming < 0)) {
HXLINE(3180)							newtiming = 0;
            						}
HXLINE(3182)						int futureSection = ::Math_obj::floor(((( (Float)(newtiming) ) / ( (Float)(4) )) / (( (Float)(60000) ) / this->currentBPM)));
HXLINE(3183)						 ::Dynamic( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(daNote)->__SetItem(0,newtiming);
HXLINE(3184)						( (::Array< ::Dynamic>)(newSong->__get(futureSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push( ::Dynamic( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(daNote));
            					}
            				}
            			}
            		}
HXLINE(3191)		::ChartingState_obj::_song->__SetField(HX_("notes",41,dc,ca,9f),newSong,::hx::paccDynamic);
HXLINE(3192)		this->recalculateAllSectionTimes();
HXLINE(3193)		this->updateGrid();
HXLINE(3194)		this->updateSectionUI();
HXLINE(3195)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC3(ChartingState_obj,shiftNotes,(void))

 ::Dynamic ChartingState_obj::getSectionByTime(Float ms, ::Dynamic __o_changeCurSectionIndex){
            		 ::Dynamic changeCurSectionIndex = __o_changeCurSectionIndex;
            		if (::hx::IsNull(__o_changeCurSectionIndex)) changeCurSectionIndex = false;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3199_getSectionByTime)
HXLINE(3200)		int index = 0;
HXLINE(3204)		{
HXLINE(3204)			int _g = 0;
HXDLIN(3204)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3204)			while((_g < _g1->length)){
HXLINE(3204)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3204)				_g = (_g + 1);
HXLINE(3206)				bool _hx_tmp;
HXDLIN(3206)				if (::hx::IsGreaterEq( ms,i->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(3206)					_hx_tmp = ::hx::IsLess( ms,i->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            				}
            				else {
HXLINE(3206)					_hx_tmp = false;
            				}
HXDLIN(3206)				if (_hx_tmp) {
HXLINE(3208)					if (( (bool)(changeCurSectionIndex) )) {
HXLINE(3209)						this->curSection = index;
            					}
HXLINE(3210)					return i;
            				}
HXLINE(3212)				index = (index + 1);
            			}
            		}
HXLINE(3216)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,getSectionByTime,return )

 ::Dynamic ChartingState_obj::getNoteByTime(Float ms){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3220_getNoteByTime)
HXLINE(3221)		{
HXLINE(3221)			int _g = 0;
HXDLIN(3221)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3221)			while((_g < _g1->length)){
HXLINE(3221)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3221)				_g = (_g + 1);
HXLINE(3223)				{
HXLINE(3223)					int _g2 = 0;
HXDLIN(3223)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(3223)					while((_g2 < _g3->length)){
HXLINE(3223)						::cpp::VirtualArray n = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(3223)						_g2 = (_g2 + 1);
HXLINE(3224)						if (::hx::IsEq( n->__get(0),ms )) {
HXLINE(3225)							return i;
            						}
            					}
            				}
            			}
            		}
HXLINE(3227)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getNoteByTime,return )

void ChartingState_obj::addNote( ::Note n){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3233_addNote)
HXLINE(3234)		Float strum = this->getStrumTime(this->dummyArrow->y);
HXDLIN(3234)		Float strum1 = (strum / this->zoomFactor);
HXLINE(3240)		 ::Dynamic section = this->getSectionByTime(strum1,null());
HXLINE(3242)		if (::hx::IsNull( section )) {
HXLINE(3243)			return;
            		}
HXLINE(3245)		Float noteStrum = strum1;
HXLINE(3246)		int noteData = ::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(this->GRID_SIZE) )));
HXLINE(3247)		int noteSus = 0;
HXLINE(3249)		if (::hx::IsNotNull( n )) {
HXLINE(3250)			::Array< ::Dynamic> section1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(3250)			Float n1 = n->strumTime;
HXDLIN(3250)			int n2 = n->noteData;
HXDLIN(3250)			Float n3 = n->sustainLength;
HXDLIN(3250)			section1->push(::cpp::VirtualArray_obj::__new(5)->init(0,n1)->init(1,n2)->init(2,n3)->init(3,false)->init(4,::TimingStruct_obj::getBeatFromTime(n->strumTime)));
            		}
            		else {
HXLINE(3252)			::Array< ::Dynamic> section1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(3252)			section1->push(::cpp::VirtualArray_obj::__new(5)->init(0,noteStrum)->init(1,noteData)->init(2,noteSus)->init(3,false)->init(4,::TimingStruct_obj::getBeatFromTime(noteStrum)));
            		}
HXLINE(3254)		::cpp::VirtualArray thingy = ( (::cpp::VirtualArray)( ::Dynamic(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem((( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length - 1))) );
HXLINE(3256)		this->curSelectedNote = thingy;
HXLINE(3258)		 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtTimestamp(noteStrum);
HXLINE(3260)		if (::hx::IsNull( n )) {
HXLINE(3262)			 ::Note note =  ::Note_obj::__alloc( HX_CTX ,noteStrum,::hx::Mod(noteData,4),null(),false,true,null(),::TimingStruct_obj::getBeatFromTime(noteStrum));
HXLINE(3263)			note->rawNoteData = noteData;
HXLINE(3264)			note->sustainLength = ( (Float)(noteSus) );
HXLINE(3265)			note->setGraphicSize(::Math_obj::floor(( (Float)(this->GRID_SIZE) )),::Math_obj::floor(( (Float)(this->GRID_SIZE) )));
HXLINE(3266)			note->updateHitbox();
HXLINE(3267)			note->set_x(( (Float)(::Math_obj::floor(( (Float)((noteData * this->GRID_SIZE)) ))) ));
HXLINE(3269)			if (::hx::IsNotNull( this->curSelectedNoteObject )) {
HXLINE(3270)				this->curSelectedNoteObject->charterSelected = false;
            			}
HXLINE(3271)			this->curSelectedNoteObject = note;
HXLINE(3273)			while((this->selectedBoxes->members->get_length() != 0)){
HXLINE(3275)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(3276)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(3277)				this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            			}
HXLINE(3280)			this->curSelectedNoteObject->charterSelected = true;
HXLINE(3282)			Float _hx_tmp = this->getYfromStrum(noteStrum);
HXDLIN(3282)			note->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(3284)			 ::ChartingBox box =  ::ChartingBox_obj::__alloc( HX_CTX ,note->x,note->y,note);
HXLINE(3285)			box->connectedNoteData = thingy;
HXLINE(3286)			this->selectedBoxes->add(box).StaticCast<  ::ChartingBox >();
HXLINE(3288)			this->curRenderedNotes->add(note).StaticCast<  ::Note >();
            		}
            		else {
HXLINE(3292)			Float n1 = n->strumTime;
HXDLIN(3292)			int note = ::hx::Mod(n->noteData,4);
HXDLIN(3292)			bool n2 = n->isAlt;
HXDLIN(3292)			 ::Note note1 =  ::Note_obj::__alloc( HX_CTX ,n1,note,null(),false,true,n2,::TimingStruct_obj::getBeatFromTime(n->strumTime));
HXLINE(3293)			note1->beat = ::TimingStruct_obj::getBeatFromTime(n->strumTime);
HXLINE(3294)			note1->rawNoteData = n->noteData;
HXLINE(3295)			note1->sustainLength = ( (Float)(noteSus) );
HXLINE(3296)			note1->setGraphicSize(::Math_obj::floor(( (Float)(this->GRID_SIZE) )),::Math_obj::floor(( (Float)(this->GRID_SIZE) )));
HXLINE(3297)			note1->updateHitbox();
HXLINE(3298)			note1->set_x(( (Float)(::Math_obj::floor(( (Float)((n->noteData * this->GRID_SIZE)) ))) ));
HXLINE(3300)			if (::hx::IsNotNull( this->curSelectedNoteObject )) {
HXLINE(3301)				this->curSelectedNoteObject->charterSelected = false;
            			}
HXLINE(3302)			this->curSelectedNoteObject = note1;
HXLINE(3304)			while((this->selectedBoxes->members->get_length() != 0)){
HXLINE(3306)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(3307)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(3308)				this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            			}
HXLINE(3311)			 ::ChartingBox box =  ::ChartingBox_obj::__alloc( HX_CTX ,note1->x,note1->y,note1);
HXLINE(3312)			box->connectedNoteData = thingy;
HXLINE(3313)			this->selectedBoxes->add(box).StaticCast<  ::ChartingBox >();
HXLINE(3315)			this->curSelectedNoteObject->charterSelected = true;
HXLINE(3317)			Float _hx_tmp = this->getYfromStrum(n->strumTime);
HXDLIN(3317)			note1->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(3319)			this->curRenderedNotes->add(note1).StaticCast<  ::Note >();
            		}
HXLINE(3322)		this->updateNoteUI();
HXLINE(3324)		this->autosaveSong();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addNote,(void))

Float ChartingState_obj::getStrumTime(Float yPos){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3329_getStrumTime)
HXDLIN(3329)		return ::flixel::math::FlxMath_obj::remapToRange(yPos,( (Float)(0) ),::ChartingState_obj::lengthInSteps,( (Float)(0) ),::ChartingState_obj::lengthInSteps);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getStrumTime,return )

Float ChartingState_obj::getYfromStrum(Float strumTime){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3334_getYfromStrum)
HXDLIN(3334)		return ::flixel::math::FlxMath_obj::remapToRange(strumTime,( (Float)(0) ),::ChartingState_obj::lengthInSteps,( (Float)(0) ),::ChartingState_obj::lengthInSteps);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getYfromStrum,return )

void ChartingState_obj::loadLevel(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3364_loadLevel)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadLevel,(void))

::cpp::VirtualArray ChartingState_obj::getNotes(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3368_getNotes)
HXLINE(3369)		::cpp::VirtualArray noteData = ::cpp::VirtualArray_obj::__new(0);
HXLINE(3371)		{
HXLINE(3371)			int _g = 0;
HXDLIN(3371)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3371)			while((_g < _g1->length)){
HXLINE(3371)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3371)				_g = (_g + 1);
HXLINE(3373)				noteData->push( ::Dynamic(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)));
            			}
            		}
HXLINE(3376)		return noteData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,getNotes,return )

void ChartingState_obj::loadJson(::String song){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3380_loadJson)
HXLINE(3381)		::Array< ::String > difficultyArray = ::Array_obj< ::String >::fromData( _hx_array_data_9bdde08d_184,3);
HXLINE(3382)		::String format = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE(3383)		::String _hx_switch_0 = format;
            		if (  (_hx_switch_0==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE(3384)			format = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN(3384)			goto _hx_goto_178;
            		}
            		if (  (_hx_switch_0==HX_("M.I.L.F",1e,4e,41,0d)) ){
HXLINE(3386)			format = HX_("Milf",f6,78,35,33);
HXDLIN(3386)			goto _hx_goto_178;
            		}
            		if (  (_hx_switch_0==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE(3385)			format = HX_("Philly",48,eb,f2,23);
HXDLIN(3385)			goto _hx_goto_178;
            		}
            		_hx_goto_178:;
HXLINE(3388)		::PlayState_obj::SONG = ::Song_obj::loadFromJson((format + difficultyArray->__get(::PlayState_obj::storyDifficulty)),format);
HXLINE(3389)		while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE(3391)			this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            		}
HXLINE(3394)		while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE(3396)			this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(3399)		while((this->sectionRenderes->members->get_length() > 0)){
HXLINE(3401)			this->sectionRenderes->remove(Dynamic( this->sectionRenderes->members->__get(0)).StaticCast<  ::SectionRender >(),true).StaticCast<  ::SectionRender >();
            		}
HXLINE(3404)		while((this->sectionRenderes->members->get_length() > 0)){
HXLINE(3406)			this->sectionRenderes->remove(Dynamic( this->sectionRenderes->members->__get(0)).StaticCast<  ::SectionRender >(),true).StaticCast<  ::SectionRender >();
            		}
HXLINE(3410)		{
HXLINE(3410)			 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::ChartingState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(3410)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3410)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadJson,(void))

void ChartingState_obj::loadAutosave(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3414_loadAutosave)
HXLINE(3415)		while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE(3417)			this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            		}
HXLINE(3420)		while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE(3422)			this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(3424)		::PlayState_obj::SONG = ::Song_obj::parseJSONshit(( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("autosave",2c,4e,9a,44),::hx::paccDynamic)) ));
HXLINE(3425)		while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE(3427)			this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            		}
HXLINE(3430)		while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE(3432)			this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(3435)		while((this->sectionRenderes->members->get_length() > 0)){
HXLINE(3437)			this->sectionRenderes->remove(Dynamic( this->sectionRenderes->members->__get(0)).StaticCast<  ::SectionRender >(),true).StaticCast<  ::SectionRender >();
            		}
HXLINE(3439)		{
HXLINE(3439)			 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::ChartingState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(3439)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3439)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadAutosave,(void))

void ChartingState_obj::autosaveSong(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3443_autosaveSong)
HXLINE(3444)		 ::Dynamic replacer = null();
HXDLIN(3444)		::String space = null();
HXDLIN(3444)		::String _hx_tmp = ::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),::ChartingState_obj::_song)),replacer,space);
HXDLIN(3444)		::flixel::FlxG_obj::save->data->__SetField(HX_("autosave",2c,4e,9a,44),_hx_tmp,::hx::paccDynamic);
HXLINE(3447)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,autosaveSong,(void))

void ChartingState_obj::saveLevel(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3451_saveLevel)
HXLINE(3452)		::Array< ::String > difficultyArray = ::Array_obj< ::String >::fromData( _hx_array_data_9bdde08d_193,3);
HXLINE(3453)		 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),::ChartingState_obj::_song));
HXLINE(3457)		 ::Dynamic replacer = null();
HXDLIN(3457)		::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,HX_(" ",20,00,00,00));
HXLINE(3459)		bool _hx_tmp;
HXDLIN(3459)		if (::hx::IsNotNull( data )) {
HXLINE(3459)			_hx_tmp = (data.length > 0);
            		}
            		else {
HXLINE(3459)			_hx_tmp = false;
            		}
HXDLIN(3459)		if (_hx_tmp) {
HXLINE(3461)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(3462)			this->_file->addEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE(3463)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE(3464)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE(3465)			 ::openfl::net::FileReference _hx_tmp = this->_file;
HXDLIN(3465)			::String _hx_tmp1 = ::StringTools_obj::trim(data);
HXDLIN(3465)			::String _hx_tmp2 = ( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
HXDLIN(3465)			_hx_tmp->save(_hx_tmp1,((_hx_tmp2 + difficultyArray->__get(::PlayState_obj::storyDifficulty)) + HX_(".json",56,f1,d6,c2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,saveLevel,(void))

void ChartingState_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3470_onSaveComplete)
HXLINE(3471)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(3472)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(3473)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(3474)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveComplete,(void))

void ChartingState_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3482_onSaveCancel)
HXLINE(3483)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(3484)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(3485)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(3486)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveCancel,(void))

void ChartingState_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3493_onSaveError)
HXLINE(3494)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(3495)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(3496)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(3497)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveError,(void))

 ::ChartingState ChartingState_obj::instance;

Float ChartingState_obj::lengthInSteps;

Float ChartingState_obj::lengthInBeats;

int ChartingState_obj::lastSection;

 ::Dynamic ChartingState_obj::_song;

 ::HealthIcon ChartingState_obj::leftIcon;

 ::HealthIcon ChartingState_obj::rightIcon;

::String ChartingState_obj::latestChartVersion;


::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< ChartingState_obj > __this = new ChartingState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	ChartingState_obj *__this = (ChartingState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ChartingState_obj), true, "ChartingState"));
	*(void **)__this = ChartingState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

ChartingState_obj::ChartingState_obj()
{
}

void ChartingState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ChartingState);
	HX_MARK_MEMBER_NAME(_file,"_file");
	HX_MARK_MEMBER_NAME(playClaps,"playClaps");
	HX_MARK_MEMBER_NAME(snap,"snap");
	HX_MARK_MEMBER_NAME(deezNuts,"deezNuts");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(UI_options,"UI_options");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(beatsShown,"beatsShown");
	HX_MARK_MEMBER_NAME(zoomFactor,"zoomFactor");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(amountSteps,"amountSteps");
	HX_MARK_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_MARK_MEMBER_NAME(writingNotesText,"writingNotesText");
	HX_MARK_MEMBER_NAME(highlight,"highlight");
	HX_MARK_MEMBER_NAME(GRID_SIZE,"GRID_SIZE");
	HX_MARK_MEMBER_NAME(subDivisions,"subDivisions");
	HX_MARK_MEMBER_NAME(defaultSnap,"defaultSnap");
	HX_MARK_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_MARK_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_MARK_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_MARK_MEMBER_NAME(gridBG,"gridBG");
	HX_MARK_MEMBER_NAME(sectionRenderes,"sectionRenderes");
	HX_MARK_MEMBER_NAME(typingShit,"typingShit");
	HX_MARK_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_MARK_MEMBER_NAME(tempBpm,"tempBpm");
	HX_MARK_MEMBER_NAME(gridBlackLine,"gridBlackLine");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(player2,"player2");
	HX_MARK_MEMBER_NAME(player1,"player1");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(lastNote,"lastNote");
	HX_MARK_MEMBER_NAME(lines,"lines");
	HX_MARK_MEMBER_NAME(claps,"claps");
	HX_MARK_MEMBER_NAME(snapText,"snapText");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(texts,"texts");
	HX_MARK_MEMBER_NAME(stepperDiv,"stepperDiv");
	HX_MARK_MEMBER_NAME(check_snap,"check_snap");
	HX_MARK_MEMBER_NAME(listOfEvents,"listOfEvents");
	HX_MARK_MEMBER_NAME(currentSelectedEventName,"currentSelectedEventName");
	HX_MARK_MEMBER_NAME(savedType,"savedType");
	HX_MARK_MEMBER_NAME(savedValue,"savedValue");
	HX_MARK_MEMBER_NAME(currentEventPosition,"currentEventPosition");
	HX_MARK_MEMBER_NAME(chartEvents,"chartEvents");
	HX_MARK_MEMBER_NAME(Typeables,"Typeables");
	HX_MARK_MEMBER_NAME(stepperLength,"stepperLength");
	HX_MARK_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_MARK_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_MARK_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_MARK_MEMBER_NAME(check_CPUAltAnim,"check_CPUAltAnim");
	HX_MARK_MEMBER_NAME(check_playerAltAnim,"check_playerAltAnim");
	HX_MARK_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_MARK_MEMBER_NAME(tab_group_note,"tab_group_note");
	HX_MARK_MEMBER_NAME(check_naltAnim,"check_naltAnim");
	HX_MARK_MEMBER_NAME(updatedSection,"updatedSection");
	HX_MARK_MEMBER_NAME(writingNotes,"writingNotes");
	HX_MARK_MEMBER_NAME(doSnapShit,"doSnapShit");
	HX_MARK_MEMBER_NAME(diff,"diff");
	HX_MARK_MEMBER_NAME(changeIndex,"changeIndex");
	HX_MARK_MEMBER_NAME(currentBPM,"currentBPM");
	HX_MARK_MEMBER_NAME(lastBPM,"lastBPM");
	HX_MARK_MEMBER_NAME(updateFrame,"updateFrame");
	HX_MARK_MEMBER_NAME(lastUpdatedSection,"lastUpdatedSection");
	HX_MARK_MEMBER_NAME(shownNotes,"shownNotes");
	HX_MARK_MEMBER_NAME(snapSelection,"snapSelection");
	HX_MARK_MEMBER_NAME(selectedBoxes,"selectedBoxes");
	HX_MARK_MEMBER_NAME(waitingForRelease,"waitingForRelease");
	HX_MARK_MEMBER_NAME(selectBox,"selectBox");
	HX_MARK_MEMBER_NAME(copiedNotes,"copiedNotes");
	HX_MARK_MEMBER_NAME(pastedNotes,"pastedNotes");
	HX_MARK_MEMBER_NAME(deletedNotes,"deletedNotes");
	HX_MARK_MEMBER_NAME(selectInitialX,"selectInitialX");
	HX_MARK_MEMBER_NAME(selectInitialY,"selectInitialY");
	HX_MARK_MEMBER_NAME(lastAction,"lastAction");
	HX_MARK_MEMBER_NAME(curSelectedNoteObject,"curSelectedNoteObject");
	HX_MARK_MEMBER_NAME(daSpacing,"daSpacing");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ChartingState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_file,"_file");
	HX_VISIT_MEMBER_NAME(playClaps,"playClaps");
	HX_VISIT_MEMBER_NAME(snap,"snap");
	HX_VISIT_MEMBER_NAME(deezNuts,"deezNuts");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(UI_options,"UI_options");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(beatsShown,"beatsShown");
	HX_VISIT_MEMBER_NAME(zoomFactor,"zoomFactor");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(amountSteps,"amountSteps");
	HX_VISIT_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_VISIT_MEMBER_NAME(writingNotesText,"writingNotesText");
	HX_VISIT_MEMBER_NAME(highlight,"highlight");
	HX_VISIT_MEMBER_NAME(GRID_SIZE,"GRID_SIZE");
	HX_VISIT_MEMBER_NAME(subDivisions,"subDivisions");
	HX_VISIT_MEMBER_NAME(defaultSnap,"defaultSnap");
	HX_VISIT_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_VISIT_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_VISIT_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_VISIT_MEMBER_NAME(gridBG,"gridBG");
	HX_VISIT_MEMBER_NAME(sectionRenderes,"sectionRenderes");
	HX_VISIT_MEMBER_NAME(typingShit,"typingShit");
	HX_VISIT_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_VISIT_MEMBER_NAME(tempBpm,"tempBpm");
	HX_VISIT_MEMBER_NAME(gridBlackLine,"gridBlackLine");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(player2,"player2");
	HX_VISIT_MEMBER_NAME(player1,"player1");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(lastNote,"lastNote");
	HX_VISIT_MEMBER_NAME(lines,"lines");
	HX_VISIT_MEMBER_NAME(claps,"claps");
	HX_VISIT_MEMBER_NAME(snapText,"snapText");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(texts,"texts");
	HX_VISIT_MEMBER_NAME(stepperDiv,"stepperDiv");
	HX_VISIT_MEMBER_NAME(check_snap,"check_snap");
	HX_VISIT_MEMBER_NAME(listOfEvents,"listOfEvents");
	HX_VISIT_MEMBER_NAME(currentSelectedEventName,"currentSelectedEventName");
	HX_VISIT_MEMBER_NAME(savedType,"savedType");
	HX_VISIT_MEMBER_NAME(savedValue,"savedValue");
	HX_VISIT_MEMBER_NAME(currentEventPosition,"currentEventPosition");
	HX_VISIT_MEMBER_NAME(chartEvents,"chartEvents");
	HX_VISIT_MEMBER_NAME(Typeables,"Typeables");
	HX_VISIT_MEMBER_NAME(stepperLength,"stepperLength");
	HX_VISIT_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_VISIT_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_VISIT_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_VISIT_MEMBER_NAME(check_CPUAltAnim,"check_CPUAltAnim");
	HX_VISIT_MEMBER_NAME(check_playerAltAnim,"check_playerAltAnim");
	HX_VISIT_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_VISIT_MEMBER_NAME(tab_group_note,"tab_group_note");
	HX_VISIT_MEMBER_NAME(check_naltAnim,"check_naltAnim");
	HX_VISIT_MEMBER_NAME(updatedSection,"updatedSection");
	HX_VISIT_MEMBER_NAME(writingNotes,"writingNotes");
	HX_VISIT_MEMBER_NAME(doSnapShit,"doSnapShit");
	HX_VISIT_MEMBER_NAME(diff,"diff");
	HX_VISIT_MEMBER_NAME(changeIndex,"changeIndex");
	HX_VISIT_MEMBER_NAME(currentBPM,"currentBPM");
	HX_VISIT_MEMBER_NAME(lastBPM,"lastBPM");
	HX_VISIT_MEMBER_NAME(updateFrame,"updateFrame");
	HX_VISIT_MEMBER_NAME(lastUpdatedSection,"lastUpdatedSection");
	HX_VISIT_MEMBER_NAME(shownNotes,"shownNotes");
	HX_VISIT_MEMBER_NAME(snapSelection,"snapSelection");
	HX_VISIT_MEMBER_NAME(selectedBoxes,"selectedBoxes");
	HX_VISIT_MEMBER_NAME(waitingForRelease,"waitingForRelease");
	HX_VISIT_MEMBER_NAME(selectBox,"selectBox");
	HX_VISIT_MEMBER_NAME(copiedNotes,"copiedNotes");
	HX_VISIT_MEMBER_NAME(pastedNotes,"pastedNotes");
	HX_VISIT_MEMBER_NAME(deletedNotes,"deletedNotes");
	HX_VISIT_MEMBER_NAME(selectInitialX,"selectInitialX");
	HX_VISIT_MEMBER_NAME(selectInitialY,"selectInitialY");
	HX_VISIT_MEMBER_NAME(lastAction,"lastAction");
	HX_VISIT_MEMBER_NAME(curSelectedNoteObject,"curSelectedNoteObject");
	HX_VISIT_MEMBER_NAME(daSpacing,"daSpacing");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ChartingState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"snap") ) { return ::hx::Val( snap ); }
		if (HX_FIELD_EQ(inName,"diff") ) { return ::hx::Val( diff ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { return ::hx::Val( _file ); }
		if (HX_FIELD_EQ(inName,"speed") ) { return ::hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"lines") ) { return ::hx::Val( lines ); }
		if (HX_FIELD_EQ(inName,"claps") ) { return ::hx::Val( claps ); }
		if (HX_FIELD_EQ(inName,"texts") ) { return ::hx::Val( texts ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { return ::hx::Val( bpmTxt ); }
		if (HX_FIELD_EQ(inName,"gridBG") ) { return ::hx::Val( gridBG ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { return ::hx::Val( tempBpm ); }
		if (HX_FIELD_EQ(inName,"player2") ) { return ::hx::Val( player2 ); }
		if (HX_FIELD_EQ(inName,"player1") ) { return ::hx::Val( player1 ); }
		if (HX_FIELD_EQ(inName,"addGrid") ) { return ::hx::Val( addGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"poggers") ) { return ::hx::Val( poggers_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastBPM") ) { return ::hx::Val( lastBPM ); }
		if (HX_FIELD_EQ(inName,"addNote") ) { return ::hx::Val( addNote_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deezNuts") ) { return ::hx::Val( deezNuts ); }
		if (HX_FIELD_EQ(inName,"lastNote") ) { return ::hx::Val( lastNote ); }
		if (HX_FIELD_EQ(inName,"snapText") ) { return ::hx::Val( snapText ); }
		if (HX_FIELD_EQ(inName,"loadSong") ) { return ::hx::Val( loadSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNotes") ) { return ::hx::Val( getNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadJson") ) { return ::hx::Val( loadJson_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playClaps") ) { return ::hx::Val( playClaps ); }
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"highlight") ) { return ::hx::Val( highlight ); }
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { return ::hx::Val( GRID_SIZE ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"savedType") ) { return ::hx::Val( savedType ); }
		if (HX_FIELD_EQ(inName,"Typeables") ) { return ::hx::Val( Typeables ); }
		if (HX_FIELD_EQ(inName,"addSongUI") ) { return ::hx::Val( addSongUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"addNoteUI") ) { return ::hx::Val( addNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectBox") ) { return ::hx::Val( selectBox ); }
		if (HX_FIELD_EQ(inName,"clearSong") ) { return ::hx::Val( clearSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { return ::hx::Val( daSpacing ); }
		if (HX_FIELD_EQ(inName,"loadLevel") ) { return ::hx::Val( loadLevel_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveLevel") ) { return ::hx::Val( saveLevel_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"UI_options") ) { return ::hx::Val( UI_options ); }
		if (HX_FIELD_EQ(inName,"beatsShown") ) { return ::hx::Val( beatsShown ); }
		if (HX_FIELD_EQ(inName,"zoomFactor") ) { return ::hx::Val( zoomFactor ); }
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { return ::hx::Val( bullshitUI ); }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { return ::hx::Val( dummyArrow ); }
		if (HX_FIELD_EQ(inName,"typingShit") ) { return ::hx::Val( typingShit ); }
		if (HX_FIELD_EQ(inName,"stepperDiv") ) { return ::hx::Val( stepperDiv ); }
		if (HX_FIELD_EQ(inName,"check_snap") ) { return ::hx::Val( check_snap ); }
		if (HX_FIELD_EQ(inName,"savedValue") ) { return ::hx::Val( savedValue ); }
		if (HX_FIELD_EQ(inName,"generateUI") ) { return ::hx::Val( generateUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"doSnapShit") ) { return ::hx::Val( doSnapShit ); }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { return ::hx::Val( currentBPM ); }
		if (HX_FIELD_EQ(inName,"shownNotes") ) { return ::hx::Val( shownNotes ); }
		if (HX_FIELD_EQ(inName,"lastAction") ) { return ::hx::Val( lastAction ); }
		if (HX_FIELD_EQ(inName,"updateGrid") ) { return ::hx::Val( updateGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSection") ) { return ::hx::Val( addSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectNote") ) { return ::hx::Val( selectNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteNote") ) { return ::hx::Val( deleteNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"newSection") ) { return ::hx::Val( newSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"shiftNotes") ) { return ::hx::Val( shiftNotes_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"amountSteps") ) { return ::hx::Val( amountSteps ); }
		if (HX_FIELD_EQ(inName,"defaultSnap") ) { return ::hx::Val( defaultSnap ); }
		if (HX_FIELD_EQ(inName,"chartEvents") ) { return ::hx::Val( chartEvents ); }
		if (HX_FIELD_EQ(inName,"addEventsUI") ) { return ::hx::Val( addEventsUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"goToSection") ) { return ::hx::Val( goToSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeIndex") ) { return ::hx::Val( changeIndex ); }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { return ::hx::Val( updateFrame ); }
		if (HX_FIELD_EQ(inName,"copiedNotes") ) { return ::hx::Val( copiedNotes ); }
		if (HX_FIELD_EQ(inName,"pastedNotes") ) { return ::hx::Val( pastedNotes ); }
		if (HX_FIELD_EQ(inName,"copySection") ) { return ::hx::Val( copySection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateHeads") ) { return ::hx::Val( updateHeads_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return ::hx::Val( onSaveError_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subDivisions") ) { return ::hx::Val( subDivisions ); }
		if (HX_FIELD_EQ(inName,"listOfEvents") ) { return ::hx::Val( listOfEvents ); }
		if (HX_FIELD_EQ(inName,"containsName") ) { return ::hx::Val( containsName_dyn() ); }
		if (HX_FIELD_EQ(inName,"addOptionsUI") ) { return ::hx::Val( addOptionsUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSectionUI") ) { return ::hx::Val( addSectionUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"writingNotes") ) { return ::hx::Val( writingNotes ); }
		if (HX_FIELD_EQ(inName,"deletedNotes") ) { return ::hx::Val( deletedNotes ); }
		if (HX_FIELD_EQ(inName,"resetSection") ) { return ::hx::Val( resetSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateNoteUI") ) { return ::hx::Val( updateNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearSection") ) { return ::hx::Val( clearSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getStrumTime") ) { return ::hx::Val( getStrumTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadAutosave") ) { return ::hx::Val( loadAutosave_dyn() ); }
		if (HX_FIELD_EQ(inName,"autosaveSong") ) { return ::hx::Val( autosaveSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return ::hx::Val( onSaveCancel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gridBlackLine") ) { return ::hx::Val( gridBlackLine ); }
		if (HX_FIELD_EQ(inName,"stepperLength") ) { return ::hx::Val( stepperLength ); }
		if (HX_FIELD_EQ(inName,"stepStartTime") ) { return ::hx::Val( stepStartTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"snapSelection") ) { return ::hx::Val( snapSelection ); }
		if (HX_FIELD_EQ(inName,"selectedBoxes") ) { return ::hx::Val( selectedBoxes ); }
		if (HX_FIELD_EQ(inName,"changeSection") ) { return ::hx::Val( changeSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNoteByTime") ) { return ::hx::Val( getNoteByTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYfromStrum") ) { return ::hx::Val( getYfromStrum_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tab_group_note") ) { return ::hx::Val( tab_group_note ); }
		if (HX_FIELD_EQ(inName,"check_naltAnim") ) { return ::hx::Val( check_naltAnim ); }
		if (HX_FIELD_EQ(inName,"updatedSection") ) { return ::hx::Val( updatedSection ); }
		if (HX_FIELD_EQ(inName,"selectInitialX") ) { return ::hx::Val( selectInitialX ); }
		if (HX_FIELD_EQ(inName,"selectInitialY") ) { return ::hx::Val( selectInitialY ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return ::hx::Val( onSaveComplete_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sectionRenderes") ) { return ::hx::Val( sectionRenderes ); }
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { return ::hx::Val( curSelectedNote ); }
		if (HX_FIELD_EQ(inName,"regenerateLines") ) { return ::hx::Val( regenerateLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { return ::hx::Val( check_changeBPM ); }
		if (HX_FIELD_EQ(inName,"updateSectionUI") ) { return ::hx::Val( updateSectionUI_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"writingNotesText") ) { return ::hx::Val( writingNotesText ); }
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { return ::hx::Val( curRenderedNotes ); }
		if (HX_FIELD_EQ(inName,"check_CPUAltAnim") ) { return ::hx::Val( check_CPUAltAnim ); }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { return ::hx::Val( stepperSusLength ); }
		if (HX_FIELD_EQ(inName,"sectionStartTime") ) { return ::hx::Val( sectionStartTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"resizeEverything") ) { return ::hx::Val( resizeEverything_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSectionByTime") ) { return ::hx::Val( getSectionByTime_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { return ::hx::Val( stepperSectionBPM ); }
		if (HX_FIELD_EQ(inName,"waitingForRelease") ) { return ::hx::Val( waitingForRelease ); }
		if (HX_FIELD_EQ(inName,"changeNoteSustain") ) { return ::hx::Val( changeNoteSustain_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastUpdatedSection") ) { return ::hx::Val( lastUpdatedSection ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { return ::hx::Val( curRenderedSustains ); }
		if (HX_FIELD_EQ(inName,"check_playerAltAnim") ) { return ::hx::Val( check_playerAltAnim ); }
		if (HX_FIELD_EQ(inName,"pasteNotesFromArray") ) { return ::hx::Val( pasteNotesFromArray_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"currentEventPosition") ) { return ::hx::Val( currentEventPosition ); }
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { return ::hx::Val( check_mustHitSection ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"curSelectedNoteObject") ) { return ::hx::Val( curSelectedNoteObject ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"currentSelectedEventName") ) { return ::hx::Val( currentSelectedEventName ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"recalculateAllSectionTimes") ) { return ::hx::Val( recalculateAllSectionTimes_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ChartingState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_song") ) { outValue = ( _song ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		if (HX_FIELD_EQ(inName,"leftIcon") ) { outValue = ( leftIcon ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rightIcon") ) { outValue = ( rightIcon ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { outValue = ( lastSection ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthInSteps") ) { outValue = ( lengthInSteps ); return true; }
		if (HX_FIELD_EQ(inName,"lengthInBeats") ) { outValue = ( lengthInBeats ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"latestChartVersion") ) { outValue = ( latestChartVersion ); return true; }
	}
	return false;
}

::hx::Val ChartingState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"snap") ) { snap=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diff") ) { diff=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { _file=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lines") ) { lines=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"claps") ) { claps=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texts") ) { texts=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { bpmTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridBG") ) { gridBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { tempBpm=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player2") ) { player2=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player1") ) { player1=inValue.Cast<  ::Boyfriend >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastBPM") ) { lastBPM=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deezNuts") ) { deezNuts=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastNote") ) { lastNote=inValue.Cast<  ::Note >(); return inValue; }
		if (HX_FIELD_EQ(inName,"snapText") ) { snapText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playClaps") ) { playClaps=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"highlight") ) { highlight=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { GRID_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"savedType") ) { savedType=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Typeables") ) { Typeables=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectBox") ) { selectBox=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { daSpacing=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"UI_options") ) { UI_options=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"beatsShown") ) { beatsShown=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomFactor") ) { zoomFactor=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { bullshitUI=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { dummyArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"typingShit") ) { typingShit=inValue.Cast<  ::flixel::addons::ui::FlxInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperDiv") ) { stepperDiv=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_snap") ) { check_snap=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"savedValue") ) { savedValue=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"doSnapShit") ) { doSnapShit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { currentBPM=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shownNotes") ) { shownNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastAction") ) { lastAction=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"amountSteps") ) { amountSteps=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultSnap") ) { defaultSnap=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chartEvents") ) { chartEvents=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"changeIndex") ) { changeIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { updateFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"copiedNotes") ) { copiedNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pastedNotes") ) { pastedNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subDivisions") ) { subDivisions=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listOfEvents") ) { listOfEvents=inValue.Cast<  ::flixel::addons::ui::FlxUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"writingNotes") ) { writingNotes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"deletedNotes") ) { deletedNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gridBlackLine") ) { gridBlackLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperLength") ) { stepperLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"snapSelection") ) { snapSelection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedBoxes") ) { selectedBoxes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tab_group_note") ) { tab_group_note=inValue.Cast<  ::flixel::addons::ui::FlxUI >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_naltAnim") ) { check_naltAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updatedSection") ) { updatedSection=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectInitialX") ) { selectInitialX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectInitialY") ) { selectInitialY=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sectionRenderes") ) { sectionRenderes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { curSelectedNote=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { check_changeBPM=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"writingNotesText") ) { writingNotesText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { curRenderedNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_CPUAltAnim") ) { check_CPUAltAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { stepperSusLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { stepperSectionBPM=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waitingForRelease") ) { waitingForRelease=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastUpdatedSection") ) { lastUpdatedSection=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { curRenderedSustains=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_playerAltAnim") ) { check_playerAltAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"currentEventPosition") ) { currentEventPosition=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { check_mustHitSection=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"curSelectedNoteObject") ) { curSelectedNoteObject=inValue.Cast<  ::Note >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"currentSelectedEventName") ) { currentSelectedEventName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ChartingState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_song") ) { _song=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::ChartingState >(); return true; }
		if (HX_FIELD_EQ(inName,"leftIcon") ) { leftIcon=ioValue.Cast<  ::HealthIcon >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rightIcon") ) { rightIcon=ioValue.Cast<  ::HealthIcon >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { lastSection=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthInSteps") ) { lengthInSteps=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"lengthInBeats") ) { lengthInBeats=ioValue.Cast< Float >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"latestChartVersion") ) { latestChartVersion=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void ChartingState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_file",5b,ea,cc,f6));
	outFields->push(HX_("playClaps",07,a3,3c,69));
	outFields->push(HX_("snap",4a,56,57,4c));
	outFields->push(HX_("deezNuts",dc,76,82,94));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("UI_options",33,4b,47,19));
	outFields->push(HX_("speed",87,97,69,81));
	outFields->push(HX_("beatsShown",54,d5,f6,63));
	outFields->push(HX_("zoomFactor",42,c0,4e,b4));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("bpmTxt",d1,bc,26,f4));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("amountSteps",af,2a,91,a5));
	outFields->push(HX_("bullshitUI",67,a9,a3,d3));
	outFields->push(HX_("writingNotesText",12,02,e7,d3));
	outFields->push(HX_("highlight",34,56,00,ed));
	outFields->push(HX_("GRID_SIZE",1a,98,25,c9));
	outFields->push(HX_("subDivisions",06,31,26,2c));
	outFields->push(HX_("defaultSnap",ab,4f,16,1e));
	outFields->push(HX_("dummyArrow",81,8a,75,ae));
	outFields->push(HX_("curRenderedNotes",2c,e1,fb,dc));
	outFields->push(HX_("curRenderedSustains",65,b2,8a,50));
	outFields->push(HX_("gridBG",0b,ce,23,18));
	outFields->push(HX_("sectionRenderes",49,74,65,eb));
	outFields->push(HX_("typingShit",d7,01,ec,6a));
	outFields->push(HX_("curSelectedNote",8d,49,f4,47));
	outFields->push(HX_("tempBpm",2b,d8,ac,46));
	outFields->push(HX_("gridBlackLine",ad,65,ea,f8));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("player2",b1,09,15,8a));
	outFields->push(HX_("player1",b0,09,15,8a));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("lastNote",68,31,53,dc));
	outFields->push(HX_("lines",ff,dd,01,75));
	outFields->push(HX_("claps",9b,75,58,48));
	outFields->push(HX_("snapText",17,3c,34,0d));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("texts",26,4b,99,0d));
	outFields->push(HX_("stepperDiv",c0,b0,21,f4));
	outFields->push(HX_("check_snap",61,04,2b,7c));
	outFields->push(HX_("listOfEvents",0e,f6,f0,91));
	outFields->push(HX_("currentSelectedEventName",31,61,08,a9));
	outFields->push(HX_("savedType",e1,b8,73,c7));
	outFields->push(HX_("savedValue",6a,1b,bb,d4));
	outFields->push(HX_("currentEventPosition",ea,92,90,06));
	outFields->push(HX_("chartEvents",97,5a,ec,fc));
	outFields->push(HX_("Typeables",7f,44,75,ee));
	outFields->push(HX_("stepperLength",d7,b0,3a,4b));
	outFields->push(HX_("check_mustHitSection",12,30,fc,78));
	outFields->push(HX_("check_changeBPM",d8,2d,43,fc));
	outFields->push(HX_("stepperSectionBPM",6b,ba,b7,95));
	outFields->push(HX_("check_CPUAltAnim",09,09,2a,93));
	outFields->push(HX_("check_playerAltAnim",82,25,63,ff));
	outFields->push(HX_("stepperSusLength",06,e6,fc,95));
	outFields->push(HX_("tab_group_note",1c,75,04,82));
	outFields->push(HX_("check_naltAnim",c3,02,1a,86));
	outFields->push(HX_("updatedSection",ea,f8,55,de));
	outFields->push(HX_("writingNotes",c5,c2,9a,1c));
	outFields->push(HX_("doSnapShit",d5,55,02,7a));
	outFields->push(HX_("diff",05,5c,69,42));
	outFields->push(HX_("changeIndex",82,43,da,e3));
	outFields->push(HX_("currentBPM",26,68,25,c7));
	outFields->push(HX_("lastBPM",29,ea,9f,d7));
	outFields->push(HX_("updateFrame",64,e1,1b,ec));
	outFields->push(HX_("lastUpdatedSection",e0,c1,dd,e5));
	outFields->push(HX_("shownNotes",b0,2d,1a,63));
	outFields->push(HX_("snapSelection",a2,68,82,ba));
	outFields->push(HX_("selectedBoxes",de,ca,40,ad));
	outFields->push(HX_("waitingForRelease",ab,09,c5,09));
	outFields->push(HX_("selectBox",6f,60,fd,8d));
	outFields->push(HX_("copiedNotes",5d,6e,3c,8c));
	outFields->push(HX_("pastedNotes",d0,74,74,81));
	outFields->push(HX_("deletedNotes",a8,13,ac,60));
	outFields->push(HX_("selectInitialX",70,96,c1,b8));
	outFields->push(HX_("selectInitialY",71,96,c1,b8));
	outFields->push(HX_("lastAction",ac,1e,21,e1));
	outFields->push(HX_("curSelectedNoteObject",2c,64,f7,86));
	outFields->push(HX_("daSpacing",86,9d,76,71));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ChartingState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(ChartingState_obj,_file),HX_("_file",5b,ea,cc,f6)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,playClaps),HX_("playClaps",07,a3,3c,69)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,snap),HX_("snap",4a,56,57,4c)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(ChartingState_obj,deezNuts),HX_("deezNuts",dc,76,82,94)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(ChartingState_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(ChartingState_obj,UI_options),HX_("UI_options",33,4b,47,19)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,speed),HX_("speed",87,97,69,81)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,beatsShown),HX_("beatsShown",54,d5,f6,63)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,zoomFactor),HX_("zoomFactor",42,c0,4e,b4)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,bpmTxt),HX_("bpmTxt",d1,bc,26,f4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,amountSteps),HX_("amountSteps",af,2a,91,a5)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,bullshitUI),HX_("bullshitUI",67,a9,a3,d3)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,writingNotesText),HX_("writingNotesText",12,02,e7,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,highlight),HX_("highlight",34,56,00,ed)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,GRID_SIZE),HX_("GRID_SIZE",1a,98,25,c9)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,subDivisions),HX_("subDivisions",06,31,26,2c)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,defaultSnap),HX_("defaultSnap",ab,4f,16,1e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,dummyArrow),HX_("dummyArrow",81,8a,75,ae)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedNotes),HX_("curRenderedNotes",2c,e1,fb,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedSustains),HX_("curRenderedSustains",65,b2,8a,50)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBG),HX_("gridBG",0b,ce,23,18)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,sectionRenderes),HX_("sectionRenderes",49,74,65,eb)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxInputText */ ,(int)offsetof(ChartingState_obj,typingShit),HX_("typingShit",d7,01,ec,6a)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,curSelectedNote),HX_("curSelectedNote",8d,49,f4,47)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,tempBpm),HX_("tempBpm",2b,d8,ac,46)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBlackLine),HX_("gridBlackLine",ad,65,ea,f8)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(ChartingState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(ChartingState_obj,player2),HX_("player2",b1,09,15,8a)},
	{::hx::fsObject /*  ::Boyfriend */ ,(int)offsetof(ChartingState_obj,player1),HX_("player1",b0,09,15,8a)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsObject /*  ::Note */ ,(int)offsetof(ChartingState_obj,lastNote),HX_("lastNote",68,31,53,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,lines),HX_("lines",ff,dd,01,75)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,claps),HX_("claps",9b,75,58,48)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,snapText),HX_("snapText",17,3c,34,0d)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(ChartingState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,texts),HX_("texts",26,4b,99,0d)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperDiv),HX_("stepperDiv",c0,b0,21,f4)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_snap),HX_("check_snap",61,04,2b,7c)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,listOfEvents),HX_("listOfEvents",0e,f6,f0,91)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,currentSelectedEventName),HX_("currentSelectedEventName",31,61,08,a9)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,savedType),HX_("savedType",e1,b8,73,c7)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,savedValue),HX_("savedValue",6a,1b,bb,d4)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,currentEventPosition),HX_("currentEventPosition",ea,92,90,06)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,chartEvents),HX_("chartEvents",97,5a,ec,fc)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,Typeables),HX_("Typeables",7f,44,75,ee)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperLength),HX_("stepperLength",d7,b0,3a,4b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_mustHitSection),HX_("check_mustHitSection",12,30,fc,78)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_changeBPM),HX_("check_changeBPM",d8,2d,43,fc)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSectionBPM),HX_("stepperSectionBPM",6b,ba,b7,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_CPUAltAnim),HX_("check_CPUAltAnim",09,09,2a,93)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_playerAltAnim),HX_("check_playerAltAnim",82,25,63,ff)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSusLength),HX_("stepperSusLength",06,e6,fc,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUI */ ,(int)offsetof(ChartingState_obj,tab_group_note),HX_("tab_group_note",1c,75,04,82)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_naltAnim),HX_("check_naltAnim",c3,02,1a,86)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,updatedSection),HX_("updatedSection",ea,f8,55,de)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,writingNotes),HX_("writingNotes",c5,c2,9a,1c)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,doSnapShit),HX_("doSnapShit",d5,55,02,7a)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,diff),HX_("diff",05,5c,69,42)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,changeIndex),HX_("changeIndex",82,43,da,e3)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,currentBPM),HX_("currentBPM",26,68,25,c7)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,lastBPM),HX_("lastBPM",29,ea,9f,d7)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,updateFrame),HX_("updateFrame",64,e1,1b,ec)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ChartingState_obj,lastUpdatedSection),HX_("lastUpdatedSection",e0,c1,dd,e5)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,shownNotes),HX_("shownNotes",b0,2d,1a,63)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,snapSelection),HX_("snapSelection",a2,68,82,ba)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,selectedBoxes),HX_("selectedBoxes",de,ca,40,ad)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,waitingForRelease),HX_("waitingForRelease",ab,09,c5,09)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,selectBox),HX_("selectBox",6f,60,fd,8d)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,copiedNotes),HX_("copiedNotes",5d,6e,3c,8c)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,pastedNotes),HX_("pastedNotes",d0,74,74,81)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,deletedNotes),HX_("deletedNotes",a8,13,ac,60)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,selectInitialX),HX_("selectInitialX",70,96,c1,b8)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,selectInitialY),HX_("selectInitialY",71,96,c1,b8)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,lastAction),HX_("lastAction",ac,1e,21,e1)},
	{::hx::fsObject /*  ::Note */ ,(int)offsetof(ChartingState_obj,curSelectedNoteObject),HX_("curSelectedNoteObject",2c,64,f7,86)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,daSpacing),HX_("daSpacing",86,9d,76,71)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ChartingState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::ChartingState */ ,(void *) &ChartingState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsFloat,(void *) &ChartingState_obj::lengthInSteps,HX_("lengthInSteps",3c,ed,41,db)},
	{::hx::fsFloat,(void *) &ChartingState_obj::lengthInBeats,HX_("lengthInBeats",d2,d7,84,07)},
	{::hx::fsInt,(void *) &ChartingState_obj::lastSection,HX_("lastSection",2f,ba,83,12)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &ChartingState_obj::_song,HX_("_song",b4,3f,69,ff)},
	{::hx::fsObject /*  ::HealthIcon */ ,(void *) &ChartingState_obj::leftIcon,HX_("leftIcon",20,2b,ae,4c)},
	{::hx::fsObject /*  ::HealthIcon */ ,(void *) &ChartingState_obj::rightIcon,HX_("rightIcon",75,3d,79,b0)},
	{::hx::fsString,(void *) &ChartingState_obj::latestChartVersion,HX_("latestChartVersion",c1,89,05,09)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ChartingState_obj_sMemberFields[] = {
	HX_("_file",5b,ea,cc,f6),
	HX_("playClaps",07,a3,3c,69),
	HX_("snap",4a,56,57,4c),
	HX_("deezNuts",dc,76,82,94),
	HX_("UI_box",60,07,ac,43),
	HX_("UI_options",33,4b,47,19),
	HX_("speed",87,97,69,81),
	HX_("beatsShown",54,d5,f6,63),
	HX_("zoomFactor",42,c0,4e,b4),
	HX_("curSection",45,58,c1,68),
	HX_("bpmTxt",d1,bc,26,f4),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSong",75,95,6d,b7),
	HX_("amountSteps",af,2a,91,a5),
	HX_("bullshitUI",67,a9,a3,d3),
	HX_("writingNotesText",12,02,e7,d3),
	HX_("highlight",34,56,00,ed),
	HX_("GRID_SIZE",1a,98,25,c9),
	HX_("subDivisions",06,31,26,2c),
	HX_("defaultSnap",ab,4f,16,1e),
	HX_("dummyArrow",81,8a,75,ae),
	HX_("curRenderedNotes",2c,e1,fb,dc),
	HX_("curRenderedSustains",65,b2,8a,50),
	HX_("gridBG",0b,ce,23,18),
	HX_("sectionRenderes",49,74,65,eb),
	HX_("typingShit",d7,01,ec,6a),
	HX_("curSelectedNote",8d,49,f4,47),
	HX_("tempBpm",2b,d8,ac,46),
	HX_("gridBlackLine",ad,65,ea,f8),
	HX_("vocals",5e,10,51,59),
	HX_("player2",b1,09,15,8a),
	HX_("player1",b0,09,15,8a),
	HX_("height",e7,07,4c,02),
	HX_("lastNote",68,31,53,dc),
	HX_("lines",ff,dd,01,75),
	HX_("claps",9b,75,58,48),
	HX_("snapText",17,3c,34,0d),
	HX_("camFollow",e0,6e,47,22),
	HX_("create",fc,66,0f,7c),
	HX_("texts",26,4b,99,0d),
	HX_("regenerateLines",f7,b6,ed,41),
	HX_("addGrid",87,19,a9,80),
	HX_("stepperDiv",c0,b0,21,f4),
	HX_("check_snap",61,04,2b,7c),
	HX_("listOfEvents",0e,f6,f0,91),
	HX_("currentSelectedEventName",31,61,08,a9),
	HX_("savedType",e1,b8,73,c7),
	HX_("savedValue",6a,1b,bb,d4),
	HX_("currentEventPosition",ea,92,90,06),
	HX_("containsName",0a,f4,74,a3),
	HX_("chartEvents",97,5a,ec,fc),
	HX_("Typeables",7f,44,75,ee),
	HX_("addEventsUI",ee,88,4b,f2),
	HX_("addOptionsUI",d1,b2,cc,81),
	HX_("addSongUI",6a,02,ad,e5),
	HX_("stepperLength",d7,b0,3a,4b),
	HX_("check_mustHitSection",12,30,fc,78),
	HX_("check_changeBPM",d8,2d,43,fc),
	HX_("stepperSectionBPM",6b,ba,b7,95),
	HX_("check_CPUAltAnim",09,09,2a,93),
	HX_("check_playerAltAnim",82,25,63,ff),
	HX_("addSectionUI",18,75,a5,87),
	HX_("stepperSusLength",06,e6,fc,95),
	HX_("tab_group_note",1c,75,04,82),
	HX_("goToSection",62,3e,06,69),
	HX_("check_naltAnim",c3,02,1a,86),
	HX_("addNoteUI",c7,f7,d9,e9),
	HX_("pasteNotesFromArray",01,3e,59,19),
	HX_("loadSong",1b,f5,f7,bc),
	HX_("generateUI",c9,a0,60,4e),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("updatedSection",ea,f8,55,de),
	HX_("poggers",e7,c2,a8,25),
	HX_("stepStartTime",a3,f4,4d,c0),
	HX_("sectionStartTime",ea,ba,df,45),
	HX_("writingNotes",c5,c2,9a,1c),
	HX_("doSnapShit",d5,55,02,7a),
	HX_("diff",05,5c,69,42),
	HX_("changeIndex",82,43,da,e3),
	HX_("currentBPM",26,68,25,c7),
	HX_("lastBPM",29,ea,9f,d7),
	HX_("updateFrame",64,e1,1b,ec),
	HX_("lastUpdatedSection",e0,c1,dd,e5),
	HX_("resizeEverything",87,a1,09,4d),
	HX_("shownNotes",b0,2d,1a,63),
	HX_("snapSelection",a2,68,82,ba),
	HX_("selectedBoxes",de,ca,40,ad),
	HX_("waitingForRelease",ab,09,c5,09),
	HX_("selectBox",6f,60,fd,8d),
	HX_("copiedNotes",5d,6e,3c,8c),
	HX_("pastedNotes",d0,74,74,81),
	HX_("deletedNotes",a8,13,ac,60),
	HX_("selectInitialX",70,96,c1,b8),
	HX_("selectInitialY",71,96,c1,b8),
	HX_("lastAction",ac,1e,21,e1),
	HX_("update",09,86,05,87),
	HX_("changeNoteSustain",41,6b,40,3c),
	HX_("resetSection",d6,4b,b6,cf),
	HX_("changeSection",55,aa,ac,be),
	HX_("copySection",b0,82,ec,b3),
	HX_("updateSectionUI",30,24,dc,d7),
	HX_("updateHeads",8a,3c,51,0a),
	HX_("updateNoteUI",af,69,79,31),
	HX_("updateGrid",6f,c1,20,fd),
	HX_("addSection",c4,31,62,c5),
	HX_("selectNote",0e,8d,a5,b7),
	HX_("deleteNote",bd,f5,56,9c),
	HX_("clearSection",d8,b7,56,39),
	HX_("clearSong",02,0c,19,c0),
	HX_("newSection",65,29,da,9a),
	HX_("recalculateAllSectionTimes",4f,b8,31,bc),
	HX_("shiftNotes",5f,c8,22,af),
	HX_("getSectionByTime",d3,a2,dd,1e),
	HX_("getNoteByTime",4c,ef,d1,0c),
	HX_("curSelectedNoteObject",2c,64,f7,86),
	HX_("addNote",b3,5a,47,85),
	HX_("getStrumTime",80,ca,77,03),
	HX_("getYfromStrum",1c,4c,46,78),
	HX_("daSpacing",86,9d,76,71),
	HX_("loadLevel",7e,61,9a,8d),
	HX_("getNotes",cb,eb,a1,ff),
	HX_("loadJson",6e,13,08,b7),
	HX_("loadAutosave",72,3a,03,fe),
	HX_("autosaveSong",21,24,ac,67),
	HX_("saveLevel",07,1d,10,01),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	::String(null()) };

static void ChartingState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ChartingState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lengthInSteps,"lengthInSteps");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lengthInBeats,"lengthInBeats");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
	HX_MARK_MEMBER_NAME(ChartingState_obj::_song,"_song");
	HX_MARK_MEMBER_NAME(ChartingState_obj::leftIcon,"leftIcon");
	HX_MARK_MEMBER_NAME(ChartingState_obj::rightIcon,"rightIcon");
	HX_MARK_MEMBER_NAME(ChartingState_obj::latestChartVersion,"latestChartVersion");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ChartingState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ChartingState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lengthInSteps,"lengthInSteps");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lengthInBeats,"lengthInBeats");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::_song,"_song");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::leftIcon,"leftIcon");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::rightIcon,"rightIcon");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::latestChartVersion,"latestChartVersion");
};

#endif

::hx::Class ChartingState_obj::__mClass;

static ::String ChartingState_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("lengthInSteps",3c,ed,41,db),
	HX_("lengthInBeats",d2,d7,84,07),
	HX_("lastSection",2f,ba,83,12),
	HX_("_song",b4,3f,69,ff),
	HX_("leftIcon",20,2b,ae,4c),
	HX_("rightIcon",75,3d,79,b0),
	HX_("latestChartVersion",c1,89,05,09),
	::String(null())
};

void ChartingState_obj::__register()
{
	ChartingState_obj _hx_dummy;
	ChartingState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ChartingState",8d,e0,dd,9b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ChartingState_obj::__GetStatic;
	__mClass->mSetStaticField = &ChartingState_obj::__SetStatic;
	__mClass->mMarkFunc = ChartingState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ChartingState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ChartingState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ChartingState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ChartingState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChartingState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChartingState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ChartingState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_69_boot)
HXDLIN(  69)		lengthInSteps = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_70_boot)
HXDLIN(  70)		lengthInBeats = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_83_boot)
HXDLIN(  83)		lastSection = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_142_boot)
HXDLIN( 142)		latestChartVersion = HX_("2",32,00,00,00);
            	}
}

